<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>
<t:property name="test_account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.password" value="test123"/>
<t:property name="test_account3.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account4.name" value="test.${TIME}.${COUNTER}@@${defaultdomain.name}"/>

<t:property name="folder.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder6.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder6.newname" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder7a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder7b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder8a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder8b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder9.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder10.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder11.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder12.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder13a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder13b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder14a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder14b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15.newname" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15c.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15d.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15e.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder15f.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder16.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder17.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder17a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder18.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder18a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder19.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder19a.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder19b.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder20.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder21.name" value="folder.${TIME}.${COUNTER}"/>

<t:property name="folder.trash" value="3"/>
<t:property name="folder.inbox" value="2"/>
<t:property name="folder.busy" value="b"/>
<t:property name="folder.color" value="8"/>
<t:property name="folder.newcolor" value="4"/>
<t:property name="folder.blankname" value=""/>
<t:property name="folder.space" value="            "/>
<t:property name="folder.spchar" value=":/\\.;&lt;*''"/>
<t:property name="folder.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="folder.pnameZero" value="0"/>

<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder1.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="folder2.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder2.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="subfolder2.name" value="subfolder${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test  id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct1_setup" type="always" >
    <t:objective>create test account</t:objective>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${test_account1.name}</name>
            <password>${test_account1.password}</password>
            <!-- 
            <a n="zimbraMailHost">${LOCALHOST}</a>
            <a n="zimbraMailStatus">enabled</a>
            <a n="zimbraMailDeliveryAddress">${test_account1.name}</a> 
            <a n="zimbraPasswordMinAge">7</a>
            Commenting out the optional attributes and sending the request with minimal requirement
             -->
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

	<t:test  id="create_test_account2" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${test_account2.name}</name>
            <password>${test_account2.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

<t:test_case testcaseid="acct1_login" type="always" >
    <t:objective>login as the test account</t:objective>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
                <!--<prefs/>-->
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest1" type="smoke">
    <t:objective>Rename a folder to unique name </t:objective>

    <t:steps>1. Create a folder.
             2. Rename it.
    </t:steps>

    <t:test  id="folderaction1a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder6.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder6.id"/>
        </t:response>
    </t:test>

    <t:test  depends="folderaction1a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${folder6.id}" name="${folder6.newname}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder6.id}"/>
            <t:select attr="op" match="rename"/>        
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest2" type="sanity" >
    <t:objective>Rename a folder to duplicate name </t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Rename the first folder to the second folder name
    </t:steps> 

    <t:test  id="folderaction2a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder7a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder7a.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction2b" depends="folderaction2a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder7b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder7b.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction2b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${folder7a.id}" name="${folder7b.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.ALREADY_EXISTS"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest3" type="functional" >
    <t:objective>Rename a folder with nonexisting/deleted folder id </t:objective>
    <t:steps>1. Delete any existing folder.
             2. Rename the deleted folder.
    </t:steps>

    <t:test  id="folderaction3b" depends="folderaction2b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder7b.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder7b.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${folder7b.id}" name="${folder.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest4" type="bhr">
    <t:objective>Move a folder within some existing folder </t:objective>
    <t:steps> create folderA, create folderB, move folderB under folderA </t:steps>

    <t:test  id="folderaction4a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder8a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder8a.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction4b" depends="folderaction4a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder8b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder8b.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test>
         <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="move" id="${folder8b.id}" l="${folder8a.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder8b.id}"/>      
               <t:select attr="op" match="move"/>      
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest5" type="sanity" >
    <t:objective>Move a folder within itself </t:objective>

    <t:steps>1. Create a folder
             2. Move the folder within itself.
    </t:steps>
    <t:test  id="folderaction5a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder9.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder9.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction5a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="move" id="${folder9.id}" l="${folder9.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.CANNOT_CONTAIN"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest6" type="bhr">
    <t:objective>Delete a Folder,i.e move it to trash </t:objective>

    <t:test  id="folderaction6a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder10.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder10.id"/>
            </t:select>
        </t:response>
    </t:test>

<!--
    Matt: 05/04/2005 -
     - How do we know that ID=3 is trash?
-->
    <t:test  depends="folderaction6a">
    <t:request>
        <FolderActionRequest xmlns="urn:zimbraMail">
            <action op="move" id="${folder10.id}" l="${folder.trash}"/>
        </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest7" type="functional" >
    <t:objective>Move a folder within a non existing folder </t:objective>

    <t:test  id="folderaction7a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder11.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder11.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction7a">
         <t:request>
             <FolderActionRequest xmlns="urn:zimbraMail">
                 <action op="move" id="${folder11.id}" l="-1"/>
             </FolderActionRequest>
        </t:request>
         <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest7" type="bhr">
    <t:objective>Delete an existing folder  and delete a already deleted folder</t:objective>

    <t:test  id="folderaction7a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder12.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder12.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction7b" depends="folderaction7a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder12.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder12.id}"/>      
            </t:select>
        </t:response>
    </t:test>


    <!-- delete an non existing folder -->
    <!-- try again with folder2 -->
    <t:test  depends="folderaction7b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="delete" id="${folder12.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest8" type="sanity" >
    <t:objective>Rename a folder to duplicate name but with leading spaces</t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Rename the first folder to the second folder name with leading spaces.
    </t:steps> 

    <t:test  id="folderaction8a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder13a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder13a.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction8b" depends="folderaction8a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder13b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder13b.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test depends="folderaction8b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${folder13a.id}" name="              ${folder13b.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            	<t:select attr="id" match="${folder13a.id}"/>      
            	<t:select attr="op" match="rename"/>      
            </t:select>
        </t:response>
    </t:test>

	<t:test>
	 <t:request>
	   <GetFolderRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	  <t:response>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='              ${folder13b.name}']"/>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder13b.name}']"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest9" type="sanity" >
    <t:objective>Rename a folder to duplicate name but with trailing spaces</t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Rename the first folder to the second folder name with trailing spaces.
    </t:steps> 

    <t:test  id="folderaction9a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder14a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder14a.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction9b" depends="folderaction8a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder14b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder14b.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test depends="folderaction9b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${folder14a.id}" name="${folder14b.name}           "/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.ALREADY_EXISTS"/>
			
        </t:response>
    </t:test>

	<!--t:test>
	 <t:request>
	   <GetFolderRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	  <t:response>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder14b.name}           ']"/>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder14b.name}']"/>
	 </t:response>
	</t:test-->

</t:test_case>


<t:test_case testcaseid="FolderActionRequest10" type="sanity" >
    <t:objective>Mark all mails in folders ar read</t:objective>
<t:steps> 1.Send a mail
		2. Mark it as read
</t:steps>

	<t:test id="FolderActionRequest10a">
       <t:request>
		<SendMsgRequest xmlns="urn:zimbraMail">
		<m>
		<e t="t" a='${test_account1.name}'/>
		<su> Test Mail for Unread option </su>
		<mp ct="text/plain">
	    <content> Test </content>
		</mp>
		</m>
		</SendMsgRequest>
	   </t:request>
  <t:response>
         <t:select path="//mail:SendMsgResponse"/>
   </t:response>

  </t:test>

<t:test id="FolderActionRequest10b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="read" id="${folder14a.id}" l="${folder.pname}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="op" match="read"/>   
	</t:select>
	 </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest11" type="sanity" >
    <t:objective>Mark all mails in folders ar unread</t:objective>

<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="unread" id="${folder14a.id}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>

        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="FolderActionRequest12" type="bhr">
    <t:objective>Empty a folder. </t:objective>
    
    <t:steps>1Create a new folder.
             2.Add a mail to the newly created folder.
             3.Empty the folder.
             4.Search the mail in the newly created folder (Should not exist).
             5. Search for the emptied folder (Should still exist).
    </t:steps>

    <!-- Create a new folder.-->
    <t:test id="folderActionRequest12a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder1.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the newly created folder.-->
    <t:test id="folderActionRequest12b">
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder1.id}">
                    <content Subject="hello" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message2.id"/>
        </t:response>
    </t:test>

    <!-- Empty the folder.-->
    <t:test >
        <t:request id="folderActionRequest12c" depends="folderActionRequest12a">
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="empty" id="${folder1.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder1.id}"/>
            <t:select attr="op" match="empty"/>        
            </t:select>
        </t:response>
    </t:test>

    <!--Search the mail in all folder -->
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" >
                <query>is:anywhere</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset = "1"/> 
        </t:response>
    </t:test>

    <!--Search the emptied folder-->
    <t:test >
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail" />
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@id='${folder1.id}']"/>                
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest13" type="bhr">
    <t:objective>Empty a folder having a sub folder in it. </t:objective>
    <t:steps>1.Create a folder.
             2.Create a sub folder in that folder.
             3.Empty the parent folder.
             4.Check whether the sub folder exists (Should not exist).
             5. Check for the emptied folder (Should exist)
    </t:steps>
        
    <!-- Create a new folder.-->
    <t:test id="folderActionRequest13a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder2.name}" l="${folder2.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder2.id"/>
        </t:response>
    </t:test>

    <!-- Create a new sub folder in the newly created folder.-->
    <t:test id="folderActionRequest13b" depends="folderActionRequest13a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${subfolder2.name}"  l="${folder2.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="subfolder2.id"/>
        </t:response>
    </t:test>

    <!-- Empty parent folder.-->
    <t:test id="folderActionRequest13c" depends="folderActionRequest13a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="empty" id="${folder2.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder2.id}"/>
            <t:select attr="op" match="empty"/>        
            </t:select>
        </t:response>
    </t:test>

    <!--Search the sub folder-->
    <t:test depends="folderActionRequest13c">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail" />
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder/mail:folder[@id='${subfolder2.id}']" emptyset="1"/>                
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@id='${folder1.id}']"/> 
        </t:response>
    </t:test>    
        
</t:test_case>


<t:test_case testcaseid="FolderActionRequest14" type="bhr" bugids="8591">
    <t:objective>Change a folder's name, location, color and exclude free/busy using op="update" </t:objective>

    <t:steps>1. Create a folder.
             2. update it (change folder's name, location, color and exclude free/busy).
    </t:steps>

    <t:test id="folderaction14a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder15.id"/>
        </t:response>
    </t:test>

    <t:test  depends="folderaction14a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder15.id}" name="${folder15.newname}" l="${folder.inbox}" f="${folder.busy}" color="${folder.color}" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder15.id}"/>
            <t:select attr="op" match="update"/>        
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest15" type="sanity" >
    <t:objective>Update a folder to duplicate name </t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Rename the first folder to the second folder name (use op="update")
    </t:steps> 

    <t:test  id="folderaction15a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15a.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction15b" depends="folderaction15a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15b.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction15b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder15a.id}" name="${folder15b.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.ALREADY_EXISTS"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest16" type="functional" >
    <t:objective>Update a folder with nonexisting/deleted folder id </t:objective>
    <t:steps>1. Delete any existing folder.
             2. Rename the deleted folder( for renameing use op=update).
    </t:steps>

    <t:test  id="folderaction16a" depends="folderaction15b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder15b.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder15b.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test depends="folderaction16a" >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder15b.id}" name="${folder.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest17" type="sanity" >
    <t:objective>Change the name of a folder to duplicate name but with leading spaces (use op="update")</t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Rename the first folder to the second folder name with leading spaces.
    </t:steps> 

    <t:test  id="folderaction17a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15c.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15c.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction17b" depends="folderaction17a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15d.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15d.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test depends="folderaction17b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder15c.id}" name="              ${folder15d.name}"/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
				<t:select attr="id" match="${folder15c.id}"/>      
				<t:select attr="op" match="update"/> 
			</t:select>
        </t:response>
    </t:test>

	<t:test>
	 <t:request>
	   <GetFolderRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	  <t:response>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='              ${folder15d.name}']"/>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder15d.name}']"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest18" type="sanity" >
    <t:objective>Rename a folder to duplicate name but with trailing spaces</t:objective>

    <t:steps>1. Create a folder with any name 
             2. Create a folder with another name
             3. Update the first folder to the second folder name with trailing spaces.
    </t:steps> 

    <t:test  id="folderaction18a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15e.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15e.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction18b" depends="folderaction18a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder15f.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder15f.id"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test depends="folderaction18b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder15e.id}" name="${folder15f.name}           "/>
            </FolderActionRequest>    
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.ALREADY_EXISTS"/>
        </t:response>
    </t:test>

	<!--t:test>
	 <t:request>
	   <GetFolderRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	  <t:response>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder15f.name}           ']"/>
		<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${folder15f.name}']"/>
	 </t:response>
	</t:test-->

</t:test_case>


<t:test_case testcaseid="FolderActionRequest19" type="sanity" >
    <t:objective>Update the location of a folder within itself </t:objective>

    <t:steps>1. Create a folder
             2. Update the location the folder within itself.
    </t:steps>
    <t:test  id="folderaction19a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder21.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder21.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction19a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="update" id="${folder21.id}" l="${folder21.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.CANNOT_CONTAIN"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest20" type="sanity" >
    <t:objective>Delete a Folder,i.e Update it to trash location </t:objective>

    <t:test  depends="folderaction(change)">
    <t:request>
        <FolderActionRequest xmlns="urn:zimbraMail">
            <action op="move" id="${folder21.id}" l="${folder.trash}"/>
        </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest21" type="functional" bugids="9333" >
    <t:objective>Move a folder within a non existing folder (use op="update")</t:objective>

    <t:test  id="folderaction21a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder21.name}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder">
            <t:select attr="id" set="folder21.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction21a">
         <t:request>
             <FolderActionRequest xmlns="urn:zimbraMail">
                 <action op="update" id="${folder21.id}" l="-1"/>
             </FolderActionRequest>
        </t:request>
         <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest22" type="bhr">
    <t:objective>Change the folder's color to {new-color} </t:objective>

    <t:steps>1. Create a folder with color.
             2. Change the folder's color.
    </t:steps>

    <t:test id="folderaction22a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder16.name}" l="${folder.pname}" color="${folder.color}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder16.id"/>
        </t:response>
    </t:test>

    <t:test  depends="folderaction22a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="color" id="${folder16.id}" color="${folder.newcolor}" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder16.id}"/>
            <t:select attr="op" match="color"/>        
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest23" type="functional">
    <t:objective>Change the folder's color of deleted folder </t:objective>

    <t:steps>1. Delete any existing folder.
             2. Change it's color.
    </t:steps>

    <t:test  id="folderaction3b" depends="folderaction2b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder16.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder16.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test  depends="folderaction22a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="color" id="${folder16.id}" color="${folder.newcolor}" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest24" type="bhr">
    <t:objective>Set the excludeFreeBusy boolean for the folder </t:objective>

    <t:steps>1. Create a folder.
             2. Change the folder's excludeFreeBusy="0".
		     3. Change the folder's excludeFreeBusy="1".
    </t:steps>

    <t:test id="folderaction24a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder17.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder17.id"/>
        </t:response>
    </t:test>

    <t:test  id="folderaction24b" depends="folderaction24a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="fb" id="${folder17.id}" excludeFreeBusy="1" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder17.id}"/>
            <t:select attr="op" match="fb"/>        
            </t:select>
        </t:response>
    </t:test>

	<t:test  id="folderaction24c" depends="folderaction24a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="fb" id="${folder17.id}" excludeFreeBusy="0" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder17.id}"/>
            <t:select attr="op" match="fb"/>        
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest25" type="functional">
    <t:objective>Set the excludeFreeBusy boolean for the deleted folder </t:objective>

    <t:steps>1. Create a folder.
             2. Delete it.
		     3. Set excludeFreeBusy=0/1 for this deleted folder.
    </t:steps>

    <t:test id="folderaction25a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder17a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder17a.id"/>
        </t:response>
    </t:test>

	<t:test  id="folderaction25b" depends="folderaction25a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder17a.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder17a.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction25c" depends="folderaction25b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="fb" id="${folder17a.id}" excludeFreeBusy="1" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest26" type="bhr">
    <t:objective>Set or Unset the "checked" state of the folder </t:objective>

    <t:steps>1. Create a folder.
             2. Uncheck the folder.
		     3. Check the folder.
    </t:steps>

    <t:test id="folderaction26a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder18.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder18.id"/>
        </t:response>
    </t:test>

    <t:test  id="folderaction26b" depends="folderaction26a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="!check" id="${folder18.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder18.id}"/>
            <t:select attr="op" match="!check"/>        
            </t:select>
        </t:response>
    </t:test>

	<t:test  id="folderaction26c" depends="folderaction26a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="check" id="${folder18.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder18.id}"/>
            <t:select attr="op" match="check"/>        
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest27" type="functional">
    <t:objective>Set/Unset the "checked" state of the deleted folder </t:objective>

    <t:steps>1. Create a folder.
	         2. Delete it
             3. Check/uncheck the deleted folder.
    </t:steps>

    <t:test id="folderaction27a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder18a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder18a.id"/>
        </t:response>
    </t:test>

	<t:test  id="folderaction27b" depends="folderaction227a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder18a.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder18a.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test  id="folderaction27c" depends="folderaction27b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="!check" id="${folder18a.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>
	
</t:test_case>


<t:test_case testcaseid="FolderActionRequest28" type="bhr">
    <t:objective>Grant and revoke the folder</t:objective>

    <t:steps>1. Create a folder.
             2. Grant the folder with write permission.
		     3. Revoke the folder.
    </t:steps>

    <t:test id="folderaction28a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder19.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder19.id"/>
		</t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="grant" id="${folder19.id}">
					<grant gt="usr" d="${test_account2.name}" perm="w"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"> 
			<t:select attr="id" match="${folder19.id}"/>
            <t:select attr="op" match="grant"/>    
			</t:select>
		</t:response>
    </t:test>

	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="!grant" id="${folder19.id}" zid="">
					<grant gt="usr" d="${test_account2.name}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"> 
			<t:select attr="id" match="${folder19.id}"/>
            <t:select attr="op" match="!grant"/>    
			</t:select>
		</t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest29" type="sanity">
    <t:objective>Grant the folder and use zid="99999999-9999-9999-9999-999999999999" to revoke acces granted to "pub" </t:objective>

    <t:steps>1. Create a folder.
             2. Grant the folder to public.
		     3. Revoke the folder (use zid="99999999-9999-9999-9999-999999999999").
    </t:steps>

    <t:test id="folderaction19a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder20.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder20.id"/>
		</t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="grant" id="${folder20.id}">
					<grant gt="pub" perm="r"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"> 
			<t:select attr="id" match="${folder20.id}"/>
            <t:select attr="op" match="grant"/>    
			</t:select>
		</t:response>
    </t:test>

	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="!grant" id="${folder20.id}" zid="99999999-9999-9999-9999-999999999999">
					<grant gt="pub"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">  
			<t:select attr="id" match="${folder20.id}"/>
            <t:select attr="op" match="!grant"/>    
			</t:select>
		</t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FolderActionRequest30" type="sanity" bugids="107461" >
    <t:objective>Share a folder with nonexisting account</t:objective>

    <t:steps>1. Create a folder.
             2. Grant the folder to nonexisting account.
    </t:steps>

    <t:test id="folderaction25a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder19a.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder19a.id"/>
		</t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="grant" id="${folder19a.id}">
					<grant gt="usr" d="${test_account3.name}" perm="w"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_ACCOUNT"/>
		</t:response>
    </t:test>
	
</t:test_case>


<t:test_case testcaseid="FolderActionRequest31" type="sanity">
    <t:objective>Share a folder with invalid account</t:objective>

     <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="grant" id="${folder19a.id}">
					<grant gt="usr" d="${test_account4.name}" perm="r"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path= "//zimbra:Code" match="^service.INVALID_REQUEST"/>
		</t:response>
    </t:test>
	
</t:test_case>


<t:test_case testcaseid="FolderActionRequest32" type="sanity">
    <t:objective>Share the deleted folder with valid account</t:objective>

    <t:steps>1. Create a folder.
             2. Grant the folder to nonexisting account.
    </t:steps>

    <t:test  id="folderaction3b" depends="folderaction2b">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder19a.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder19a.id}"/>      
            </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="grant" id="${folder19a.id}">
					<grant gt="usr" d="${test_account2.name}" perm="r"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER|^mail.NO_SUCH_ITEM"/>
		</t:response>
    </t:test>
	
</t:test_case>


<t:test_case testcaseid="FolderActionRequest33" type="sanity">
    <t:objective>Try to revoke share without sharing a folder</t:objective>

    <t:steps>1. Create a folder.
             2. Revoke the folder.
    </t:steps>

    <t:test id="folderaction25a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder19b.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder19b.id"/>
		</t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="!grant" id="${folder19b.id}" zid="">
					<grant gt="usr" d="${test_account2.name}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>  
		</t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="FolderActionRequest34" type="sanity" bugids="11731" >
    <t:objective>Verify that emptying a folder occurs quickly (bug 11731)</t:objective>
    <t:steps>
		1. Create a subfolder
		2. Add several messages/conversations to the Inbox and Subfolder and Trash (2000 to each)
		3. Move the subfolder to the trash
		4. Empty the trash - expect the request to finish within 30 seconds
    </t:steps>
        
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox.id"/>
				<t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="folder.trash.id"/>
			</t:select>
		</t:response>
	</t:test>

    <!-- Create a new folder.-->
    <t:test id="folderActionRequest34a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="folder.${TIME}.${COUNTER}" l="${folder.inbox.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder34.id"/>
        </t:response>
    </t:test>
    
    
    <t:test_loop count="2000" >      
        
	    <t:property name="message.id" value="${COUNTER}"/>
	    
	    <t:test>
	        <t:request>
	            <AddMsgRequest xmlns="urn:zimbraMail">
	                <m l="${folder.inbox.id}">
	                    <content>To: ${test_account1.name}
From: ${defaultorigination.email}
Subject: RE: message${message.id}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

Now is the time for all good men ...


	                    </content>
	                </m>
	            </AddMsgRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:AddMsgResponse"/>
	        </t:response>
	    </t:test>
        
	    <t:test>
	        <t:request>
	            <AddMsgRequest xmlns="urn:zimbraMail">
	                <m l="${folder34.id}">
	                    <content>To: ${test_account1.name}
From: ${defaultorigination.email}
Subject: RE: message${message.id}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

Now is the time for all good men ...


	                    </content>
	                </m>
	            </AddMsgRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:AddMsgResponse"/>
	        </t:response>
	    </t:test>
        
	    <t:test>
	        <t:request>
	            <AddMsgRequest xmlns="urn:zimbraMail">
	                <m l="${folder.trash.id}">
	                    <content>To: ${test_account1.name}
From: ${defaultorigination.email}
Subject: RE: message${message.id}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

Now is the time for all good men ...


	                    </content>
	                </m>
	            </AddMsgRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:AddMsgResponse"/>
	        </t:response>
	    </t:test>
        
    </t:test_loop>

    <t:test >
	    <t:request>
	        <FolderActionRequest xmlns="urn:zimbraMail">
	            <action op="move" id="${folder34.id}" l="${folder.trash.id}"/>
	        </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>
        
    <t:test timeframeMax="30000">
	    <t:request>
	        <FolderActionRequest xmlns="urn:zimbraMail">
	            <action op="empty" id="${folder.trash.id}"/>
	        </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>
        
    <t:test timeframeMax="30000">
	    <t:request>
	        <FolderActionRequest xmlns="urn:zimbraMail">
	            <action op="empty" id="${folder.trash.id}"/>
	        </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>

    <t:test timeframeMax="30000">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> in:trash </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

        
</t:test_case>


<t:test_case testcaseid="436682" type="bhr">
    <t:objective>More Options - delete calendar -main calendar</t:objective>
	
    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="delete" id="${account1.folder.calendar}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.IMMUTABLE_OBJECT"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="bug83089" type="bhr" bugids="83089">
    <t:objective>Need folder preference for offline sync interval</t:objective>
	
    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.drafts}']" attr="id" set="account1.folder.drafts"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="webofflinesyncdays" id="${account1.folder.drafts}" numDays="20"/>
            </FolderActionRequest>
        </t:request>
    </t:test>
    
    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail">
            	<folder l="${account1.folder.drafts}"/>
            </GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="webOfflineSyncDays" match="20"/>
        </t:response>
    </t:test>
    
</t:test_case>

</t:tests>

