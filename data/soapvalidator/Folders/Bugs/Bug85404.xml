<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>    
<t:property name="folder1.name" value="NewFol"/>
<t:property name="folder2.name" value="Rename"/>
<t:property name="folder1.pname" value="2"/> <!-- Folder's parent ID -->


<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>
 
<t:test_case testcaseid="bug85404" type="always" bugids="85404">
    <t:objective>Create test account</t:objective>
    <t:steps>
        1. Login to admin.
        2. Create accounts
    </t:steps>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="bug85404" type="bhr" bugids="85404" >
    <t:objective>'absFolderPath' not returned in notification when a folder has moved</t:objective>
	<t:steps>
		1. For user1, create a folder under Root
		2. Rename the folder
		3. Move the folder under Sent and verify absFolderPath is returned as /Sent/Renamed_Folder_Name
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder.root.id"/>
			</t:select>
		</t:response>
	</t:test>

    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.root.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@id='${folder1.id}']" attr="absFolderPath" match="/${folder1.name}"/>
        </t:response>
    </t:test>
    	
   <t:test >
        <t:request>
			<FolderActionRequest xmlns="urn:zimbraMail">
				<action op="rename" id="${folder1.id}" name="${folder2.name}"/>
			</FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="id" set="newfold.id"/>
        </t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@id='${newfold.id}']" attr="absFolderPath" match="/${folder2.name}"/>
        </t:response>
    </t:test>
      
   <t:test >
        <t:request>
			<FolderActionRequest xmlns="urn:zimbraMail">
				<action op="move" id="${newfold.id}" l="5"/>
			</FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="id" match="${newfold.id}"/>
        </t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder/mail:folder[@id='${newfold.id}']" attr="absFolderPath" match="/Sent/${folder2.name}"/>
        </t:response>
    </t:test>	
</t:test_case> 

</t:tests>