<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="account4.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="password" value="test123"/>

<t:property name="mount.blank" value=""/>
<t:property name="mount.space" value="            "/>
<t:property name="mount.spchar" value=":/\\.;&lt;*''"/>
<t:property name="mount.sometext" value="some text"/>

<t:property name="mount.negative" value="-1"/>
<t:property name="mount.zero" value="0"/>
<t:property name="mount.largenumber" value="1234567890"/>
<t:property name="mount.decimal" value="12.34"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_CreateMountpoint" type="always">
    <t:objective>create test account</t:objective>
    <t:steps>
            1. Login to admin.
            2. Create two accounts.
            3. Get those accounts.
            4. Get auth token of the 2 accounts created.
    </t:steps>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
     
    <t:property name="admin.authToken" value="${authToken}"/>  
    
    <t:test  id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>
    
    <t:test  id="create_test_account2" required="true" depends="admin_login" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>
     
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>


    <t:test depends="create_test_account1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
     
    <t:property name="user1.authToken" value="${authToken}"/>  

    
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:property name="user2.authToken" value="${authToken}"/>  
 
    <t:test id="getFolderRequest" required="true">
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>             
            <t:select path="//mail:folder[@name='${globals.drafts}']" attr="id" set="folder.drafts"/> 
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder.root"/>
            <t:select path="//mail:folder[@name='${globals.briefcase}']" attr="id" set="folder.briefcase"/>            
        </t:response>
    </t:test>
    
</t:test_case>
  
<!-- Properties of the message -->
<t:property name="uploadServletServer" value="${test_acct1.server}"/>
<t:property name="server.restServlet" value="${test_acct1.server}"/>
	
<t:property name="uploadFile.doc" value="${testMailRaw.root}/bugs/31113/goals.doc"/>
	
<t:property name="compose.content" value="content${TIME}.${COUNTER}"/>
<t:property name="compose.subject" value="subject${TIME}.${COUNTER}"/>
	

<t:test_case testcaseid="shareFolderAttSave" type="always">
    <t:objective>Create a folder, give read permissions.</t:objective>
    <t:steps>
            1. Login to first account.
            2. Create a folder.
            3. Give permissions.
            4. Login to second account.
            5. Give CreateMountpointRequest to mount the delegated folder with valid values.
            6. Send msg with Attachment
            7. Save the attachment to the shared folder and verify if saved
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:property name="authToken" value="${user1.authToken}"/>  
    
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder l="1" name="folder${COUNTER}" view="document"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${folder1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    
    <t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.doc}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message0.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>


	<t:test>
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account2.name}"/>
					<su> ${compose.subject} </su>
					<mp ct="text/plain">
						<content> ${compose.content} </content>
					</mp>
					<attach aid="${message0.aid}"/>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message0.id"/>
		</t:response>
	</t:test>
      
    
    <t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:property name="authToken" value="${user2.authToken}"/>  

   
    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="1" name="user1's folder ${COUNTER}" view="document" rid="${folder1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="mount1a.id"/>
        </t:response>
    </t:test>    
    
     <t:test id="filters_basic02d" depends="filters_basic01a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${compose.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="message1.id" />
        </t:response>
    </t:test> 
      
    <t:test>
		<t:request>
			<GetMsgRequest xmlns="urn:zimbraMail">
				<m id="${message1.id}" read="1" html="1"/>
			</GetMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message1.id}"/>
		</t:response>
	</t:test>    
    
    <t:test>
		<t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
				<doc l="${mount1a.id}">				
					<m id="${account2.id}:${message1.id}" part="2"/>
				</doc>
			</SaveDocumentRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SaveDocumentResponse/mail:doc" >
				<t:select attr="id" set="doc.id" />
				<t:select attr="name" match="Goals.doc" />
			</t:select>	
		</t:response>
	</t:test>
        
</t:test_case>
  
</t:tests>
  
