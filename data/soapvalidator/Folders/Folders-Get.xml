<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain3.name" value="domain3.${TIME}.${COUNTER}.${defaultdomain.name}"/>

<t:property name="test_account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>
<t:property name="account1.name" value="one.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="two.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="two.${TIME}.${COUNTER}@${domain3.name}"/>

<t:property name="folder.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="folder.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder1.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder2.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder3.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.blank" value=""/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="acct1_setup" type="always" >
	<t:objective>create test account</t:objective>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${test_account1.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server1"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="acct_server1"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="acct_server2"/>
		</t:response>
	</t:test>

    <t:test>
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain3.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain3.id"/>
        </t:response>
    </t:test>

	<t:test required="true" >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account3.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
		</t:response>
	</t:test>

</t:test_case>


<t:property name="server.zimbraAccount" value="${test_acct.server1}"/>

<t:test_case testcaseid="acct1_login" type="always" >
	<t:objective>login as the test account</t:objective>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${test_account1.name}</account>
				<password>${defaultpassword.value}</password>
			<!--<prefs/>-->
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="GetFolderRequest01" type="smoke">
	<t:objective>Basic test of GetFolderRequest</t:objective>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@id='1']" attr="name" match="USER_ROOT"/>
		</t:response>
	</t:test>

</t:test_case>


 <t:test_case testcaseid="GetFolderRequest02" type="bhr">
	<t:objective>Verify the basic system folders present.</t:objective>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='${globals.root}']">
				<t:select path="mail:folder[@name='${globals.calendar}']">
					<t:select attr="view" match="^appointment$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.contacts}']">
					<t:select attr="view" match="^contact$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.drafts}']">
					<t:select attr="view" match="^message$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.emailed}']">
					<t:select attr="view" match="^contact$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.inbox}']">
					<t:select attr="view" match="^message$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.spam}']">
					<t:select attr="view" match="^message$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.notebook}']" emptyset="1" />
				<t:select path="mail:folder[@name='${globals.sent}']">
					<t:select attr="view" match="^message$"/>
				</t:select>
				<t:select path="mail:folder[@name='${globals.trash}']">
					<t:select attr="view" match="^message$" emptyset="1"/>
				</t:select>
			</t:select>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest03" type="bhr">
	<t:objective>get folder with specific folder id </t:objective>

	<t:test id="CreateFolderRequest03a" >
		<t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id"/>
        </t:response>
	</t:test>

	<t:test depends="CreateFolderRequest03a">
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail" l="${folder.id}">        
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest04" type="sanity">
	<t:objective>get folder with deleted folder id </t:objective>
	<t:steps>create the folder, delete it, GetFolderRequest with the id</t:steps>

	<t:test id="CreateFolderRequest04a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
	</t:test>

	<t:test  id="CreateFolderRequest04b" depends="CreateFolderRequest04a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action xmlns="" op="delete" id="${folder1.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="id" match="${folder1.id}"/>      
            </t:select>
        </t:response>
	</t:test>

	<t:test depends="CreateFolderRequest04b">
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail" >
			<folder l="${folder1.id}"/>
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest05" type="sanity">
	<t:objective>get folder with specific id leading space </t:objective>

	<t:test >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"> 
			<folder l="${folder.id}"/>
			<cn id="   ${folder.id}"/>
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest06" type="sanity">
	<t:objective>get folder with specific id trailing space </t:objective>

	<t:test >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"> 
			<folder l="${folder.id}"/>
			<cn id="${folder.id}   "/>
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest07" type="functional">
	<t:objective>get folder with blank location </t:objective>

	<t:test >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"> 
			<folder l="${folder.blank}" />
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code"  match="^service.INVALID_REQUEST"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest08" type="bhr">
	<t:objective>get folder with changed location. </t:objective>

	<t:test id="CreateFolderRequest2a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder2.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder2.id"/>
        </t:response>
	</t:test>

	<t:test  depends="folderaction08a">
		<t:request>
			<FolderActionRequest xmlns="urn:zimbraMail">
				<action op="move" id="${folder2.id}" l="5"/>
			</FolderActionRequest>
		</t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
	</t:test>

	<t:test depends="CreateFolderRequest08a">
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail" > 
			<folder l="5" />
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="CreateFolderRequest08" type="sanity">
	<t:objective>get folder with non existing folder name </t:objective>
 
	<t:test >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail">
			<folder l="${folder3.name}"/> 
			</GetFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="GetFolders_Visible_01" type="bhr" bugids="22100, 22378">
	<t:objective> GetFolderRequest with visible="1" and "0" for share sud-folders </t:objective>
	<t:steps> 1. Login to account2
              2. create 3 folders like Inbox/one/two/three
			  3. Share Inbox without inh="1" to account1
			  4. Share folder "one", "two" and "three" folder also
			  5. Revoke rights for folder "two"
              6. Login to account1 and create mountpoints
			  7. Send GetFolderRequest to account2 with visible="1". Can see the subfolders
			  8. Send GetFolderRequest by id to account2 with visible="1". Can see the subfolders
			  9. Send GetFolderRequest to account2 with visible="0". Permissione denied???
			  10. Send GetFolderRequest by id to account2 with visible="0". Bug 22100
	</t:steps>

<t:property name="server.zimbraAccount" value="${acct_server2}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account2.folder.root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="one.${TIME}.${COUNTER}" l="${account2.folder.inbox.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account2.folder1.id"/>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="name" set="account2.folder1.name"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="two.${TIME}.${COUNTER}" l="${account2.folder1.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account2.folder2.id"/>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="name" set="account2.folder2.name"/>
        </t:response>
	</t:test>
     
    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="three.${TIME}.${COUNTER}" l="${account2.folder2.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account2.folder3.id"/>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="name" set="account2.folder3.name"/>
        </t:response>
	</t:test>

	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account2.folder3.id}" op="grant">
                    <grant d="${account1.name}" gt="usr" perm="rwidx" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>     

	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account2.folder1.id}" op="grant">
                    <grant d="${account1.name}" gt="usr" perm="rwidx"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account2.folder2.id}" op="grant">
                    <grant d="${account1.name}" gt="usr" perm="rwidx"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS" />
        </t:response>
    </t:test>



	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account2.folder2.id}" op="!grant" zid="${account1.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${acct_server1}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder_root.id"/>
		</t:response>
	</t:test>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${folder_root.id}" name="one.${TIME}.${COUNTER}" view="message" rid="${account2.folder1.id}" zid="${account2.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account1.mount1.id"/>
        </t:response>
    </t:test>

<!-- Check for not getting perm_denied error and Root folder (USER_ROOT) is in response-->
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account2.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="1"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse"/>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="name" match="USER_ROOT" emptyset="0"/>
        </t:response>
	</t:test>

<!-- Check for, can't see folder is as stub and decent folders are present and USER_ROOT folder is not there -->
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account2.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="1">
				<folder l="${account2.id}:${account2.folder1.id}"/>
			</GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="name" match="USER_ROOT" emptyset="1"/>
            <t:select path="//mail:GetFolderResponse/mail:folder[@name='${account2.folder2.name}']"  attr="perm" emptyset="1"/>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder/mail:folder"  attr="perm" match="rwidxc"/>
        </t:response>
	</t:test>

<!-- Check for getting PERM_DENIED error -->
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account2.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="0"/>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^service.PERM_DENIED"/>
        </t:response>
	</t:test>

<!-- No perm_denied + should not show decent folders (stop traversing) -->
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account2.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="0">
			<folder l="${account2.id}:${account2.folder1.id}"/>
			</GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse"/>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="name" match="${account2.folder1.name}"  emptyset="0"/>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder/mail:folder"  attr="perm" match="rwidxc" emptyset="1"/>
        </t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="GetFolders_Visible_02" type="bhr">
	<t:objective> GetFolderRequest with visible="1" and "0" for share folders </t:objective>
	<t:steps> 1. Account1 creates Inbox/folder1..
			  2. Account1 shares folder1... with Account2
			  3. Login to account2
			  4. Account2 sends GetFolderRequest to account1 with visible="1" and can see folder1 
			  5. Account2 sends GetFolderRequest to account1 with visible="0" and gets "PERM_DENIED" 
			  6. Account2 sends GetFolderRequest by id to account1 with visible="1" and can see folder1 
			  7. Account2 sends GetFolderRequest by id to account1 with visible="0" and can see folder1 
	</t:steps>

	<t:property name="server.zimbraAccount" value="${acct_server1}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="folder1one.${TIME}.${COUNTER}" l="${folder_root.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder1.id"/>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="name" set="account1.folder1.name"/>
        </t:response>
	</t:test>

	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidx" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${acct_server2}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
	
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="1"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder" attr="name" match="${account1.folder1.name}"/>
        </t:response>
	</t:test>

	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="0"/>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^service.PERM_DENIED"/>
        </t:response>
	</t:test>


	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="1" >
			<folder l="${account1.id}:${account1.folder1.id}"/>
			</GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="name" match="${account1.folder1.name}"/>
        </t:response>
	</t:test>

	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>

			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" visible="0">
			<folder l="${account1.id}:${account1.folder1.id}"/>
			</GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder" attr="name" match="${account1.folder1.name}"/>
        </t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="GetFolders_Rest_01" type="bhr" bugids="22637">
	<t:objective>Verify the REST for each folder type and for GetInfoRequest</t:objective>
	<t:steps>
	1. Account1 creates Inbox/rest/folder1 , folder2, .. folder3, of each folder type
	               conversation|message|contact|appointment|task|note|wiki|document
	2. Send GetFolderRequest, verify that the rest appears correctly
	3. Send GetInfoRequest, verify the base URL is correct
	</t:steps>

	<t:property name="server.zimbraAccount" value="${acct_server1}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder_root.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="rest.${TIME}.${COUNTER}" l="${folder_root.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.rest.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="conversation" name="conversation" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.conversation.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="message"  name="message" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.message.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="contact"  name="contact" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.contact.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="appointment"  name="appointment" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.appointment.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="task"  name="task" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.task.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="note"  name="note" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.note.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="wiki"  name="wiki" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.wiki.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="document"  name="document" l="${account1.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.document.id"/>
        </t:response>
	</t:test>

	<!-- Bug 22637 change - no more rest in GetFolderResponse -->
	<t:test>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" />
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse">
            	<t:select path="//mail:folder[@id='${account1.folder.conversation.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.message.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.contact.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.appointment.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.task.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.note.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.wiki.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account1.folder.document.id}']" attr="rest" emptyset="1"/>
            </t:select>
        </t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse">
				<t:select path="//acct:rest" match=".*${defaultdomain.name}.*"/>
			</t:select>
		</t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="GetFolders_Rest_02" type="deprecated">
	<t:objective>Verify the REST for each folder type and for GetInfoRequest - account in different domain</t:objective>
	<t:steps>
	1. Account1 creates Inbox/rest/folder1 , folder2, .. folder3, of each folder type
	               conversation|message|contact|appointment|task|note|wiki|document
	2. Send GetFolderRequest, verify that the rest appears correctly
	3. Send GetInfoRequest, verify the base URL is correct
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder_root.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="rest.${TIME}.${COUNTER}" l="${folder_root.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.rest.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="conversation" name="conversation" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.conversation.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="message"  name="message" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.message.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="contact"  name="contact" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.contact.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="appointment"  name="appointment" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.appointment.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="task"  name="task" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.task.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="note"  name="note" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.note.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="wiki"  name="wiki" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.wiki.id"/>
        </t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder view="document"  name="document" l="${account3.folder.rest.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account3.folder.document.id"/>
        </t:response>
	</t:test>

	<t:test>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail" />
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse">
            	<t:select path="//mail:folder[@id='${account3.folder.conversation.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account3.folder.message.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account3.folder.contact.id}']" attr="rest" match=".*${domain3.name}.*"/>
            	<t:select path="//mail:folder[@id='${account3.folder.appointment.id}']" attr="rest" match=".*${domain3.name}.*"/>
            	<t:select path="//mail:folder[@id='${account3.folder.task.id}']" attr="rest" match=".*${domain3.name}.*"/>
            	<t:select path="//mail:folder[@id='${account3.folder.note.id}']" attr="rest" emptyset="1"/>
            	<t:select path="//mail:folder[@id='${account3.folder.wiki.id}']" attr="rest" match=".*${domain3.name}.*"/>
            	<t:select path="//mail:folder[@id='${account3.folder.document.id}']" attr="rest" match=".*${domain3.name}.*"/>
            </t:select>
        </t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse">
				<t:select path="//acct:rest" match=".*${domain3.name}.*"/>
			</t:select>
		</t:response>
	</t:test>


</t:test_case>


</t:tests>
