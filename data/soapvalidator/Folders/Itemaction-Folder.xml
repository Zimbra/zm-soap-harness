<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>

<t:property name="item.spchar" value="//\\'^%"/>
<t:property name="item.space" value="           "/>
<t:property name="item.blank" value=""/>
<t:property name="item.sometext" value="some text"/>
<t:property name="item.negative" value="-1"/>


<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>
<t:property name="op.delete" value="delete"/>
<t:property name="op.update" value="update"/>

<t:property name="folder.inbox" value="2"/>
<t:property name="folder.pname" value="1"/> 
<t:property name="folder.trash" value="3"/>

<t:property name="folder.name1a" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name1b" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name2" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name3" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name4" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name5" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name6" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name8" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name9" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name11a" value="folder.${TIME}.${COUNTER}"/>
<t:property name="folder.name11b" value="folder.${TIME}.${COUNTER}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>Basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup1" type="always" >
    <t:objective>Create two test account</t:objective>
    <steps> 1. Login to admin account
            2. Create a test_account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server"/>
        </t:response>
    </t:test>
</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

<t:test_case testcaseid="acct_setup2" type="always" >
    <t:objective>Login as the test account</t:objective>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="ItemActionRequest1" type="smoke">
    <t:objective>Move an item (folder) within some existing folder </t:objective>
    <t:steps>1. Create folderA, Create folderB
             2. Move folderB under folderA </t:steps>
             
    <t:test  id="itemActionRequest1a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name1a}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id1a"/>
        </t:response>
    </t:test>

    <t:test  id="itemActionRequest1b">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name1b}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id1b"/>
        </t:response>
    </t:test>

    <t:test id="itemActionRequest1c" depends="itemActionRequest1a,itemActionRequest1b">
         <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action op="${op.move}" id="${folder.id1b}" l="${folder.id1a}"/>
            </ItemActionRequest>
        </t:request>
        <t:response>
          <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${folder.id1b}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest2" type="sanity">
    <t:objective>Move an item (folder) within itself </t:objective>
    <t:steps>1. Create a folder
             2. Move the folder within itself.
    </t:steps>
    
    <t:test  id="itemActionRequest2a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name2}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id2"/>
        </t:response>
    </t:test>

    <t:test  depends="itemActionRequest2a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action op="move" id="${folder.id2}" l="${folder.id2}"/>
            </ItemActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.CANNOT_CONTAIN"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest3" type="bhr">
    <t:objective>Delete an item (folder),i.e move it to trash </t:objective>
    <t:steps>1. Create a folder.
             2. Soft delete it.
    </t:steps>
    <t:test  id="itemActionRequest3a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name3}" l="${folder.trash}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id3"/>
        </t:response>
    </t:test>

    <t:test  depends="itemActionRequest3a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action op="${op.move}" id="${folder.id3}" l="${folder.trash}"/>
            </ItemActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${folder.id3}"/>

        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest4" type="functional">
    <t:objective>Move an item (folder) within a non existing folder </t:objective>
    <t:steps>1. Create a folder
             2. Move the item to nonexisting folder.
    </t:steps>

    <t:test  id="itemActionRequest4a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name4}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id4"/>
        </t:response>
    </t:test>

    <t:test  depends="itemActionRequest4a">
         <t:request>
             <ItemActionRequest xmlns="urn:zimbraMail">
                 <action op="${op.move}" id="${folder.id4}" l="${item.negative}"/>
             </ItemActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest5" type="bhr">
    <t:objective>Delete an item (folder) </t:objective>
    <t:steps>1. Create a folder
             2. Delete the item.
    </t:steps>

    <t:test  id="itemActionRequest5a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name5}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id5"/>
        </t:response>
    </t:test>

    <t:test  id="itemActionRequest5b">
         <t:request>
             <ItemActionRequest xmlns="urn:zimbraMail">
                 <action op="${op.delete}" id="${folder.id5}"/>
             </ItemActionRequest>
        </t:request>
        <t:response>
           <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${folder.id5}"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="ItemActionRequest6" type="functional">
    <t:objective>Move an item (folder) within a deleted folder </t:objective>
    <t:steps>1. Create a item (folder)
             2. Move it to deleted folder
    </t:steps>
    
    <t:test  id="itemActionRequest6a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name6}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id6"/>
        </t:response>
    </t:test>

    <t:test depends="itemActionRequest5b,itemActionRequest6a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action op="${op.move}" id="${folder.id6}" l="${folder.id5}"/>
            </ItemActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest7" type="functional"  bugids="11018" >
    <t:objective>Delete a deleted item (folder) </t:objective>
    
     <t:test depends="itemActionRequest5b">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action op="${op.delete}" id="${folder.id5}"/>
            </ItemActionRequest>
        </t:request>
        <t:response>
           <t:select path="//mail:ItemActionResponse/mail:action" />
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest8" type="functional" bugids="3764">
    <t:objective>Tag an item (folder) </t:objective>
    <t:steps>1. Create a folder
             2. Create a tag
             3. Tag it
    </t:steps>
    
    <t:test  id="itemActionRequest8a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name8}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id8"/>
        </t:response>
    </t:test>

    <t:test id="itemActionRequest8b">
        <t:request>
            <CreateTagRequest xmlns="urn:zimbraMail">
                <tag name="tag${TIME}${COUNTER}" color="0"/>
            </CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag.id1"/>
        </t:response>
    </t:test>

    <t:test id="itemActionRequest8c" depends="itemActionRequest8a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action id="${folder.id8}" op="${op.tag}" tag="${tag.id1}"/>
            </ItemActionRequest>        
        </t:request>
        <t:response>
                <t:select path="//zimbra:Code" match="^mail.CANNOT_TAG"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest9" type="bhr">
    <t:objective>Mark the item (folder) as read </t:objective>
    <t:steps>1. Create a folder
             2. Mark it as read.
    </t:steps>
    
    <t:test  id="itemActionRequest9a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name9}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id9"/>
        </t:response>
    </t:test>

    <t:test depends="itemActionRequest9a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action id="${folder.id9}" op="${op.read}"/>
            </ItemActionRequest>        
        </t:request>
        <t:response>
                <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="${op.read}"/>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${folder.id9}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest10" type="bhr">
    <t:objective>Mark the item (folder) as unread </t:objective>

       <t:test depends="itemActionRequest9a">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action id="${folder.id9}" op="${op.unread}"/>
            </ItemActionRequest>        
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ItemActionRequest11" type="bhr">
    <t:objective>Update the item (folder) </t:objective>
    <t:steps>1. Create two folder folders.
             2. Update it.
    </t:steps>

    <t:test  id="itemActionRequest11a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name11a}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id11a"/>
        </t:response>
    </t:test>
    
    <t:test  id="itemActionRequest11b">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name11b}" l="${folder.pname}"/>
            </CreateFolderRequest>    
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id11b"/>
        </t:response>
    </t:test>


    <t:test depends="itemActionRequest11a,itemActionRequest11b">
        <t:request>
            <ItemActionRequest xmlns="urn:zimbraMail">
                <action id="${folder.id11a}" op="${op.update}" l="${folder.id11b}"/>
            </ItemActionRequest>        
        </t:request>
        <t:response>
                <t:select path="//mail:ItemActionResponse/mail:action" attr="op" match="${op.update}"/>
            <t:select path="//mail:ItemActionResponse/mail:action" attr="id" match="${folder.id11a}"/>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>


