<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account6.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
<t:property name="filter2.name" value="filter2.${TIME}.${COUNTER}"/>
<t:property name="filter3.name" value="filter3.${TIME}.${COUNTER}"/>
<t:property name="filter4.name" value="filter4.${TIME}.${COUNTER}"/>
<t:property name="filter5.name" value="filter5.${TIME}.${COUNTER}"/>
<t:property name="mail.subject" value="TEST SUBJECT"/>
<t:property name="root" value="${soapxml.root}/Mail/LMTP/MimeBasic/"/>
<t:property name="msg01.file" value="${root}/lmtp-basic01.txt"/>
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Filter_Pattern_AccountSetup" type="always" >
    <t:objective>create test account</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

	<t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

	<t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>
	
	<t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
        </t:response>
    </t:test>

	<t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account6.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account6.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account6.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_Pattern_01" type="bhr">
    <t:objective> Verify pattern works for filter </t:objective>
	    <t:steps> 
			  1. Login to test account1
			  2. Create a filter based on "Patterns " as "Subjecy -> matches -> bananas* "
			  3. Inject message with subject as "Banana leaves" and verify it get filtered
			  4. Inject message with subject as "my banana-leaf casserole" and verify it will not get filtered
        </t:steps>

		<t:property name="subject1" value="banana leaves"/>
		<t:property name="subject2" value="my banana-leaf casserole"/>
		<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                        	 <headerTest header="subject" stringComparison="matches" value="banana*"/>           	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${account2.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="Subject">${subject1}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${account2.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="Subject">${subject2}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${subject1}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${subject2}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_Pattern_02" type="bhr">
    <t:objective> Verify "does not match pattern" works for filter </t:objective>
	    <t:steps> 
			  1. Login to test account2
			  2. Create a filter based on patterns as  "Subject -> does not matches -> bananas* "
			  3. Inject message with subject any subject and verify it get filtered
        </t:steps>

		<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
	 <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter2.name}" active="1">
                         <filterTests condition="anyof">
                        	 <headerTest header="subject" negative="1" stringComparison="matches" value="banana*"/>           	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account2.name}</to>
			<from>${account1.name}</from>
			<server>${account2.server}</server>
            <modify>
                <header a="Subject">Any Subject</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:Any </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_Pattern_03" type="bhr" bugids="21701">
    <t:objective> Verify filter works for conditions containing square bracket "[" </t:objective>
	    <t:steps> 
			  1. Login to test account3
			  2. Create a filter based on patterns as  "Subject -> matches -> [JIRA Created* "
			  3. Inject message with subject "[JIRA Created" and verify it gets filtered
        </t:steps>

		<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter3.name}" active="1">
                         <filterTests condition="anyof">
                        	 <headerTest header="subject" stringComparison="matches" value="[JIRA Created*"/>           	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account3.name}</to>
			<from>${account1.name}</from>
			<server>${account3.server}</server>
            <modify>
                <header a="Subject">[JIRA Created test</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:[JIRA Created </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Filter_Pattern_04" type="sanity">
    <t:objective> Verify filters can be created using non-ascii chars and works properly </t:objective>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<t:property name="message4.file" value="${testMailRaw.root}/charsets/iso-8859-8/iso-8859-8d.txt"/>
	<t:property name="message4.subject" value="abcמתלףקצdef"/>
	<t:property name="message4.content" value="content12453542936874"/>
	
	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                        	 <headerTest header="subject" stringComparison="is" value="${message4.subject}"/>           	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message4.file}</filename>
			<to>${account4.name}</to>
			<from>${account1.name}</from>
			<server>${account4.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>content:(${message4.content})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Filter_Pattern_05" type="bhr" bugids="27801,21701">
    <t:objective> Verify filter works for conditions containing square bracket "[text]" </t:objective>
	    <t:steps> 
			  1. Login to test account3
			  2. Create a filter based on patterns as  "Subject -> matches -> jam [JIRA-jerry]* "
			  3. Inject message with subject "[JIRA Created" and verify it gets filtered
        </t:steps>

		<t:property name="server.zimbraAccount" value="${account5.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
        	<t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder.root"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
        </t:response>
    </t:test>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.root}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
	</t:test>	
	
	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter5.name}" active="1">
                         <filterTests condition="anyof">
                        	 <headerTest header="subject" stringComparison="is" value="jam [JIRA-jerry]*"/>           	     
                        </filterTests>
                        <filterActions> 
                        	<actionFileInto folderPath="${folder1.name}" />
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account5.name}</to>
			<from>${account1.name}</from>
			<server>${account5.server}</server>
            <modify>
                <header a="Subject">jam [JIRA-jerry]fin</header>
                <header a="From">tom@jerry.com</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account5.name}</to>
			<from>${account1.name}</from>
			<server>${account5.server}</server>
            <modify>
                <header a="Subject">jam [JIRA-jerry]sds</header>
                <header a="From">jerry@jerry.com</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
	

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:jam [JIRA-jerry]fin</query>
            </SearchRequest>
        </t:request>
        <t:response>
        	<t:select path="//mail:SearchResponse/mail:m" >
        		<t:select path="//mail:e" attr="a" match="tom@jerry.com" />            
            </t:select>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:jam [JIRA-jerry]sds</query>
            </SearchRequest>
        </t:request>
        <t:response>
        	<t:select path="//mail:SearchResponse/mail:m" >
        		<t:select path="//mail:e" attr="a" match="jerry@jerry.com" />            
            </t:select>
        </t:response>
    </t:test>
    

</t:test_case>

<!-- see new test cases in the FilterRules folder -->
<t:test_case testcaseid="Filter_Pattern_06" type="deprecated" bugids="40764">
    <t:objective> Verify filter works for pattern matching on received header</t:objective>
    <t:steps> 
		  1. Login to test account6
		  2. Create a combination filter based on from (contains) and header (matches regex)
		  3. Inject messages that should be filtered
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account6.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account6.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="allof">
                        	 <headerTest header="from" stringComparison="contains" value="jmolet"/>    
                        	 <headerTest header="Recieved" stringComparison="is" value="*int-mx*.intmail.prod.int.phx2.redhat.com*"/>       	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/bugs/40764</foldername>
			<to>${account6.name}</to>
			<from>foo@example.com</from>
			<server>${account6.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:(4AA021E01040306)</query>
            </SearchRequest>
        </t:request>
        <t:response>
        	<t:select path="//mail:SearchResponse">
        		<t:select path="//mail:m" attr="f" match=".*f.*"/>
        		<t:select path="//mail:m" attr="id" set="message1.id"/>
        	</t:select>
        </t:response>
    </t:test>
    
	<t:property name="server.restServlet" value="${account6.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<id>${message1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:(4AA0237A9050906)</query>
            </SearchRequest>
        </t:request>
        <t:response>
        	<t:select path="//mail:SearchResponse" >
        		<t:select path="//mail:m" attr="f" match=".*f.*"/>
            </t:select>
        </t:response>
    </t:test>
    

</t:test_case>

</t:tests>





