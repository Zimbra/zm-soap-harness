<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="AcctSetup_meTest" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraPrefTimeZoneId">UTC</a>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>
    
          
</t:test_case>

<t:test_case testcaseid="meTest_01" type="bhr" bugids="42185" >
    <t:objective>Verify that the mail sent to me is filtered for meTest filter</t:objective>
    
    <t:steps> 1. Create a filter meTest  header="To" for accoun1 to flag
			  2. Send a message to the account1
			  3. Verify that the message gets flagged.
    </t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>	
    
	<t:property name="filter_meTest1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter_meTest1.subject" value="metTest ${TIME}${COUNTER}"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter_meTest1.name}" active="1">
						<filterTests condition="allof">
						 <meTest  header="To"/>			
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>    
   
	<t:property name="addressBook_msg01.file" value="${testMailRaw.root}/bug42185/addressbook01.txt" />

	<t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${addressBook_msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${account2.name}</from>
			<server>${account1.server}</server>
			<modify>
				<header a="To">${account1.name}</header>				
                <header a="Subject">${filter_meTest1.subject}</header>               
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_meTest1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_meTest1.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m"   attr="f" match=".*f.*" />       
        </t:response>
    </t:test>    
   
          
</t:test_case> 

<t:test_case testcaseid="meTest_02" type="bhr" bugids="42185" >
    <t:objective>Verify that the mail CC to me is filtered for meTest filter</t:objective>
    
    <t:steps> 1. Create a filter meTest  header="CC" for account1 to flag
			  2. Send a message and CC to the account1
			  3. Verify that the message gets flagged for account1.
    </t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>	
    
	<t:property name="filter_meTest2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter_meTest2.subject" value="meTest ${TIME}${COUNTER}"/>		
	    
    <t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter_meTest2.name}" active="1">
						<filterTests condition="allof">
						  <meTest  header="CC"/>				
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
            
    <t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
		<e t="t" a='${account2.name}'/>
		 <e t="c" a='${account1.name}'/>
		<su>${filter_meTest2.subject}</su>
		<mp ct="text/plain">
		    <content> Testing metest filter </content>
		</mp>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse"/>
	   </t:response>
	</t:test>
    
    
    <t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_meTest2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_meTest2.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m"   attr="f" match=".*f.*" />       
        </t:response>
    </t:test>  
          
</t:test_case> 

</t:tests>