<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup_linkedinTest" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraPrefTimeZoneId">UTC</a>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="linkedinTest_01" type="bhr" bugids="42185" >
    <t:objective>Verify that message for network joining from linkedin is filtered for linkedinTest</t:objective>
    
    <t:steps> 1. Create filter for linkedinTest to flag for account1
			  2. Inject a network joining message from linkedin to the user.
			  3. Verify that the message gets flagged.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter_linkedin.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter_linkedin1.subject" value="filter${TIME}${COUNTER}"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter_linkedin.name}" active="1">
						<filterTests condition="allof">
							<linkedinTest/>
						</filterTests>
						<filterActions>
							 <actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
   
	<t:property name="linkedin_msg01.file" value="${testMailRaw.root}/bug42185/linkedin-member.txt" />

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${linkedin_msg01.file}</filename>
			<to>${account1.name}</to>
			<from>filter@testfilter.com</from>
			<server>${account1.server}</server>
			<modify>
                <header a="Subject">${filter_linkedin1.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>	
  
    <t:test >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_linkedin1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_linkedin1.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>
    
       
</t:test_case> 

<t:test_case testcaseid="linkedinTest_02" type="bhr" bugids="42185" >

    <t:objective>Verify that confirming message for network join request from linkedin is filtered for linkedinTest</t:objective>
    
    <t:steps> 1. Create filter for linkedinTest to flag for account1
			  2. Inject a confirming message from linkedin to the user.
			  3. Verify that the message gets flagged.
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter_linkedin.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter_linkedin2.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter_linkedin.name}" active="1">
						<filterTests condition="allof">
							<linkedinTest/>
						</filterTests>
						<filterActions>
							 <actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
   
	<t:property name="linkedin_msg02.file" value="${testMailRaw.root}/bug42185/linkedin-connection.txt" />
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${linkedin_msg02.file}</filename>
			<to>${account1.name}</to>
			<from>filter@testfilter.com</from>
			<server>${account1.server}</server>
			<modify>
                <header a="Subject">${filter_linkedin2.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>	
    
    <t:test >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_linkedin2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_linkedin2.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>    
    
</t:test_case> 


<t:test_case testcaseid="linkedinTest_03" type="bhr" bugids="42185" >

    <t:objective>Verify that general update message from linkedin is not filtered for linkedinTest filter</t:objective>
    
    <t:steps> 1. Create filter for linkedinTest to flag for account1
			  2. Inject a update message to the account1
			  3  Verify thar the message is not flagged.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter_linkedin.name" value="filter${TIME}${COUNTER}"/>	
	<t:property name="filter_linkedin3.subject" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter_linkedin4.subject" value="filter${TIME}${COUNTER}"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter_linkedin.name}" active="1">
						<filterTests condition="allof">
							<linkedinTest/>
						</filterTests>
						<filterActions>
							 <actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
   
    <t:property name="linkedin_msg03.file" value="${testMailRaw.root}/bug42185/linkedin-group.txt" />
	<t:property name="linkedin_msg04.file" value="${testMailRaw.root}/bug42185/linkedin-updates.txt" />


	<t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${linkedin_msg03.file}</filename>
			<to>${account1.name}</to>
			<from>filter@testfilter.com</from>
			<server>${account1.server}</server>
			<modify>
                <header a="Subject">${filter_linkedin3.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>	

	<t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${linkedin_msg04.file}</filename>
			<to>${account1.name}</to>
			<from>filter@testfilter.com</from>
			<server>${account1.server}</server>
			<modify>
                <header a="Subject">${filter_linkedin4.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>	
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_linkedin3.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_linkedin3.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='fu']" emptyset="1"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${filter_linkedin4.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter_linkedin4.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='fu']" emptyset="1"/>
        </t:response>
    </t:test>	     
    
</t:test_case> 

</t:tests>