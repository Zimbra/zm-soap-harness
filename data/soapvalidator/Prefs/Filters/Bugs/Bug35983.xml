<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/> 
<!-- <t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/> -->

<t:property name="message1.file" value="${testMailRaw.root}/email01/msg1.txt"/>
<t:property name="message2.file" value="${testMailRaw.root}/email01/msg09.txt"/>    
<t:property name="message3.file" value="${testMailRaw.root}/email01/msg10.txt"/>
    
<t:property name="message1.from" value="t*s*f*o@***.com"/>
<t:property name="message2.from" value="***************foo@foo.com"/>
<t:property name="message3.from" value="****address@yahoo.com"/>
    
<t:property name="subject.msg" value="5" />
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder2.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder3.name" value="folder${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="account1.userroot.id" value="1" />

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters_basic" type="always" >
    <t:objective> Create test account and login to first account </t:objective>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="ModFil_matches_Fileinto_01" type="bhr">
     <t:objective>Test to see if more than 4 consecutive "*" is possible in Filter wildcard matches 
			      and also to check if delivery of messages hang </t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test id="CreateFolderRequest1b" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                	<folder name="${folder2.name}" l="${account1.userroot.id}"/>                
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder2.id"/>            
        </t:response>
	</t:test>
		  
	<!-- Check if you are able to create a wildcard filter with more than 4 consecutive "*" -->	  
	<t:test id ="modifyFilterRule1">
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
						<filterRule name="modFil1"  active ="1">
							<filterActions>
								<actionFileInto folderPath="${folder2.id}" />
								<actionStop>									
								</actionStop>
							</filterActions>
							<filterTests condition = "allof" >								
									<headerTest header="from" stringComparison="matches" value="${message2.from}" />
									<headerTest header="subject" stringComparison="matches" value ="5" />
							</filterTests>						
						</filterRule>		
				</filterRules>
			</ModifyFilterRulesRequest>
		</t:request>
		<t:response>
			<t:select path = "//zimbra:Code" match = "^service.INVALID_REQUEST$"/>	
		</t:response>		
	</t:test>
	
	<!-- Check if you are able to create a wildcard filter with more than 4 non consecutive "*" . 
	To check if we are able to filter those messages. Doesn't work but verifies the bug. -->
	<t:test id ="modifyFilterRule2">
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
						<filterRule name="modFil1"  active ="1">
							<filterActions>
								<actionFileInto folderPath="${folder2.id}" />
								<actionStop>									
								</actionStop>
							</filterActions>
							<filterTests condition = "allof" >								
									<headerTest header="from" stringComparison="matches" value="${message1.from}" />									
							</filterTests>						
						</filterRule>		
				</filterRules>
			</ModifyFilterRulesRequest>
		</t:request>
		<t:response>
			<t:select path = "//mail:ModifyFilterRulesResponse" />	
		</t:response>		
	</t:test>
	
			
    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	</t:request>
	<t:response>
           <t:select path="//mail:GetFilterRulesResponse"/>
       </t:response>
    </t:test>
 
</t:test_case>

 
<t:test_case testcaseid="ModFil_matches_Fileinto_02" type="bhr">
     <t:objective>Create wildcard rule to check if the email gets filtered for 4 consecutive "*"</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<!--  Creating a filter in second account -->
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:test id="CreateFolderRequest1c" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                	<folder name="${folder3.name}" l="${account1.userroot.id}"/>                
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder3.id"/>            
        </t:response>
	</t:test>                   
    
    <!--  Check for 4 consecutive "*" in a filter and if found file in to a folder. This does the job correctly-->
	<t:test id ="modifyFilterRule3">
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
						<filterRule name="modFil2"  active ="1">
							<filterActions>
								<actionFileInto folderPath="${folder3.name}" />
								<actionStop>									
								</actionStop>
							</filterActions>
							<filterTests condition = "allof" >								
									<headerTest header="from" stringComparison="matches" value="${message3.from}" />
									<headerTest header="subject" stringComparison="matches" value ="5" />
							</filterTests>						
						</filterRule>		
				</filterRules>
			</ModifyFilterRulesRequest>
		</t:request>
		<t:response>
			<t:select path = "//mail:ModifyFilterRulesResponse" />	
		</t:response>		
	</t:test>
	        
    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message1.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
      
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message2.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message3.file}</filename>
			<to>${account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
   <t:test id="filters_basic02d" depends="filters_basic01a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${subject.msg})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">	            
            </t:select>
        </t:response>
    </t:test> 
  
</t:test_case>   

</t:tests>

