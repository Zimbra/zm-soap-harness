<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test1${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test2${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="compose.content" value="Content in the message is contents..."/>
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>
    

</t:test_case>

<t:test_case testcaseid="bug77367_1" type="bhr" bugids="77367">
    <t:objective>Notifyaction filter can result in mail loop</t:objective>
    <t:steps>
    1. Setup notify filter for two accounts to each other.
    2. Send an email from user1 -> user2
    3. Verify results are not in an infinite loop of emails.
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    
    <t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="notify1.subject" value="Notify subject account1"/>
	<t:property name="notify1.body" value="Notify body account1"/>
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${notify1.subject}">
           						 <content>${notify1.body}</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
     
    <t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="notify2.subject" value="Notify subject account2"/>
	<t:property name="notify2.body" value="Notify body account2"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account1.name}" su="${notify2.subject}">
           						 <content>${notify2.body}</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
     
   	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:test >
 		<t:request>
 			  <SendMsgRequest xmlns="urn:zimbraMail">
 	 			 <m>
      				 <e t="t" a='${account2.name}'/>
  				     <su>${filter1.subject}</su>
      				 <mp ct="text/plain">
					    <content> ${compose.content} </content>
      				 </mp>
    			</m>
  			</SendMsgRequest>
	 	</t:request>
 		<t:response>
				<t:select path="//mail:SendMsgResponse"/>
 		</t:response>
	</t:test>
 	
 	<t:delay sec="60"/>
 	
     <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>${notify2.body}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="mail01.id"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
     
     <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>${filter1.subject}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="mail01.id"/>
		</t:response>
	</t:test>
	
	<t:delay sec="10"/>
	
	  <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m[3]" emptyset="1"/>
		</t:response>
	</t:test>
	
    
</t:test_case>


<t:test_case testcaseid="bug77367_2" type="bhr" bugids="77367">
    <t:objective>actionReply filter can result in mail loop</t:objective>
	<t:steps>
	 1. Setup actionReply filter for two accounts to each other.
     2. Send an email from user1 -> user2
     3. Verify results are not in an infinite loop of emails.
	</t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    
    <t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="testfilter${TIME}${COUNTER}"/>	
	<t:property name="reply1.subject" value="Reply subject account1"/>
	<t:property name="reply1.body" value="Reply body account1"/>
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							  <actionReply a="${account2.name}" su="${reply1.subject}">
           						 <content>${reply1.body}</content>
           					 </actionReply>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
     
    <t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="reply2.subject" value="Reply subject account2"/>
	<t:property name="reply2.body" value="Reply body account2"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							  <actionReply a="${account1.name}" su="${reply2.subject}">
           						 <content>${reply2.body}</content>
           					 </actionReply>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
     
   	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:test >
 		<t:request>
 			  <SendMsgRequest xmlns="urn:zimbraMail">
 	 			 <m>
      				 <e t="t" a='${account2.name}'/>
  				     <su>${filter1.subject}</su>
      				 <mp ct="text/plain">
					    <content> ${compose.content} </content>
      				 </mp>
    			</m>
  			</SendMsgRequest>
	 	</t:request>
 		<t:response>
				<t:select path="//mail:SendMsgResponse"/>
 		</t:response>
	</t:test>

	 <t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
     
     <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>${filter1.subject}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="mail01.id"/>
		</t:response>
	</t:test>
	
	<t:delay sec="10"/>
	
	 <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m[5]" emptyset="1"/>
		</t:response>
	</t:test>
	
</t:test_case>

</t:tests>

