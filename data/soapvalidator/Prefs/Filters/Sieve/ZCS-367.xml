<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="msg01.subject" value="email04A"/>
<t:property name="msg01.file" value="${testMailRaw.root}/email04/email04a.txt"/>
<t:property name="msg02.subject" value="email04B"/>
<t:property name="msg02.file" value="${testMailRaw.root}/email04/email04b.txt"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters_save" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>


</t:test_case>



<t:test_case testcaseid="ZCS-367_FilterByName" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request by Username</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="name">${account1.name}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="is" value="${msg01.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="name">${account1.name}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="flagged"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:test id="filters_basic02d" depends="filters_basic01a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${msg01.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg01.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="name">${account1.name}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="is" value="${msg02.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="priority" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="name">${account1.name}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="priority"/>
        </t:response>
    </t:test> 

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg02.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:test id="filters_basic02d" depends="filters_basic01a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${msg02.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg02.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*au.*"/>
        </t:response>
    </t:test>       	
</t:test_case>

<t:test_case testcaseid="ZCS-367_FilterByID" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request by UserID</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="id">${account1.id}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="id">${account1.id}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse"/>
        </t:response>
    </t:test>	

	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="name">${account1.name}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="priority" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="name">${account1.name}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="priority"/>
        </t:response>
    </t:test>    
</t:test_case>

<t:test_case testcaseid="ZCS-367_FilterJsonByName" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request by Username and verify JSON request format</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
	    <t:requestContext>
	    	<authToken>${authToken}</authToken>
            <format type="js"/>
        </t:requestContext>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="name">${account1.name}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:requestContext>
        	<authToken>${authToken}</authToken>
            <format type="js"/>
        </t:requestContext>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="name">${account1.name}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/admin:filterActions/admin:actionFlag" attr="flagName" match="flagged"/>
        </t:response>
    </t:test>
    	
</t:test_case>

<t:test_case testcaseid="ZCS-367_FilterJsonByID" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request by Username and verify JSON request format</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
	    <t:requestContext>
	    	<authToken>${authToken}</authToken>
            <format type="js"/>
        </t:requestContext>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="id">${account1.id}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:requestContext>
        	<authToken>${authToken}</authToken>
            <format type="js"/>
        </t:requestContext>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="id">${account1.id}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
            <t:select path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/admin:filterActions/admin:actionFlag" attr="flagName" match="flagged"/>
        </t:response>
    </t:test>
    	
</t:test_case>

<t:test_case testcaseid="ZCS-367_PermDeniedFilterByID" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request through non-admin user through userid. Verify Permission denied error is seen</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
        <t:response>
            <t:select path="//acct:AuthResponse" attr="authToken" set="authToken"/>
        </t:response>
	</t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="id">${account1.id}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
            <t:select path="//soap:Text" match="permission denied: need adequate admin token"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="id">${account1.id}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
	 		<t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
            <t:select path="//soap:Text" match="permission denied: need adequate admin token"/>
        </t:response>
    </t:test>	
    
</t:test_case>

<t:test_case testcaseid="ZCS-367_PermDeniedFilterByName" type="functional" bugids="ZCS-367">
    <t:objective>Execute Modify and Get Filter Request through non-admin user for username. Verify Permission denied error is seen</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
        <t:response>
            <t:select path="//acct:AuthResponse" attr="authToken" set="authToken"/>
        </t:response>
	</t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>


	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
				<account by="name">${account1.name}</account>
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof" xmlns="urn:zimbraMail">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions xmlns="urn:zimbraMail">
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
            <t:select path="//soap:Text" match="permission denied: need adequate admin token"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
            	<account by="name">${account1.name}</account>
            </GetFilterRulesRequest>	
	 </t:request>
	 <t:response>
	 		<t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
            <t:select path="//soap:Text" match="permission denied: need adequate admin token"/>
        </t:response>
    </t:test>	
    
</t:test_case>
</t:tests>
