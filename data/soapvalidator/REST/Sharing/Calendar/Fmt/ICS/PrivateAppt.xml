<t:tests xmlns:t="urn:zimbraTestHarness">
 
    
<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="appointment.location" value="Location of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>


<t:property name="op.grant"			value="grant"/>
<t:property name="op.read"			value="read"/>
<t:property name="op.unread"		value="!read"/>
<t:property name="op.flag"			value="flag"/>
<t:property name="op.unflag"		value="!flag"/>
<t:property name="op.tag"			value="tag"/>
<t:property name="op.untag"			value="!tag"/>
<t:property name="op.move"			value="move"/>
<t:property name="op.delete"		value="delete"/>

<t:property name="grant.usr"			value="usr"/>
<t:property name="grant.grp"			value="grp"/>
<t:property name="grant.dom"			value="dom"/>
<t:property name="grant.cos"			value="cos"/>
<t:property name="grant.all"			value="all"/>
<t:property name="grant.pub"			value="pub"/>
<t:property name="grant.guest"			value="guest"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="view.conversation"	value="conversation"/>
<t:property name="view.message"			value="message"/>
<t:property name="view.contact"			value="contact"/>
<t:property name="view.appointment"		value="appointment"/>
<t:property name="view.note"			value="note"/>




<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>    

<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

    
<t:test_case testcaseid="CalendarSharing_CalendarsDelegated_Private_AccountSetup" type="always">
    <t:objective>Create test account</t:objective>
    <t:steps>
        1. Login to admin.
        2. Create accounts
        3. Account1 shares calendar with account2 (manager rights)
    </t:steps>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>





	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.calendar}" op="${op.grant}">
                    <grant d="${account2.name}" gt="${grant.usr}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account2.folder.root"/>
        </t:response>
    </t:test>

	<t:property name="account2.mountpoint.name" value="Calendar.${TIME}.${COUNTER}"/>

    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root}" name="${account2.mountpoint.name}" view="appointment" rid="${account1.folder.calendar}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.delegated.id"/>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="CalendarSharing_RestServlet_Private_01" type="smoke" bugids="27183">
    <t:objective>Verify Rest download of mounted calendar does not show private appointments</t:objective>
    <t:steps>
        1. Login as account1.  Share calendar with account2.  
        2. Create a private appointment.
        3. Login as account2.
        4. Accept and mount the shared calendar
=        5. Verify that the REST download (ics) does not show the private appointment (look for the UID)
    </t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="appt.subject"		value="subject.${TIME}.${COUNTER}"/>
	<t:property name="appt.location"	value="location.${TIME}.${COUNTER}"/>
	<t:property name="appt.timezone"	value="(GMT-05.00) Eastern Time (US &amp; Canada)"/>
	<t:property name="appt.start.gmt"	value="1263902400000"/> <!-- 01/19/2010 12:00:00 UTC time -->
	<t:property name="appt.start.tz"	value="${TIME(-5h)[${appt.start.gmt}]}"/>

    <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m d="${TIME}">
					<inv >
						<comp class="PRI" method="REQUEST" type="event" fb="B" transp="O" status="CONF" allDay="0" name="${appt.subject}" loc="${appt.location}">
							<s d="${ICALTIME[${appt.start.tz}]}" tz="${appt.timezone}"/>
							<e d="${ICALTIME(+1h)[${appt.start.tz}]}" tz="${appt.timezone}"/>
							<at a="${account2.name}" role="REQ" ptst="NE" rsvp="1"/>
							<or a="${account1.name}"/>
						</comp>
					</inv>
					<mp ct="text/plain">
						<content/>
					</mp>
					<su>${appt.subject}</su>
					<e t="t" a="${account2.name}"/>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="apptId" set="appt.apptId"/>
            	<t:select attr="calItemId" set="appt.calItemId"/>
            	<t:select attr="invId" set="appt.invId"/>
            </t:select>
        </t:response>
    </t:test>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>


    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(-1d)[${appt.start.gmt}]}" calExpandInstEnd="${TIME(+1d)[${appt.start.gmt}]}" types="appointment">
				<query>inid:${account2.delegated.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:appt[@invId='${account1.id}:${appt.invId}']" attr="uid" set="appt.uid"/>
        	</t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${account1.id}:${appt.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/>
        </t:response>
    </t:test>

	<!-- 
		See bug 27183 for expected behavior
		
		At the time of this test case creation, it is expected that the appointment
		does not appear in the ICS.  But, it may be decided that the appointment
		should appear in the ICS.

		Poonam 02/06/2008: Bug: 27183 says subject and details should not be visible but start/end time is ok
	-->
	<t:resttest>
		<t:restServletRequest>
			<folder>${account2.mountpoint.name}</folder>
			<fmt>ics</fmt>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="UID" match="${appt.uid}" emptyset="0"/>
			<t:select attr="SUBJECT" emptyset="1"/>
		</t:restServletResponse>
	</t:resttest>


</t:test_case>
    
<t:test_case testcaseid="CalendarSharing_RestServlet_Private_02" type="smoke">
    <t:objective>Verify Rest download of specific private appointment does not show all the data</t:objective>
    <t:steps>
        1. Login as account1.  Share calendar with account2.  
        2. Create a private appointment.
        3. Login as account2.
        4. Accept and mount the shared calendar
        5. Verify that SearchRequest does not show the private appointment
        5. Verify that the REST download of the appointment (ics) does not show private data
    </t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="appt.subject"		value="subject.${TIME}.${COUNTER}"/>
	<t:property name="appt.location"	value="location.${TIME}.${COUNTER}"/>
	<t:property name="appt.timezone"	value="(GMT-05.00) Eastern Time (US &amp; Canada)"/>
	<t:property name="appt.start.gmt"	value="1263902400000"/> <!-- 01/19/2010 12:00:00 UTC time -->
	<t:property name="appt.start.tz"	value="${TIME(-5h)[${appt.start.gmt}]}"/>

    <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m d="${TIME}">
					<inv >
						<comp class="PRI" method="REQUEST" type="event" fb="B" transp="O" status="CONF" allDay="0" name="${appt.subject}" loc="${appt.location}">
							<s d="${ICALTIME[${appt.start.tz}]}" tz="${appt.timezone}"/>
							<e d="${ICALTIME(+1h)[${appt.start.tz}]}" tz="${appt.timezone}"/>
							<at a="${account2.name}" role="REQ" ptst="NE" rsvp="1"/>
							<or a="${account1.name}"/>
						</comp>
					</inv>
					<mp ct="text/plain">
						<content/>
					</mp>
					<su>${appt.subject}</su>
					<e t="t" a="${account2.name}"/>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="apptId" set="appt.apptId"/>
            	<t:select attr="calItemId" set="appt.calItemId"/>
            	<t:select attr="invId" set="appt.invId"/>
            </t:select>
        </t:response>
    </t:test>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>


    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(-1d)[${appt.start.gmt}]}" calExpandInstEnd="${TIME(+1d)[${appt.start.gmt}]}" types="appointment">
				<query>inid:${account2.delegated.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:appt[@invId='${account1.id}:${appt.invId}']" attr="uid" set="appt.uid"/>
        	</t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${account1.id}:${appt.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${account1.id}:${appt.invId}</id>
			<fmt>ics</fmt>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="UID" match="${appt.uid}"/>
        	<t:select attr="ORGANIZER" match="mailto:${account1.name}" emptyset="1"/>
        	<t:select attr="DTSTART" />
        	<t:select attr="DTEND" />
        	<t:select attr="CLASS" match="PRIVATE" />
        	<t:select attr="SUMMARY" emptyset="1" />
        	<t:select attr="DESCRIPTION" emptyset="1" />
        	<t:select attr="LOCATION" emptyset="1" />
		</t:restServletResponse>
	</t:resttest>


</t:test_case>
    

</t:tests>