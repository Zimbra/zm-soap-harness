<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.password" value="${defaultpassword.value}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.password" value="${defaultpassword.value}"/>

<t:property name="guest1.name" value="guest1${TIME}.${COUNTER}@foo.com"/>
<t:property name="guest1.password" value="guest1password"/>

<t:property name="guest2.name" value="guest2${TIME}.${COUNTER}@bar.com"/>
<t:property name="guest2.password" value="guest2password"/>

<t:property name="guest3.name" value="guest3${TIME}.${COUNTER}@bar.com"/>
<t:property name="guest3.password" value="guest3password"/>


<t:property name="folder.name"		value="folder.${TIME}.${COUNTER}"/>			<!-- Folder's parent ID -->
<t:property name="op.move"			value="move"/>
<t:property name="op.grant"			value="grant"/>
<t:property name="perm.guest"		value="guest"/>


<t:property name="message1.content" value="content${TIME}.${COUNTER}"/>
<t:property name="message1.subject" value="subject${TIME}.${COUNTER}"/>


<t:property name="root"				value="${soapxml.root}/MailClient/Mail/lmtp/MimeBasic/"/>
<t:property name="message2.file"	value="${root}/lmtp_basic01.txt"/>
<t:property name="message2.subject"	value="subject${TIME}.${COUNTER}"/>



<t:test_case testcaseid="RestServlet_PermissionsGuest_Setup" type="always" >
	<t:objective>setup accounts</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	
	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${account1.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
				<password>${account2.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
		</t:response>
	</t:test>




	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="inbox.folder.id"/>
		</t:response>
	</t:test>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name}" l="${inbox.folder.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a='${account2.name}'/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>${message1.content}</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id="${message1.id}" op="${op.move}" l="${folder1.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.move}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message1.id}"/>
        </t:response>
    </t:test>
        <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest2.name}" args="${guest2.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
</t:test_case>




<t:test_case testcaseid="RestServlet_PermissionsGuest_01" type="smoke" bugids="9351, 9339">
	<t:objective>Verify that a guest can access a shared REST file with valid user, valid password</t:objective>
	<t:steps>
	1. Use the rest servlet to view a message using user (valid) and password (valid)
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS"/>
        </t:response>
    </t:test>


	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>${guest1.name}</guest>
			<password>${guest1.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="To" match="${account2.name}"/>
			<t:select attr="Subject" match="${message1.subject}"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>

<t:test_case testcaseid="RestServlet_PermissionsGuest_02" type="smoke" bugids="8208, 9351">
	<t:objective>Verify that a guest can NOT access a shared REST file with invalid user, valid password</t:objective>
	<t:steps>
	1. Use the rest servlet to view a message using user (invalid) and password (valid)
	2. Confirm 401 error
	</t:steps>


<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS"/>
        </t:response>
    </t:test>


	<t:property name="authToken" value=""/>

    <t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>invalid${guest1.name}</guest>
			<password>${guest1.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="401"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>


<t:test_case testcaseid="RestServlet_PermissionsGuest_03" type="smoke" bugids="9351, 9339" >
	<t:objective>Verify that a guest can NOT access a shared REST file with valid user, invalid password</t:objective>
	<t:steps>
	1. Use the rest servlet to view a message using user (valid) and password (invalid)
	2. Confirm 401 error
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS"/>
        </t:response>
    </t:test>


	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>${guest1.name}</guest>
			<password>invalid${guest1.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="401"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>

<t:test_case testcaseid="RestServlet_PermissionsGuest_04" type="smoke" bugids="9351,9339" >
	<t:objective>Verify that a guest can NOT access a shared REST file with invalid user, invalid password</t:objective>
	<t:steps>
	1. Use the rest servlet to view a message using user (invalid) and password (invalid)
	2. Confirm 401 error
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS"/>
        </t:response>
    </t:test>


	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>
	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>invalid${guest1.name}</guest>
			<password>invalid${guest1.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="401"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>

<t:test_case testcaseid="RestServlet_PermissionsGuest_05" type="smoke" bugids="9351" >
	<t:objective>Verify that a folder can be shared to multiple guests simultaneously</t:objective>
	<t:steps>
	1. Share to guest1
	2. Share to guest2
	3. Verify that guest1 can view the file
	4. Verify that guest2 can view the file
	5. Verify that guest3 can NOT view the file
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder1.id}">
					<grant gt="${perm.guest}" perm="r" d="${guest1.name}" args="${guest1.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="mail.GRANT_EXISTS"/>
        </t:response>
    </t:test>




	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>${guest1.name}</guest>
			<password>${guest1.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="To" match="${account2.name}"/>
			<t:select attr="Subject" match="${message1.subject}"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>${guest2.name}</guest>
			<password>${guest2.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="To" match="${account2.name}"/>
			<t:select attr="Subject" match="${message1.subject}"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${message1.id}</id>
			<guest>${guest3.name}</guest>
			<password>${guest3.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="401"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>


</t:tests>
