<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="wiki1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="wiki2.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="wiki1.pagename" value="wikipg1.${TIME}.${COUNTER}"/>
<t:property name="wiki1.version1.content" value="${wiki1.pagename}.${TIME}.${COUNTER}"/>
<t:property name="wiki1.version2.content" value="${wiki1.pagename}.${TIME}.${COUNTER}"/>

<t:property name="wiki2.pagename" value="wikipg2.${TIME}.${COUNTER}"/>
<t:property name="wiki2.version1.content" value="${wiki2.pagename}.${TIME}.${COUNTER}"/>
<t:property name="wiki2.version2.content" value="${wiki2.pagename}.${TIME}.${COUNTER}"/>
<t:property name="wiki2.version3.content" value="${wiki2.pagename}.${TIME}.${COUNTER}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="WikiBasicPing" type="deprecated" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="RestWikiVersion_Basic_AccountSetup" type="deprecated" >
 <t:objective>create test accounts</t:objective>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']"  set="account1.server"/>
        </t:response>
    </t:test>  

    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraFeatureNotebookEnabled">TRUE</a>
				<a n="zimbraNotebookMaxRevisions">2</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']"  set="account2.server"/>
        </t:response>
    </t:test>  

 

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="account1.wiki.folder.id"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="account2.wiki.folder.id"/>
		</t:response>
	</t:test>
	
</t:test_case>


<t:test_case testcaseid="RestWikiVersion_Basic_01" type="deprecated" bugids="16942">
	<t:objective>Save two versions of the same wiki page.  Use Rest to get both versions.</t:objective>
	<t:steps>
			1. Save a wiki page (version 1)
			2. Resave the wiki page with new content (version 2)
			3. Get both versions of the wiki page using ver=N
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:property name="server.restServlet" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${wiki1.pagename}" l="${account1.wiki.folder.id}">${wiki1.version1.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="wiki1.version1.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="wiki1.version1.ver"/>
        </t:response>
    </t:test>

  	<t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${wiki1.pagename}" id="${wiki1.version1.id}" l="${account1.wiki.folder.id}" ver="${wiki1.version1.ver}" >${wiki1.version2.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="wiki1.version2.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="wiki1.version2.ver"/>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${wiki1.version1.id}</id>
			<version>${wiki1.version1.ver}</version>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select match=".*${wiki1.version1.content}.*" />
		</t:restServletResponse>
	</t:resttest>

	<t:resttest>
		<t:restServletRequest>
			<id>${wiki1.version2.id}</id>
			<version>${wiki1.version2.ver}</version>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select match=".*${wiki1.version2.content}.*" />
		</t:restServletResponse>
	</t:resttest>


</t:test_case>

<t:test_case testcaseid="RestWikiVersion_Basic_02" type="deprecated" bugids="16942">
	<t:objective>Verify zimbraNotebookMaxRevisions=2 allows only 2 versions to be saved</t:objective>
	<t:steps>
			1. Create account with zimbraNotebookMaxRevisions=2
			2. Save a wiki page (version 1)
			3. Resave the wiki page with new content (version 2)
			4. Resave the wiki page with new content (version 3)
			5. Get version 1 - Should returns Status code 500 as only 2 version allowed.
			6. Get version 2 - success
			7. Get version 3 - success
			
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="server.restServlet" value="${account2.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${wiki2.pagename}" l="${account2.wiki.folder.id}">${wiki2.version1.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="wiki2.version1.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="wiki2.version1.ver"/>
        </t:response>
    </t:test>

  	<t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${wiki2.pagename}" id="${wiki2.version1.id}" l="${account2.wiki.folder.id}" ver="${wiki2.version1.ver}" >${wiki2.version2.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="wiki2.version2.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="wiki2.version2.ver"/>
        </t:response>
    </t:test>

  	<t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
				<w name="${wiki2.pagename}" id="${wiki2.version2.id}" l="${account2.wiki.folder.id}" ver="${wiki2.version2.ver}" >${wiki2.version3.content}</w>
			</SaveWikiRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="wiki2.version3.id"/>
            <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" set="wiki2.version3.ver"/>
        </t:response>
    </t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${wiki2.version1.id}</id>
			<version>${wiki2.version1.ver}</version>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="500"/>
		</t:restServletResponse>
	</t:resttest>

	<t:resttest>
		<t:restServletRequest>
			<id>${wiki2.version2.id}</id>
			<version>${wiki2.version2.ver}</version>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select match=".*${wiki2.version2.content}.*" />
		</t:restServletResponse>
	</t:resttest>

	<t:resttest>
		<t:restServletRequest>
			<id>${wiki2.version3.id}</id>
			<version>${wiki2.version3.ver}</version>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select match=".*${wiki2.version3.content}.*" />
		</t:restServletResponse>
	</t:resttest>


</t:test_case>



</t:tests>
