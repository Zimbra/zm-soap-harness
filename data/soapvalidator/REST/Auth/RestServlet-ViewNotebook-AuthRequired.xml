<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.password" value="${defaultpassword.value}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.password" value="${defaultpassword.value}"/>

<t:property name="account1.wiki.pagename" value="wiki.${TIME}.${COUNTER}"/>
<t:property name="perm.usr" value="usr"/>
<t:property name="op.grant" value="grant"/>

<t:test_case testcaseid="RestServlet_ViewNotebook_AuthRequired_Setup" type="deprecated" >
	<t:objective>setup accounts</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	
	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${account1.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
				<password>${account2.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
		</t:response>
	</t:test>




	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>

		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.notebook}']" attr="id" set="wiki.folder.id"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SaveWikiRequest xmlns="urn:zimbraMail">
			  <w name="${account1.wiki.pagename}" l="${wiki.folder.id}">
			  Now is the time for all good men to come to the aid of their country.
			  </w>
			</SaveWikiRequest>
		</t:request>
		<t:response>
		    <t:select path="//mail:SaveWikiResponse/mail:w" attr="id" set="account1.wiki.id"/>
		    <t:select path="//mail:SaveWikiResponse/mail:w" attr="ver" match="^1$"/>
		</t:response>
    	</t:test>
</t:test_case>


<t:test_case testcaseid="RestServlet_ViewNotebook_AuthRequired_01" type="deprecated" bugids="42782">
	<t:objective>Verify that after viewing shared notebook with view rights, user should not be able to login</t:objective>
	<t:steps>
	1) user A shares notebook to user B (also on the Zimbra system)
	2) user B accesses share using the REST URL 
	3) user B provides credentials and views notebook
	4) user B goes to the web client and do searchrequest.He should not be allowed to access without providing password
	
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${wiki.folder.id}">
					<grant gt="${perm.usr}" perm="r" d="${account2.name}" args="${account2.password}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<t:property name="authToken" value=""/>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<user>${account1.name}</user>
			<id>${account1.wiki.id}</id>
			<guest>${account2.name}</guest>
			<password>${account2.password}</password>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
		</t:restServletResponse>
	</t:resttest>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path= "//zimbra:Code" match="^service.AUTH_REQUIRED"/>
			
		</t:response>
	</t:test>

</t:test_case>
</t:tests>

