<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="appointment1.subject" value="Subject of meeting${TIME}.${COUNTER}"/>
<t:property name="reminder.text" value="Reminder 1"/>
<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>




<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="account1.calendar.folder.id"/>
			</t:select>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="437023" type="smoke" areas="Calendar">
    <t:objective> Open Monthly recurring events and set reminder for First time and Second time and later change event start time for All Dates - Days then Hours.</t:objective>


	<t:property name="time.20500101120000.gmt" value="2524651200000"/>
	<t:property name="time.20500101120000.pst" value="${TIME(-8h)[${time.20500101120000.gmt}]}"/>
	<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana"/>

    <t:test>
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment1.subject}">
							<s d="${ICALTIME[${time.20500101120000.pst}]}" tz="${timezone.pst}" />
							<e  d="${ICALTIME(+3h)[${time.20500101120000.pst}]}" tz="${timezone.pst}" />
							<or a="${account1.name}"/>
							<recur>
								<add>
									<rule freq="MON">
										<interval ival="1"/>
										<until d="20180301"/>
									</rule>
								</add>
							</recur>
						</comp>
					</inv>
					<su>${appointment1.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse" attr="invId" set="appointment1.id"/>
		</t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAppointmentRequest xmlns="urn:zimbraMail" id="${appointment1.id}" comp="0">
                <m>
                    <inv method="REQUEST" type="event" fb="B" transp="O" status="CONF" allDay="0" name="${appointment1.subject}" >
	                        <s d="${ICALTIME[${time.20500101120000.gmt}]}" tz="${timezone.pst}"/>  
	                        <e d="${ICALTIME(+1h)[${time.20500101120000.gmt}]}" tz="${timezone.pst}"/>  
	                        <or a="${account1.name}"/>
							<recur>
								<add>
									<rule freq="MON">
										<interval ival="1"/>
										<until d="20180301"/>
									</rule>
								</add>
							</recur>
							<alarm action="DISPLAY">
								<trigger>
								  <rel related="START" neg="1" m="30"/>
								</trigger>
								 <repeat count="1" />
									<desc>${reminder.text}</desc>
							 </alarm>
                    </inv>
                    <mp content-type="text/plain">
                        <content>${appointment.content}</content>
                    </mp>
                    <su>${appointment1.subject}</su>
                </m>
            </ModifyAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:ModifyAppointmentResponse" attr="invId" set="appt1.invId"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAppointmentRequest xmlns="urn:zimbraMail" id="${appt1.invId}" comp="0">
                <m>
                    <inv method="REQUEST" type="event" fb="B" transp="O" status="CONF" allDay="0" name="${appointment1.subject}" >
	                        <s d="${ICALTIME(+30m)[${time.20500101120000.gmt}]}" tz="${timezone.pst}"/>  
	                        <e d="${ICALTIME(+1h)[${time.20500101120000.gmt}]}" tz="${timezone.pst}"/>  
	                        <or a="${account1.name}"/>
							<recur>
								<add>
									<rule freq="MON">
										<interval ival="1"/>
										<until d="20180301"/>
									</rule>
								</add>
							</recur>
							<alarm action="DISPLAY">
								<trigger>
								  <rel related="START" neg="1" m="30"/>
								</trigger>
									<desc>${reminder.text}</desc>
							 </alarm>
                    </inv>
                    <mp content-type="text/plain">
                        <content>${appointment.content}</content>
                    </mp>
                    <su>${appointment1.subject}</su>
                </m>
            </ModifyAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:ModifyAppointmentResponse" attr="invId" set="appt2.invId"/>
        </t:response>
    </t:test>


    <t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(-1d)[${time.20500101120000.gmt}]}" calExpandInstEnd="${TIME(+1d)[${time.20500101120000.gmt}]}" types="appointment">
				<query>inid:${account1.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:appt[@invId='${appt2.invId}']"/>
            	<t:select path="//mail:appt/mail:alarmData/mail:alarm" attr="action" match="DISPLAY"/>
            	<t:select path="//mail:appt/mail:alarmData/mail:alarm" attr="desc" match="${reminder.text}"/>
            </t:select>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request> 
			<GetAppointmentRequest  xmlns="urn:zimbraMail" id="${appt2.invId}"/>
		</t:request>
		<t:response>
			<t:select path = "//mail:GetAppointmentResponse/mail:appt/mail:inv/mail:comp" attr="name" match="${appointment1.subject}"/>
			<t:select path = "//mail:GetAppointmentResponse/mail:appt/mail:inv/mail:comp/mail:s" attr="d" match="${ICALTIME(+30m)[${time.20500101120000.gmt}]}"/>
			<t:select path = "//mail:GetAppointmentResponse/mail:appt/mail:inv/mail:comp/mail:e" attr="d" match="${ICALTIME(+1h)[${time.20500101120000.gmt}]}"/>
		</t:response>
	</t:test>

</t:test_case>


</t:tests>
