<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="appointment.subject1" value="Subject of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.location" value="Meeting Room 1"/>
<t:property name="appointment.content" value="Content of the message"/>

<t:property name="Time1" value="${ICALTIME(+30m)}"/>
<t:property name="Time2" value="${ICALTIME(+1h)}"/>
<t:property name="TimeRangeStart" value="${TIME-1d}"/>
<t:property name="TimeRangeFinish" value="${TIME(+2d)}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_appointment_search" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>
  
</t:test_case>


<t:test_case testcaseid = "Appointment_Search01" type="smoke" areas="Calendar">
    <t:objective> </t:objective>
    <t:steps>1. Login to an account
			 2. Create an appointment.
             3. Search for that appointment by its subject
    </t:steps>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
 <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <inv method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment.subject1}" loc="${appointment.location}">
                        <at role="OPT" ptst="NE" rsvp="1" a="${test_account1.name}"/>
                        <s d="${Time1}"/>  
                        <e d="${Time2}"/>  
                        <or a="${test_account1.name}"/>
                    </inv>
                    <e a="${test_account1.name}" t="t"/>
                    <mp content-type="text/plain">
                        <content>${appointment.content}</content>
                    </mp>
                    <su>${appointment.subject1}</su>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateAppointmentResponse" attr="invId" set="appointment1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="appointment" calExpandInstStart="${TimeRangeStart}" calExpandInstEnd="${TimeRangeFinish}">
				<query>${appointment.subject1}(inid:10)</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:appt" attr="name" match="${appointment.subject1}"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="appointment" calExpandInstStart="${TimeRangeStart}" calExpandInstEnd="${TimeRangeFinish}" fetch="all">
				<query>${appointment.subject1}</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:appt" attr="name" match="${appointment.subject1}"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid = "Appointment_Search02" type="functional" areas="Calendar">
    <t:objective> Create a search folder for appointment search </t:objective>

	<t:test>
		<t:request>
			<CreateSearchFolderRequest xmlns="urn:zimbraMail">
				<search name="Search01${TIME}.${COUNTER}" query="${appointment.subject1}" types="appointment" sortBy="dateDesc" l="1" fetch="all"/>
			</CreateSearchFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:CreateSearchFolderResponse/mail:search" attr="id" set="searchfolder.id1"/>
			<t:select path="//mail:CreateSearchFolderResponse/mail:search" attr="query" match="${appointment.subject1}"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetSearchFolderRequest xmlns="urn:zimbraMail">
			</GetSearchFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:GetSearchFolderResponse/mail:search" attr="query" match="${appointment.subject1}"/>
		</t:response>
	</t:test>
	
</t:test_case>


<t:test_case testcaseid = "Appointment_Search03" type="functional" areas="Calendar">
    <t:objective> Delete the appointment search folder </t:objective>

	 <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="delete" id="${searchfolder.id1}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>
