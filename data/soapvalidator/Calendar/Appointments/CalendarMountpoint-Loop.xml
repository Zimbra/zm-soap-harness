<t:tests xmlns:t="urn:zimbraTestHarness">
 
<t:property name="testdomain.name" value="domain${TIME}${COUNTER}.com"/>    
    
<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="op.grant" value="grant"/>
<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>
<t:property name="op.delete" value="delete"/>

<t:property name="grant.usr" value="usr"/>
<t:property name="grant.grp" value="grp"/>
<t:property name="grant.dom" value="dom"/>
<t:property name="grant.cos" value="cos"/>
<t:property name="grant.all" value="all"/>
<t:property name="grant.pub" value="pub"/>
<t:property name="grant.guest" value="guest"/>

<t:property name="rights.none" value=""/>
<t:property name="rights.read" value="r"/>
<t:property name="rights.write" value="w"/>
<t:property name="rights.insert" value="i"/>
<t:property name="rights.delete" value="d"/>
<t:property name="rights.administer" value="a"/>
<t:property name="rights.workflow" value="x"/>
<t:property name="rights.manager" value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="view.conversation" value="conversation"/>
<t:property name="view.message" value="message"/>
<t:property name="view.contact" value="contact"/>
<t:property name="view.appointment" value="appointment"/>
<t:property name="view.note" value="note"/>




<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>    

<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

    
<t:test_case testcaseid="CalendarSharing_CreateMountpointRequest_Basic_AccountSetup" type="always">
    <t:objective>Create test account</t:objective>
    <t:steps>
        1. Login to admin.
        2. Create accounts
        3. Account1 shares calendar with account2 (manager rights)
    </t:steps>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="CalendarSharing_CreateMountpointRequest_Loop_01" type="sanity" bugids="39949" duration="long">
    <t:objective>Verify a shared calendar can be mounted</t:objective>
    <t:steps>
        1. In a loop
        	A. Create accountX
        	B. Share Calendar with account1
        	C. Account1 creates calendar mountpoint to Calendar
    </t:steps>


    <t:test_loop count="210">      
        
		<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>    

	    <t:test  id="admin_login" required="true" depends="ping">
	        <t:request>
	            <AuthRequest xmlns="urn:zimbraAdmin">
	                <name>${admin.user}</name>
	                <password>${admin.password}</password>
	            </AuthRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	        </t:response>
	    </t:test>
	
		<t:property name="account.name" value="account${TIME}${COUNTER}@${defaultdomain.name}"/>
	    <t:test required="true">
	        <t:request>
	            <CreateAccountRequest xmlns="urn:zimbraAdmin">
	                <name>${account.name}</name>
	                <password>${defaultpassword.value}</password>
	            </CreateAccountRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account.id"/>
	            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account.server"/>
	        </t:response>
	    </t:test>
	
		<t:property name="server.zimbraAccount" value="${account.server}"/>
	
	    <t:test required="true">
	        <t:request>
	            <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account.name}</account>
	                <password>${defaultpassword.value}</password>
	            </AuthRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
	
	        </t:response>
	    </t:test>
	
	    <t:test required="true">
	        <t:request>
	            <GetFolderRequest xmlns="urn:zimbraMail"/>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="folder.calendar"/>
	            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder.root"/>
	        </t:response>
	    </t:test>
	
	    <t:test required="true">
	        <t:request>
	            <FolderActionRequest xmlns="urn:zimbraMail">
	                <action id="${folder.calendar}" op="${op.grant}">
	                    <grant d="${account1.name}" gt="${grant.usr}" perm="${rights.manager}"/>
	                </action>
	            </FolderActionRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
	        </t:response>
	    </t:test>
	
		<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	    <t:test required="true">
	        <t:request>
	            <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${defaultpassword.value}</password>
	            </AuthRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
	
	        </t:response>
	    </t:test>
	
	    <t:test required="true">
	        <t:request>
	            <CreateMountpointRequest xmlns="urn:zimbraMail">
	                <link l="${account1.folder.root}" name="Calendar${TIME}${COUNTER}" view="appointment" rid="${folder.calendar}" zid="${account.id}"/>
	            </CreateMountpointRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:CreateMountpointResponse"/>
	        </t:response>
	    </t:test>
	
    </t:test_loop>


</t:test_case>
    


</t:tests>