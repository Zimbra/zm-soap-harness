<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:property name="account1.name" value="owner.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="delegatee.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>




<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:test id="create_test_account1">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

	<t:test id="create_test_account2">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

</t:test_case>





<t:test_case testcaseid="Appointment_Privacy_SearchRequest_01" type="sanity" bugids="18620">
    <t:objective>Verify Delegatee cannot search private appointment data (summary)</t:objective>
	
	<t:steps>
	1. Login to account1 and create an appointment and share the calendar to account2 with manager rights
	2. Login to account2 and create mountpoint 
	3. Search for the appointment using appt's subject
	</t:steps>
   	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="appt1.start" value="1264098600000"/>
	<t:property name="appt1.subject" value="appt1.${TIME}.${COUNTER}"/>
	<t:property name="appt1.content" value="appt1.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <su>${appt1.subject}</su>
                    <inv >
                    	<comp class="PRI" method="REQUEST" type="event" fb="B" name="${appt1.subject}" >
	                        <s d="${ICALTIME[${appt1.start}]}"/>  
	                        <e d="${ICALTIME(+1h)[${appt1.start}]}"/>  
	                        <or a="${account1.name}"/>
                        </comp>
                    </inv>
                    <mp content-type="text/plain">
                        <content>${appt1.content}</content>
                    </mp>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse" attr="calItemId" set="appt1.calItemId"/>
            <t:select path="//mail:CreateAppointmentResponse" attr="apptId" set="appt1.apptId"/>
            <t:select path="//mail:CreateAppointmentResponse" attr="invId" set="appt1.invId"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

<t:property name="op.grant"	value="grant"/>
<t:property name="grant.usr" value="usr"/>
<t:property name="rights.manager"		value="rwidx"/>

    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.calendar}" op="${op.grant}">
                    <grant d="${account2.name}" gt="${grant.usr}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>

   	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account2.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${account1.folder.calendar}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.delegated.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="appointment" calExpandInstStart="${TIME(-2d)[${appt1.start}]}" calExpandInstEnd="${TIME(+2d)[${appt1.start}]}">
				<query>${appt1.subject} is:remote</query>
			</SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
	            <t:select path="//mail:appt" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>
