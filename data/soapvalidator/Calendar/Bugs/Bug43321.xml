<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="domain1.name" value="internal.${TIME}.${COUNTER}.${defaultdomain.name}"/>
<t:property name="domain2.name" value="external.${TIME}.${COUNTER}.${defaultdomain.name}"/>

<t:property name="account1.user" value="account1${TIME}${COUNTER}"/>
<t:property name="account1.name" value="${account1.user}@${domain1.name}"/>
<t:property name="account1.external" value="${account1.user}@${domain2.name}"/>

<t:property name="account2.name" value="account2${TIME}${COUNTER}@${defaultdomain.name}"/>



<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana"/>
<t:property name="timezone.pst.regex" value="America\/Los_Angeles"/>




<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:steps>
    	Pinging the server
    </t:steps>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
    <t:steps>
    	Logging in as admin
    	Creating organizer
		Creating resource    	 
    </t:steps>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain2.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain2.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <alias>${account1.external}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    
</t:test_case>


<t:test_case testcaseid="Bug_43321_01" type="bhr" areas="Calendar">
    <t:objective>Verify server support for zimbraPrefFromAddress and zimbraPrefReplyToAddress on appointments</t:objective>
    <t:steps>
    1. Login as organizer
    2. Set zimbraPrefFromAddress and zimbraPrefReplyToAddress
    3. Send a message using the preferences
    4. Send an appointment using the preferences
    5. Login as invitee
    6. Respond as ACCEPT to appointment
    7. Login as organizer
    8. Verify the status is updated on the appointment correctly    
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
         
    <t:test required="true">
        <t:request>
            <GetIdentitiesRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetIdentitiesResponse">
            	<t:select path="//acct:identity[@name='DEFAULT']" attr="id" set="identity.id"/>
            </t:select>
        </t:response>
    </t:test>
         
    <t:test required="true">
        <t:request>
            <ModifyIdentityRequest xmlns="urn:zimbraAccount">
        		<identity id="${identity.id}">
          			<a name="zimbraPrefFromDisplay">first${TIME}${COUNTER} last${TIME}${COUNTER}</a>
          			<a name="zimbraPrefFromAddress">${account1.external}</a>
					<a name="zimbraPrefReplyToAddress">${account1.external}</a>
          			<a name="zimbraPrefReplyToEnabled">${globals.true}</a>
          			<a name="zimbraPrefReplyToDisplay">first${TIME}${COUNTER} last${TIME}${COUNTER}</a>
        		</identity>
      		</ModifyIdentityRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyIdentityResponse"/>
        </t:response>
    </t:test>
         
	<t:property name="message1.subject" value="subject${TIME}${COUNTER}"/>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account2.name}"/>
					<e t="f" a="${account1.external}"/>
					<e t="r" a="${account1.external}"/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>content ${TIME} ${COUNTER}</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<t:property name="appointment.subject" value="Subject of meeting${TIME}.${COUNTER}"/>
	<t:property name="appointment.location" value="Location of meeting${TIME}.${COUNTER}"/>
	<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>

	<t:property name="time.20190101120000.gmt" value="1546344000000"/>
	<t:property name="time.20190101120000.pst" value="${TIME(-8h)[${time.20190101120000.gmt}]}"/>

    <t:test>
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.subject}">
							<or a="${account1.external}"/>
							<at a="${account2.name}" role="REQ" ptst="NE" rsvp="1"/>
							<s d="${ICALTIME[${time.20190101120000.pst}]}" tz="${timezone.pst}" />
							<e  d="${ICALTIME(+1h)[${time.20190101120000.pst}]}" tz="${timezone.pst}" />
						</comp>
					</inv>
					<e a="${account2.name}" t="t"/>
					<e t="f" a="${account1.external}"/>
					<e t="r" a="${account1.external}"/>
					<su>${appointment.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="account1.appt1.calItemId"/>
            	<t:select attr="invId" set="account1.appt1.invId"/>
            	<t:select attr="apptId" set="account1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
         
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="account2.calendar.folder.id"/>
			</t:select>
		</t:response>
	</t:test>

    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(-1d)[${time.20190101120000.gmt}]}" calExpandInstEnd="${TIME(+1d)[${time.20190101120000.gmt}]}" types="appointment">
				<query>inid:${account2.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt[@name='${appointment.subject}']">
            	<t:select attr="invId" set="account2.appt1.invId"/>
            	<t:select attr="compNum" set="account2.appt1.compNum"/>
            	<t:select attr="name" set="account2.appt1.name"/>
            	<t:select path="//mail:or" attr="a" set="account2.appt1.or"/>
            </t:select> 
        </t:response>
    </t:test>

	<t:property name="verb.response" value="ACCEPT"/>
	<t:property name="verb.expected" value="AC"/>
	
	<t:test>
        <t:request>
			<SendInviteReplyRequest xmlns="urn:zimbraMail" verb="${verb.response}" id="${account2.appt1.invId}" compNum="${account2.appt1.compNum}" updateOrganizer="${globals.true}">
				<m rt="r">
					<e t="t" a="${account2.appt1.or}"/>
					<su>${verb.response}: ${account2.appt1.name}</su>
					<mp ct="text/plain">
						<content>${verb.response}: ${account2.appt1.name}</content>
					</mp>
				</m>
			</SendInviteReplyRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendInviteReplyResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${account1.appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${account1.appt1.invId}']">
            	<t:select path="//mail:at[@a='${account2.name}']" attr="ptst" match="${verb.expected}"/>
            	<t:select path="//mail:reply[@at='${account2.name}']" attr="ptst" match="${verb.expected}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case>

</t:tests>
