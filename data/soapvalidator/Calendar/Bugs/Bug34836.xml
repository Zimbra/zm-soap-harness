<t:tests xmlns:t="urn:zimbraTestHarness">
 
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
 
<t:property name="testdomain.name" value="domain${TIME}${COUNTER}.com"/>    
    
<t:property name="account1.name" value="organizer.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="invitee.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="organizer1.name" value="organizer.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="invitee1.name" value="invitee.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="op.grant"			value="grant"/>
<t:property name="op.read"			value="read"/>
<t:property name="op.unread"		value="!read"/>
<t:property name="op.flag"			value="flag"/>
<t:property name="op.unflag"		value="!flag"/>
<t:property name="op.tag"			value="tag"/>
<t:property name="op.untag"			value="!tag"/>
<t:property name="op.move"			value="move"/>
<t:property name="op.delete"		value="delete"/>

<t:property name="grant.usr"			value="usr"/>
<t:property name="grant.grp"			value="grp"/>
<t:property name="grant.dom"			value="dom"/>
<t:property name="grant.cos"			value="cos"/>
<t:property name="grant.all"			value="all"/>
<t:property name="grant.pub"			value="pub"/>
<t:property name="grant.guest"			value="guest"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.private"		value="p"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="rights.managerwp" value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}${rights.private}"></t:property>

<t:property name="view.conversation"	value="conversation"/>
<t:property name="view.message"			value="message"/>
<t:property name="view.contact"			value="contact"/>
<t:property name="view.appointment"		value="appointment"/>
<t:property name="view.note"			value="note"/>

<t:property name="verb.accept" value="ACCEPT"/>
<t:property name="verb.decline" value="DECLINE"/>
<t:property name="verb.completed" value="COMPLETED"/>
<t:property name="verb.delgated" value="DELEGATED"/>
<t:property name="verb.tentative" value="TENTATIVE"/>

<t:property name="ptst.accept" value="AC"/>
<t:property name="ptst.decline" value="DE"/>
<t:property name="ptst.completed" value="CO"/>
<t:property name="ptst.delgated" value="DE"/>
<t:property name="ptst.tentative" value="TE"/>
<t:property name="ptst.needs" value="NE"/>

<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada)"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="new_CalendarSharing_CalendarsDelegated_Get_AccountSetup" type="always">
    <t:objective>Create test accounts</t:objective>
    <t:steps>
        1. Login to admin.
        2. Create accounts
    </t:steps>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${organizer1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${invitee1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="calSharePubPrivAptsPubEdit" type="bhr">	
	<t:objective>Verify Editing Public apts by invitee in a series shared by organizer who also has a private apt in that series </t:objective>
    <t:steps>
        1. Login as account1 and share calendar with account2 (manager rights without Private Permissions)		
        2. Create a recurring apts as public and also make one apt instance as private appointment.
        3. Share Calendar with invitee (account2) as Manager without private permission
        3. Login as account2. Accept and mount the shared calendar
        4. Access the public appointment series from  account1's calendar
		5. edit an instance in that series 
		6. Login to account1 and verify if the changes have taken place 
    </t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:property name="appointmentpub.exception.subject" value="publicexception${TIME}.${COUNTER}"/>
	<t:property name="appointmentpub.exception.content" value="public content modified by invitee1${TIME}.${COUNTER}"/>
	<t:property name="appointment.exception.subject" value="exception${TIME}.${COUNTER}"/>	

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="organizer.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="organizer.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${organizer.folder.calendar}" op="${op.grant}">
                    <grant d="${invitee1.name}" gt="${grant.usr}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>	
	
	<!-- Appointment Properties -->
	<t:property name="appointment.subject" value="subject${TIME}.${COUNTER}"/>
	<t:property name="appointment.location" value="location${TIME}.${COUNTER}"/>
	<t:property name="appointment.content" value="content${TIME}.${COUNTER}"/>
		
	<t:property name="time.08Jun2009100000.gmt" value="1244455200000"/>
	<t:property name="time.08Jun2009100000.pst" value="${TIME(-8h)[${time.08Jun2009100000.gmt}]}"/>

	<!-- Create a series of appointment as public -->
    <t:test required="true" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" class="PUB" allDay="0" name="${appointment.subject}">
							<or a="${organizer1.name}"/>
							<!--  <at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="0"/> -->
							<s d="${ICALTIME[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}" />
							<e d="${ICALTIME(+3h)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}" />
							<recur>
								<add>
									<rule freq="DAI">
										<interval ival="1"/>
									</rule>
								</add>
							</recur>
						</comp>
					</inv>
					<!--  <e a="${invitee1.name}" t="t"/> -->
					<su>${appointment.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<!-- <t:select attr="subject" set="organizer1.subject" /> -->
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>

	<!--  Apt exception - Change an instance to more hours and also make this event private -->
	
    <t:test required="true" >
        <t:request>
			<CreateAppointmentExceptionRequest xmlns="urn:zimbraMail" id="${organizer1.appt1.invId}" comp="0">
				<m >
					<inv >
						<comp status="CONF" fb="B" transp="O" class="PRI" allDay="0" name="${appointment.exception.subject}">
							<s d="${ICALTIME(+2d)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+2d)(+6h)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>
							<!-- <at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="0"/>-->
							<or a="${organizer1.name}"/>
							<exceptId d="${ICALTIME(+2d)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>					
					<su>${appointment.exception.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>            	
            </t:select>
        </t:response>
    </t:test>	 
	
	<!-- Login to Invitee1-->
	
	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${invitee1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- Get Folders in Invitee list and set the id-->
    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="invitee.folder.root"/>
        </t:response>
    </t:test>
	
	<!-- Mount the shared folder in invitees calendar root folder-->
    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${invitee.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${organizer.folder.calendar}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>        
            <!--  <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="invitee.delegated.name"/>
            <t:select path="//mail:CreateMountPointResponse/mail:link" attr="id" set="invitee.mounted.cal.id"/> -->        
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="invitee1.mounted.cal.id"/>
            <!--  <t:select path="//mail:CreateMountpointResponse/mail:link" attr="owner" match="${account1.name}"/> -->    
        </t:response>
    </t:test>        	  
			  
			  
	<!--Get Message Request -->
	
	 <t:test>
        <t:request>
		    <SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(1d)[${time.08Jun2009100000.pst}]}" calExpandInstEnd="${TIME(+8d)[${time.08Jun2009100000.pst}]}" types="appointment">  
			<!-- <SearchRequest xmlns="urn:zimbraMail" types="appointment"> -->
				<query>inid:${invitee1.mounted.cal.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt" attr="invId" set="appt1.invId"/>
        </t:response>
    </t:test> 

	  
	<t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse/mail:m" attr="id" set="tobe.mounted.id"> 
					<t:select path="//mail:comp" attr="uid" set="item.uid.id" />
					<t:select path="//mail:comp" attr="calItemId" set="item.calId.id" />					
			</t:select>         			
       	</t:response>
    </t:test> 

	
    <!--  Edit an instance of the series which is a public appointment -->   
    
     <t:test required="true" >
        <t:request>
	
			<CreateAppointmentExceptionRequest  xmlns="urn:zimbraMail" id="${appt1.invId}" comp="0">				
			<m >
					<inv uid="${item.uid.id}">
						<comp status="CONF" fb="B" transp="O" class="PUB" allDay="0" name="test">
							<s d="${ICALTIME(+1d)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+1d)(+10h)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>							
							<or a="${organizer1.name}" sentBy="${invitee1.name}"/>
							<exceptId d="${ICALTIME(+1d)[${time.08Jun2009100000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>					
					<!-- <e a="${organizer1.name}" t="f"/> -->
					<su>test</su>
					<mp ct="text/plain">
						<content>${appointmentpub.exception.content}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<t:select attr="calItemId" set="inv1.appt1.calItemId"/>
            	<t:select attr="invId" set="inv1.appt1.invId"/>
            	<t:select attr="apptId" set="inv1.appt1.apptId"/>            	
            </t:select>
        </t:response>
    </t:test>	 
	
	
	<!-- Login to Organizer and check if that instance has changed -->
	 <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="organizer1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="organizer1.folder.root"/>
        </t:response>		
    </t:test>
	
	 <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME[${time.08Jun2009100000.gmt}]}" calExpandInstEnd="${TIME(+9d)[${time.08Jun2009100000.gmt}]}" types="appointment">
				<query>inid:${organizer1.folder.calendar}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt">
            	<t:select path="//mail:inst[@name='test']">
	            	<t:select attr="invId" set="inviteechange1.exception1.invId"/>
	            	<t:select attr="compNum" set="inviteechange1.exception1.compNum"/>
	            	<t:select attr="name" set="inviteechange1.exception1.name"/>
            	</t:select>
            	<t:select path="//mail:appt[@name='${appointment.subject}']">
            		<t:select path="//mail:or" attr="a" set="invitee1.appt1.or"/>
        		</t:select>
            </t:select> 
        </t:response>
    </t:test>

</t:test_case>
  
</t:tests>