<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:property name="organizer1.name" value="organizer1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="invitee1.name" value="invitee1.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="verb.accept" value="ACCEPT"/>
<t:property name="verb.decline" value="DECLINE"/>
<t:property name="verb.completed" value="COMPLETED"/>
<t:property name="verb.delgated" value="DELEGATED"/>
<t:property name="verb.tentative" value="TENTATIVE"/>

<t:property name="ptst.accept" value="AC"/>
<t:property name="ptst.decline" value="DE"/>
<t:property name="ptst.completed" value="CO"/>
<t:property name="ptst.delgated" value="DE"/>
<t:property name="ptst.tentative" value="TE"/>
<t:property name="ptst.needs" value="NE"/>

<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada)"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>




<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_test_organizer1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${organizer1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="organizer1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="organizer1.server"/>
        </t:response>
    </t:test>


    <t:test id="create_test_organizer1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${invitee1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="invitee1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="invitee1.server"/>
        </t:response>
    </t:test>

   
</t:test_case>


<t:test_case testcaseid="Bug60181" type="smoke" bugids="60181">
    <t:objective>Replies list is not cleared when reusing item id of a trashed appointment on receiving a new invite</t:objective>
    <t:steps>
    1. User1 invites user2 to a recurring appointment.
	2. User1 modifies an instance.  Invite is sent to user2 for the instance.
	3. User2 accepts the instance.
	4. User2 deletes the appointment.  Appointment is moved to trash folder.
	5. User1 modifies another instance.
	6. When invite is received by user2, the appointment item in trash is moved to
	calendar folder and existing data is deleted.  We're reusing the item id, but
	the appointment only contains the modified instance just received.  It's an
	orphan instance.
	7. Do GetAppointmentRequest and verify the response should not show replies from first modified instance.

    </t:steps>



	<t:property name="server.zimbraAccount" value="${organizer1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
	<t:test required="true" >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="organizer1.calendar.folder.id"/>
			</t:select>
		</t:response>
	</t:test>

    
   
	<t:property name="appointment.subject" value="subject${TIME}.${COUNTER}"/>
	<t:property name="appointment.location" value="location${TIME}.${COUNTER}"/>
	<t:property name="appointment.content" value="content${TIME}.${COUNTER}"/>

	<t:property name="time.20180101120000.gmt" value="1514808000000"/>
	<t:property name="time.20180101120000.pst" value="${TIME(-8h)[${time.20180101120000.gmt}]}"/>

    <t:test required="true" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.subject}">
							<or a="${organizer1.name}"/>
							<at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="1"/>
							<s d="${ICALTIME[${time.20180101120000.pst}]}" tz="${timezone.pst}" />
							<e  d="${ICALTIME(+3h)[${time.20180101120000.pst}]}" tz="${timezone.pst}" />
							<recur>
								<add>
									<rule freq="WEE">
										<interval ival="1"/>
									</rule>
								</add>
							</recur>
						</comp>
					</inv>
					<e a="${invitee1.name}" t="t"/>
					<su>${appointment.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>

	<t:property name="appointment.exception.subject" value="exception${TIME}.${COUNTER}"/>
    <t:test required="true" >
        <t:request>
			<CreateAppointmentExceptionRequest xmlns="urn:zimbraMail" id="${organizer1.appt1.invId}" comp="0">
				<m >
					<inv >
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.exception.subject}">
							<s d="${ICALTIME(+8d)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+8d)(+3h)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
							<at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="1"/>
							<or a="${organizer1.name}"/>
							<exceptId d="${ICALTIME(+7d)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>
					<e t="t" a="${invitee1.name}"/>
					<su>${appointment.exception.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${invitee1.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${invitee1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test required="true" >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="invitee1.calendar.folder.id"/>
			</t:select>
		</t:response>
	</t:test>

    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(+7d)[${time.20180101120000.gmt}]}" calExpandInstEnd="${TIME(+9d)[${time.20180101120000.gmt}]}" types="appointment">
				<query>inid:${invitee1.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:inst[@name='${appointment.exception.subject}']">
	            	<t:select attr="invId" set="invitee1.exception1.invId"/>
	            	<t:select attr="compNum" set="invitee1.exception1.compNum"/>
	            	<t:select attr="name" set="invitee1.exception1.name"/>
            	</t:select>
            	<t:select path="//mail:appt[@name='${appointment.subject}']">
            		<t:select path="//mail:or" attr="a" set="invitee1.appt1.or"/>
        		</t:select>
            </t:select> 
        </t:response>
    </t:test>

	<t:property name="verb.response" value="${verb.accept}"/>
	<t:property name="verb.expected" value="${ptst.accept}"/>
	
	<t:test required="true">
        <t:request>
			<SendInviteReplyRequest xmlns="urn:zimbraMail" id="${invitee1.exception1.invId}" compNum="${invitee1.exception1.compNum}" verb="${verb.response}" updateOrganizer="TRUE">
				<m rt="r">
					<e t="t" a="${invitee1.appt1.or}"/>
					<su>${verb.response}: exception ${invitee1.exception1.name}</su>
					<mp ct="text/plain">
						<content>${verb.response}: exception ${invitee1.exception1.name}</content>
					</mp>
				</m>
			</SendInviteReplyRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendInviteReplyResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${organizer1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(-1d)[${time.20180101120000.gmt}]}" calExpandInstEnd="${TIME(+1d)[${time.20180101120000.gmt}]}" types="appointment">
				<query>inid:${organizer1.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:appt[@name='${appointment.subject}']">
	            	<t:select attr="invId" set="organizer1.appt1.invId"/>
	            	<t:select attr="compNum" set="organizer1.appt1.compNum"/>
            	</t:select> 
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(+7d)[${time.20180101120000.gmt}]}" calExpandInstEnd="${TIME(+9d)[${time.20180101120000.gmt}]}" types="appointment">
				<query>inid:${organizer1.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:inst[@name='${appointment.exception.subject}']">
	            	<t:select attr="invId" set="organizer1.exception1.invId"/>
	            	<t:select attr="compNum" set="organizer1.exception1.compNum"/>
            	</t:select> 
            </t:select> 
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${organizer1.appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${organizer1.appt1.invId}']">
            	<t:select path="//mail:at[@a='${invitee1.name}']" attr="ptst" match="${ptst.needs}"/>
            	<t:select path="//mail:reply[@at='${invitee1.name}']" emptyset="1"/>  <!-- expected: no response to the series -->
            </t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${organizer1.exception1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${organizer1.exception1.invId}']">
            	<t:select path="//mail:at[@a='${invitee1.name}']" attr="ptst" match="${verb.expected}"/>
            	<t:select path="//mail:reply[@at='${invitee1.name}']" attr="ptst" match="${verb.expected}"/>
            </t:select>
        </t:response>
    </t:test>

	<!-- Delete the appointment from attendee -->
    <t:property name="server.zimbraAccount" value="${invitee1.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${invitee1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CancelAppointmentRequest xmlns="urn:zimbraMail" id="${invitee1.exception1.invId}" comp="0">
                <m>
                   <su>Cancelled${appointment.subject}</su>
                    <mp content-type="text/plain">
                        <content> Action: Cancelled ${appointment.subject}" </content>
                    </mp>
                </m>
            </CancelAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CancelAppointmentResponse"/>
        </t:response>
    </t:test>
    
    <!-- Create another exception -->
    <t:property name="server.zimbraAccount" value="${organizer1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:property name="appointment.exception.subject" value="exception${TIME}.${COUNTER}"/>
    <t:test required="true" >
        <t:request>
			<CreateAppointmentExceptionRequest xmlns="urn:zimbraMail" id="${organizer1.appt1.invId}" comp="0">
				<m >
					<inv >
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.exception.subject}">
							<s d="${ICALTIME(+15d)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+15d)(+3h)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
							<at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="1"/>
							<or a="${organizer1.name}"/>
							<exceptId d="${ICALTIME(+14d)[${time.20180101120000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>
					<e t="t" a="${invitee1.name}"/>
					<su>${appointment.exception.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>
    
    <!-- Check the replies section does not have old replies -->
    <t:property name="server.zimbraAccount" value="${invitee1.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${invitee1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(+1d)[${time.20180101120000.gmt}]}" calExpandInstEnd="${TIME(+22d)[${time.20180101120000.gmt}]}" types="appointment">
				<query>inid:${invitee1.calendar.folder.id}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt" attr="invId" set="invitee1.appt1.id"/>
        </t:response>
    </t:test>
    
      <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${invitee1.appt1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${organizer1.appt1.invId}']">
            </t:select>
        </t:response>
    </t:test>
    
     <t:test>
        <t:request>
            <GetAppointmentRequest xmlns="urn:zimbraMail" id="${invitee1.appt1.id}"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetAppointmentResponse/mail:appt/mail:replies" emptyset="1">
            </t:select>
        </t:response>
    </t:test>


    





		
	

</t:test_case>

</t:tests>
