<t:tests xmlns:t="urn:zimbraTestHarness">
 
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
 
<t:property name="testdomain.name" value="domain${TIME}${COUNTER}.com"/>    
    
<t:property name="account1.name" value="organizer.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="invitee.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="organizer1.name" value="organizer.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="invitee1.name" value="invitee.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="op.grant"			value="grant"/>
<t:property name="op.read"			value="read"/>
<t:property name="op.unread"		value="!read"/>
<t:property name="op.flag"			value="flag"/>
<t:property name="op.unflag"		value="!flag"/>
<t:property name="op.tag"			value="tag"/>
<t:property name="op.untag"			value="!tag"/>
<t:property name="op.move"			value="move"/>
<t:property name="op.delete"		value="delete"/>

<t:property name="grant.usr"			value="usr"/>
<t:property name="grant.grp"			value="grp"/>
<t:property name="grant.dom"			value="dom"/>
<t:property name="grant.cos"			value="cos"/>
<t:property name="grant.all"			value="all"/>
<t:property name="grant.pub"			value="pub"/>
<t:property name="grant.guest"			value="guest"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.private"		value="p"/>
<t:property name="rights.rp"			value="${rights.read}${rights.private}"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="rights.managerwp" 	value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}${rights.private}"></t:property>

<t:property name="view.conversation"	value="conversation"/>
<t:property name="view.message"			value="message"/>
<t:property name="view.contact"			value="contact"/>
<t:property name="view.appointment"		value="appointment"/>
<t:property name="view.note"			value="note"/>

<t:property name="verb.accept" value="ACCEPT"/>
<t:property name="verb.decline" value="DECLINE"/>
<t:property name="verb.completed" value="COMPLETED"/>
<t:property name="verb.delgated" value="DELEGATED"/>
<t:property name="verb.tentative" value="TENTATIVE"/>

<t:property name="ptst.accept" value="AC"/>
<t:property name="ptst.decline" value="DE"/>
<t:property name="ptst.completed" value="CO"/>
<t:property name="ptst.delgated" value="DE"/>
<t:property name="ptst.tentative" value="TE"/>
<t:property name="ptst.needs" value="NE"/>

<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada)"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="new_CalendarSharing_CalendarsDelegated_Get_AccountSetup" type="always">
    <t:objective>Create test accounts</t:objective>
    <t:steps>
        1. Login to admin.
        2. Create accounts
    </t:steps>

    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${organizer1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${invitee1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

</t:test_case>

<!-- Appointment Properties -->
<t:property name="server.zimbraAccount" value="${account1.server}"/>
<t:property name="appointmentpub.exception.subject" value="publicexception${TIME}.${COUNTER}"/>
<t:property name="appointmentpub.exception.content" value="public content modified by invitee1${TIME}.${COUNTER}"/>
<t:property name="appointment.exception.subject" value="exception${TIME}.${COUNTER}"/>	


<t:property name="appointment.subject" value="subject${TIME}.${COUNTER}"/>
<t:property name="appointment.location" value="location${TIME}.${COUNTER}"/>
<t:property name="appointment.content" value="content${TIME}.${COUNTER}"/>
	
<t:property name="appointment1.subject" value="Fsubject${TIME}.${COUNTER}"/>
<t:property name="appointment1.location" value="Flocation${TIME}.${COUNTER}"/>
<t:property name="appointment1.content" value="Fcontent${TIME}.${COUNTER}"/>

	
<t:property name="time.22Dec2009100000.gmt" value="1261476000000"/>
<t:property name="time.22Dec2009100000.pst" value="${TIME(-8h)[${time.22Dec2009100000.gmt}]}"/>


<t:test_case testcaseid="calShareSearchRightsPrivate" type="smoke">	
	<t:objective>Verify Editing Public apts by invitee in a series shared by organizer who also has a private apt in that series </t:objective>
    <t:steps>
        1. Login as account1 and share calendar with account2 (read rights with Private appts view Permissions)		
        2. Create a recurring apts as public and also make one apt instance as private appointment.        
        3. Login as account2. Accept and mount the shared calendar
        4. Search for the Private exception appt.
		5. You should get the result 
    </t:steps>
	
	
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="organizer.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="organizer.folder.root"/>
        </t:response>
    </t:test>

	<!-- Sharing the calendar with invitee1 giving Rights Private and Read rights  -->
    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${organizer.folder.calendar}" op="${op.grant}">
                    <grant d="${invitee1.name}" gt="${grant.usr}" perm="${rights.rp}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>	
	

	<!-- Create a series of appointment as public -->
    <t:test required="true" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" class="PUB" allDay="0" name="${appointment.subject}">
							<or a="${organizer1.name}"/>							
							<s d="${ICALTIME[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}" />
							<e d="${ICALTIME(+3h)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}" />
							<recur>
								<add>
									<rule freq="DAI">
										<interval ival="1"/>
									</rule>
								</add>
							</recur>
						</comp>
					</inv>
					<!--  <e a="${invitee1.name}" t="t"/> -->
					<su>${appointment.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<!-- <t:select attr="subject" set="organizer1.subject" /> -->
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>

	<!--  Apt exception - Change an instance to more hours and also make this event private -->
	
    <t:test required="true" >
        <t:request>
			<CreateAppointmentExceptionRequest xmlns="urn:zimbraMail" id="${organizer1.appt1.invId}" comp="0">
				<m >
					<inv >
						<comp status="CONF" fb="B" transp="O" class="PRI" allDay="0" name="${appointment.exception.subject}">
							<s d="${ICALTIME(+2d)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+2d)(+6h)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}"/>							
							<or a="${organizer1.name}"/>
							<exceptId d="${ICALTIME(+2d)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>					
					<su>changing appt subject</su>
					<mp ct="text/plain">
						<content>${appointment.exception.subject}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>            	
            </t:select>
        </t:response>
    </t:test>	 
	
	
	
	<!-- Creating just a private appt -->
	<t:test required="true" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" class="PRI" allDay="0" name="${appointment1.subject}">
							<or a="${organizer1.name}"/>							
							<s d="${ICALTIME(5d)(+2h)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}" />
							<e d="${ICALTIME(5d)(+8h)[${time.22Dec2009100000.pst}]}" tz="${timezone.pst}" />							
						</comp>
					</inv>
					<!--  <e a="${invitee1.name}" t="t"/> -->
					<su>${appointment1.subject}</su>
					<mp ct="text/plain">
						<content>${appointment1.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="organizer1.appt2.calItemId"/>
            	<!-- <t:select attr="subject" set="organizer1.subject" /> -->
            	<t:select attr="invId" set="organizer1.appt2.invId"/>
            	<t:select attr="apptId" set="organizer1.appt2.apptId"/>
            </t:select>
        </t:response>
    </t:test>
	
	<!-- Login to Invitee1-->
	
	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${invitee1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- Get Folders in Invitee list and set the id-->
    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="invitee.folder.root"/>
        </t:response>
    </t:test>
	
	<!-- Mount the shared folder in invitees calendar root folder-->
    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${invitee.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${organizer.folder.calendar}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>        
            <!--  <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="invitee.delegated.name"/>
            <t:select path="//mail:CreateMountPointResponse/mail:link" attr="id" set="invitee.mounted.cal.id"/> -->        
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="invitee1.mounted.cal.id"/>
            <!--  <t:select path="//mail:CreateMountpointResponse/mail:link" attr="owner" match="${account1.name}"/> -->    
        </t:response>
    </t:test>        	  
			  
			  
	<!--Search the Exception Appointment (Text search) Messages Request -->
	
	 <t:test>
        <t:request>
		    <SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(1d)[${time.22Dec2009100000.pst}]}" calExpandInstEnd="${TIME(+8d)[${time.22Dec2009100000.pst}]}" types="appointment">
				<query>${appointment.exception.subject} (inid:${invitee1.mounted.cal.id})</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt" attr="invId" set="appt1.invId"/>
        </t:response>
    </t:test> 

	  
	<t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse/mail:m" attr="id" set="tobe.mounted.id"> 
					<t:select path="//mail:comp" attr="uid" set="item.uid.id" />
					<t:select path="//mail:comp" attr="calItemId" set="item.calId.id" />					
			</t:select>         			
       	</t:response>
    </t:test> 

	
	 <t:test>
        <t:request>
		    <SearchRequest xmlns="urn:zimbraMail" calExpandInstStart="${TIME(1d)[${time.22Dec2009100000.pst}]}" calExpandInstEnd="${TIME(+8d)[${time.22Dec2009100000.pst}]}" types="appointment">
				<query>${appointment1.subject} (inid:${invitee1.mounted.cal.id})</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:appt" attr="invId" set="appt1.invId"/>
        </t:response>
    </t:test> 

	  
	<t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse/mail:m" attr="id" set="tobe.mounted.id">
					<t:select path="//mail:comp" attr="name" match="${appointment1.subject}" /> 
					<t:select path="//mail:comp" attr="uid" set="item.uid.id" />
					<t:select path="//mail:comp" attr="calItemId" set="item.calId.id" />					
			</t:select>         			
       	</t:response>
    </t:test> 
	

</t:test_case>
  
</t:tests>