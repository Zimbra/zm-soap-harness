<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test1${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test2${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test3${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="domain1.name" value="Test75010.com"/>
<t:property name="domain1_test.name" value="test75010.com"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AccountSetup" type="always">
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account, 2. Create a mail account </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
              
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
      <t:test >
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>
    
	<t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                 <a n="zimbraChildAccount">${account2.id}</a>
                 <a n="zimbraChildAccount">${account3.id}</a>
                 <a n="zimbraPrefChildVisibleAccount">${account2.id}</a>
                 <a n="zimbraPrefChildVisibleAccount">${account3.id}</a>
                 <a n="zimbraPrefMailTrustedSenderList">${domain1.name}</a>
              
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="bug56645" type="smoke" bugids="56645">
    <t:objective>cannot add/remove child account if another account deleted.</t:objective>
    <t:steps>
    1. Login to ZWC
	2. set up account A to have B C D as childs
	3. delete account B C
	4. Modify account and remove attribute zimbraChildAccount.
    </t:steps>
    <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    
     <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<t:test>
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account2.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <a n="-zimbraChildAccount">${account2.id}</a>
                <a n="-zimbraPrefChildVisibleAccount">${account2.id}</a>
                <a n="-zimbraChildAccount">${account3.id}</a>
                <a n="-zimbraPrefChildVisibleAccount">${account3.id}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
    
        <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <a n="zimbraChildAccount">${account3.id}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="bug75010" type="smoke" bugids="75010">
    <t:objective>Test case to verify bug 75010</t:objective>
    <t:steps>
    1. Login to ZWC
	2. set up zimbraPrefMailTrustedSenderList to Domain1.com
	3. Modify account and edit attribute zimbraPrefMailTrustedSenderList as domain1.com
	4. Verify in response entry for zimbraPrefMailTrustedSenderList is Domain1.com not domain1.com.
    </t:steps>
    <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    
     <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
	    
     <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <a n="+zimbraPrefMailTrustedSenderList">${domain1_test.name}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
    
    <t:test>
			<t:request>
				<GetAccountRequest xmlns="urn:zimbraAdmin" req-attrs="zimbraPrefMailTrustedSenderList">
					<account by="id">${account1.id}</account>
				</GetAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetAccountResponse/admin:account" />
				<t:select path="//admin:GetAccountResponse/admin:account/admin:a[@n='zimbraPrefMailTrustedSenderList']" match="${domain1.name}"/>
				<t:select path="//admin:GetAccountResponse/admin:account/admin:a[@n='zimbraPrefMailTrustedSenderList']" match="${domain1_test.name}" emptyset="1"/>
			</t:response>
	</t:test>
	
	
    
</t:test_case>

<t:test_case testcaseid="bug78539" type="smoke" bugids="75010">
    <t:objective>Out of Office message made all lower case</t:objective>
    <t:steps>
    1. Login to ZWC
	2. Enter OOO message: TESTING OF BUG 75010
	3. Send GetAccountRequest and verify response
    </t:steps>
    <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    
     <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
	    
     <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                 <a n="zimbraPrefOutOfOfficeReply">TESTING OF BUG 75010</a>  
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
    
    <t:test>
			<t:request>
				<GetAccountRequest xmlns="urn:zimbraAdmin" req-attrs="zimbraPrefMailTrustedSenderList">
					<account by="id">${account1.id}</account>
				</GetAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetAccountResponse/admin:account" />
				<t:select path="//admin:GetAccountResponse/admin:account/admin:a[@n='zimbraPrefOutOfOfficeReply']" match="TESTING OF BUG 75010"/>
				<t:select path="//admin:GetAccountResponse/admin:account/admin:a[@n='zimbraPrefOutOfOfficeReply']" match="testing of bug 75010" emptyset="1"/>
			</t:response>
	</t:test>
    
</t:test_case>

</t:tests>


