<t:tests xmlns:t='urn:zimbraTestHarness'>

<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>
<t:property name="test_acct3.server" value="NOT_DEFINED"/>

<!-- these will come from external -->
<!-- <t:property name="admin.uri" value="https://localhost:7071/service/admin/soap/"/> -->
<!--  <t:property name="admin.user" value="admin@slapshot.liquidsys.com"/> -->
<!--  <t:property name="admin.password" value="test123"/> -->

<!-- global properties -->
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<!-- good domain. the domain the newly created domain admin will have access to -->
<t:property name="good.domain.name" value="good.domain${TIME}${COUNTER}.com"/>

<!-- the domain admin user in the good domain -->
<t:property name="domain.admin.user" value="domainadmin@${good.domain.name}"/>
<t:property name="domain.admin.password" value="${TIME}foobar"/>

<!-- good user. an account in the good domain that the domain admin will muck with -->
<t:property name="good.user.name" value="user1@${good.domain.name}"/>
<t:property name="good.user.newName" value="user.new@${good.domain.name}"/>
<t:property name="good.user.alias" value="user.one@${good.domain.name}"/>
<t:property name="good.user.password" value="good${TIME}"/>
<t:property name="good.user.newPassword" value="good${TIME}"/>
<t:property name="good.dl.name" value="dllist@${good.domain.name}"/>
<t:property name="good.dl.newName" value="dllist.new@${good.domain.name}"/>
<t:property name="good.dl.alias" value="dllist.alias@${good.domain.name}"/>

<t:property name="good.user2.name" value="user2@${good.domain.name}"/>

<!-- bad domain. the domain the newly created domain admin doesn't have access to -->
<t:property name="bad.domain.name" value="bad.domain${TIME}${COUNTER}.com"/>

<!-- bad user. an account in the bad domain that the domain admin will try and muck with -->
<t:property name="bad.user.name" value="user1@${bad.domain.name}"/>
<t:property name="bad.user.alias" value="user.one@${bad.domain.name}"/>
<t:property name="bad.user.password" value="bad${TIME}"/>
<t:property name="bad.user.newName" value="user.new@${bad.domain.name}"/>
<t:property name="bad.user.newPassword" value="bad${TIME}"/>
<t:property name="bad.dl.name" value="dllist@${bad.domain.name}"/>
<t:property name="bad.dl.newName" value="dllist.new@${bad.domain.name}"/>
<t:property name="bad.dl.alias" value="dllist.alias@${bad.domain.name}"/>

<!-- bad user. an account in the bad domain that the domain admin will try to create -->
<t:property name="bad2.user.name" value="user1@${bad.domain.name}"/>
<t:property name="bad2.user.password" value="bad${TIME}"/>

<t:property name="user" value="user4@slapshot.liquidsys.com"/>
<t:property name="password" value="test123"/>

<t:property name="good.name" value="foo1234@slapshot.liquidsys.com"/>
<t:property name="good.newName" value="foo1234988@slapshot.liquidsys.com"/>
<t:property name="bad.newName" value="foo1234988@foobar.com"/>
<t:property name="bad.name" value="fooasdfs@foobar.com"/>

<t:property name="RECIPIENT_DOMAIN" value="${defaultpassword.value}"/>
<t:property name="RECIPIENT_ADDRESS" value="${defaultpassword.value}"/>
<t:property name="NEWLINE" value="${defaultpassword.value}"/>
<t:property name="SENDER_ADDRESS" value="${defaultpassword.value}"/>
<t:property name="SUBJECT" value="${defaultpassword.value}"/>
<t:property name="sometext" value="sometext"/>
<t:property name="number" value="1234"/>


<t:test_case testcaseid="acctSetup1_domainAdmin" type="always">
    <t:objective> Create Test domain, accounts, alias and distribution list  </t:objective>

    <!-- authenticate as admin -->
    <t:test id="auth" required="true">
        <t:request>
            <AuthRequest xmlns='urn:zimbraAdmin'>
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <!-- create good and bad domains -->
    <t:test required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${good.domain.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id"  set="good.domain.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${bad.domain.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id"  set="bad.domain.id"/>
        </t:response>
    </t:test>

    <!-- create bad.domain.user -->

    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${bad.user.name}</name>
                <password>${bad.user.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="bad.user.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <!-- create bad.dl.name -->
    <t:test>
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <name>${bad.dl.name}</name>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id"  set="bad.dl.id"/>            
        </t:response>
    </t:test>

    <!-- create domain admin user -->
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${domain.admin.user}</name>
                <password>${domain.admin.password}</password>
                <a n="zimbraIsDelegatedAdminAccount">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="domain.admin.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${good.domain.name}</target>
				<grantee type="usr" by="name">${domain.admin.user}</grantee>
				<right>domainAdminRights</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>

    <t:test id="auth" required="true">
        <t:request>
            <AuthRequest xmlns='urn:zimbraAdmin'>
                <name>${domain.admin.user}</name>
                <password>${domain.admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <!-- create good.domain.user using domain admin -->
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${good.user.name}</name>
                <password>${good.user.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="good.user.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${good.user.name}</account>
                <password>${good.user.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse"/>
        </t:response>
    </t:test>

    <t:test id="auth" required="true">
        <t:request>
            <AuthRequest xmlns='urn:zimbraAdmin'>
                <name>${domain.admin.user}</name>
                <password>${domain.admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>


</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

<t:test_case testcaseid="domainAdmin01" type="smoke">
    <t:objective> Authenticate as domain admin and create account with good domain name </t:objective>

    <!-- create good.domain.user using domain admin -->
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${good.user2.name}</name>
                <password>${good.user.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="good.user2.id"/>
        </t:response>
    </t:test>

</t:test_case>

    
<t:test_case testcaseid="domainAdmin02" type="functional">
    <t:objective>  Create account with bad domain name </t:objective>

    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${bad2.user.name}</name>
                <password>${bad2.user.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin03" type="smoke">
    <t:objective> GetAccountRequest by name/id for account existing in the same domain  </t:objective>

    <t:test>
        <t:request>
            <GetAccountRequest xmlns="urn:zimbraAdmin">
                <account by="name">${good.user.name}</account>
            </GetAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetAccountRequest xmlns="urn:zimbraAdmin">
                <account by="id">${good.user.id}</account>
            </GetAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin04" type="functional">
    <t:objective>  GetAccountRequest by name/id  for account existing in different domain (bad domain user)  </t:objective>
	
	<!-- As per rights.txt Attributes that are not allowed to be get by the authenticated admin  will be returned as 'a n="{attr-name}" pd="1"' -->
    <t:test>
        <t:request>
            <GetAccountRequest xmlns="urn:zimbraAdmin">
                <account by="name">${bad.user.name}</account>
            </GetAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountResponse/admin:account/admin:a[@pd='1']" attr="n" match="zimbra.*[a-z]+"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetAccountRequest xmlns="urn:zimbraAdmin">
                <account by="id">${bad.user.id}</account>
            </GetAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountResponse/admin:account/admin:a[@pd='1']" attr="n" match="zimbra.*[a-z]+"/>
        </t:response>
    </t:test>

</t:test_case>


<!-- ModifyAccount ========================-->

<!--  TODO: should test all attrs that are and aren't in zimbraDomainAdminModifiableAttr
   For all the attrs that aren't, need to do one test per attr. For all attrs that are, can
   do one modify. -->

<t:test_case testcaseid="domainAdmin52" type="functional" bugids="4886, 5073, 36687">
    <t:objective>  ModifyAccountRequest to verify domain admin can change all the account options </t:objective>
    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraPasswordMustChange">${globals.true}</a>
                <a n="zimbraIsDelegatedAdminAccount">${globals.true}</a>
                <a n="givenName">${sometext}</a>
                <a n="initials">${sometext}</a>
                <a n="displayName">${sometext}</a>
                <a n="description">${sometext}</a>
                <a n="zimbraNotes">${sometext}</a>
                <a n="telephoneNumber">${sometext}</a>
                <a n="company">${sometext}</a>
                <a n="ou">${sometext}</a>
                <a n="physicalDeliveryOfficeName">${sometext}</a>
                <a n="postalAddress">${sometext}</a>
                <a n="l">${sometext}</a>
                <a n="st">${sometext}</a>
                <a n="postalCode">${sometext}</a>
                <a n="co">${sometext}</a>
                <a n="zimbraMailForwardingAddress">sffdfasf@liouou.kj</a>
                <!--a n="zimbraFeatureCalendarEnabled">TRUE</a-->
                <!--a n="zimbraPasswordModifiedTime">20050529053842Z</a-->
                <a n="zimbraPrefMailInitialSearch">in:inbox</a>
                <a n="zimbraPop3Enabled">TRUE</a>
                <a n="zimbraImapEnabled">TRUE</a>
                <!--a n="zimbraContactMaxNumEntries">0</a-->
                <a n="zimbraNewMailNotificationBody">New message received at ${RECIPIENT_ADDRESS}.${NEWLINE}Sender: ${SENDER_ADDRESS}${NEWLINE}Subject: ${SUBJECT}</a>
                <!--a n="zimbraFeatureGalEnabled">TRUE</a-->
                <a n="zimbraPrefSentMailFolder">sent</a>
                <a n="zimbraPasswordMaxAge">0</a>
                <a n="zimbraNewMailNotificationSubject">New message received at ${RECIPIENT_ADDRESS}</a>
                <a n="zimbraPasswordEnforceHistory">0</a>
                <a n="zimbraMailStatus">enabled</a>
                <a n="zimbraPasswordMinLength">6</a>
                <a n="zimbraMailTrashLifetime">7d</a>
                <a n="zimbraMailIdleSessionTimeout">0</a>
                <!--a n="zimbraFeatureTaggingEnabled">TRUE</a-->
                <!--a n="zimbraMailQuota">0</a-->
                <a n="givenName">yttyy</a>
                <a n="zimbraMailMessageLifetime">0</a>
                <!--a n="zimbraFeatureChangePasswordEnabled">TRUE</a-->
                <a n="zimbraMailMinPollingInterval">2m</a>
                <!-- <a n="userPassword">VALUE-BLOCKED</a> -->
                <!-- <a n="uid">test.1117345120686.1</a> -->
                <a n="zimbraPrefReplyIncludeOriginalText">includeBody</a>
                <!-- <a n="mail">test.1117345120686.1@example.persistent.co.in</a> -->
                <a n="zimbraPrefForwardIncludeOriginalText">includeBody</a>
                <!-- <a n="zimbraId">ea89f84b-d003-11d9-87f6-df6db5a066b7</a> -->
                <!-- <a n="zimbraMailDeliveryAddress">test.1117345120686.1@example.persistent.co.in</a> -->
                <!--a n="zimbraFeatureFiltersEnabled">TRUE</a-->
                <a n="zimbraPrefSaveToSent">TRUE</a>
                <a n="zimbraAdminAuthTokenLifetime">12h</a>
                <a n="zimbraAttachmentsViewInHtmlOnly">FALSE</a>
                <a n="zimbraAttachmentsBlocked">FALSE</a>
                <a n="zimbraPrefMessageViewHtmlPreferred">TRUE</a>
                <!--a n="zimbraFeatureSavedSearchesEnabled">TRUE</a-->
                <!-- <a n="zimbraMailHost">example.persistent.co.in</a> -->
                <!--a n="zimbraFeatureContactsEnabled">TRUE</a-->
                <!-- <a n="objectClass">organizationalPerson</a> -->
                <!-- <a n="objectClass">zimbraAccount</a> -->
                <a n="zimbraPrefIncludeSpamInSearch">FALSE</a>
                <a n="zimbraPrefMailItemsPerPage">25</a>
                <a n="zimbraPasswordMinAge">0</a>
                <a n="zimbraPrefContactsPerPage">25</a>
                <a n="zimbraAccountStatus">active</a>
                <a n="zimbraMailSpamLifetime">7d</a>
                <a n="zimbraPrefAutoAddAddressEnabled">FALSE</a>
                <a n="zimbraPrefMailSignatureStyle">internet</a>
                <!--a n="zimbraFeatureConversationsEnabled">TRUE</a-->
                <!--a n="zimbraFeatureAdvancedSearchEnabled">TRUE</a-->
                <a n="zimbraPasswordLocked">FALSE</a>
                <a n="zimbraPrefGroupMailBy">conversation</a>
                <a n="zimbraPrefIncludeTrashInSearch">FALSE</a>
                <!--a n="zimbraFeatureInitialSearchPreferenceEnabled">TRUE</a-->
                <a n="zimbraAuthTokenLifetime">12h</a>
                <a n="zimbraAttachmentsIndexingEnabled">TRUE</a>
                <a n="zimbraPasswordMaxLength">64</a>
                <a n="zimbraPrefDedupeMessagesSentToSelf">dedupeNone</a>
                <a n="zimbraPrefForwardReplyPrefixChar">&gt;</a>
                <a n="zimbraPrefMailPollingInterval">5m</a>
                <a n="sn">test.1117345120686.1</a>
                <a n="cn">test.1117345120686.1</a>
                <a n="zimbraPrefUseKeyboardShortcuts">FALSE</a>
                <a n="zimbraNewMailNotificationFrom">Notification &lt;notify@${RECIPIENT_DOMAIN}&gt;</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>

</t:test_case> 

<!-- moving tc here so that delete account occurs after this --> 

<t:test_case testcaseid="domainAdmin55" type="functional" bugids="27875">
    <t:objective> verify domainadmin can change attribute "zimbraPrefMailLocalDeliveryDisabled" </t:objective>

 <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraPrefMailLocalDeliveryDisabled">${globals.true}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="domainAdmin56" type="functional" bugids="39043">
    <t:objective> Verify attribute "zimbraFeatureMobileSyncEnabled" is domainAdminModifiable </t:objective>

 <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraFeatureMobileSyncEnabled">${globals.true}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="domainAdmin53" type="functional">
    <t:objective>  ModifyAccountRequest to verify domain admin cannot change the attribute that aren't in zimbraDomainAdminModifiableAttr </t:objective>
    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="userPassword">VALUE-BLOCKED</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="uid">test.1117345120686.1</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="mail">test.1117345120686.1@example.persistent.co.in</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraId">ea89f84b-d003-11d9-87f6-df6db5a066b7</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraMailDeliveryAddress">test.1117345120686.1@example.persistent.co.in</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraMailHost">example.persistent.co.in</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="objectClass">organizationalPerson</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>
  
    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraPasswordModifiedTime">20050529053842Z</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraMailQuota">0</a> 
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case> 

<t:test_case testcaseid="domainAdmin54" type="functional" bugids="26458">
    <t:objective> domain admin should not have access to write zimbraFeature </t:objective>

<t:steps>
	zimbraContactMaxNumEntries
	zimbraIdentityMaxNumEntries
	zimbraDataSourceMaxNumEntries
	zimbraMailSignatureMaxLength
	zimbraNotebookMaxRevisions
	zimbraSignatureMaxNumEntries
</t:steps>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraContactMaxNumEntries">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraIdentityMaxNumEntries">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraDataSourceMaxNumEntries">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraMailSignatureMaxLength">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraNotebookMaxRevisions">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraSignatureMaxNumEntries">${number}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case> 


<t:test_case testcaseid="domainAdmin05" type="smoke">
    <t:objective> ModifyAccountRequest to modify account existing in the same domain (good domain user) </t:objective>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraIsAdminAccount">TRUE</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>

    
<t:test_case testcaseid="domainAdmin06" type="functional">
    <t:objective> ModifyAccountRequest to modify attributes which are not allowed to modify  </t:objective>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraNotes">testing</a>
                <a n="zimbraMailQuota">0</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>
    

<t:test_case testcaseid="domainAdmin07" type="smoke">
    <t:objective> ModifyAccountRequest to modify attributes which are allowed to modify  </t:objective>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraIsDomainAdminAccount">TRUE</a>
                <a n="zimbraIsDelegatedAdminAccount">TRUE</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <a n="zimbraNotes">testing</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin08" type="functional">
    <t:objective> ModifyAccountRequest to modify account existing in different domain (bad domain user) </t:objective>

    <t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
                <a n="zimbraNotes">testing</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin09" type="smoke">
    <t:objective>  RenameAccountRequest with new name as valid (good domain user's id) </t:objective>

    <t:test>
        <t:request>
            <RenameAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <newName>${good.user.newName}</newName>
            </RenameAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:RenameAccountResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin10" type="functional">
    <t:objective> RenameAccountRequest with new name as invalid (bad domain user's id)  </t:objective>

    <t:test>
        <t:request>
            <RenameAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <newName>${bad.user.newName}</newName>
            </RenameAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin11" type="smoke">
    <t:objective> SetPassword of the account existing in the same domain (good domain user's id)</t:objective>

    <t:test>
        <t:request>
            <SetPasswordRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <newPassword>${good.user.newPassword}</newPassword>
            </SetPasswordRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SetPasswordResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin12" type="functional">
    <t:objective>  Try to SetPassword of the account existing in the different domain (bad domain user's id) </t:objective>

    <t:test>
        <t:request>
            <SetPasswordRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
                <newPassword>${good.user.newPassword}</newPassword>
            </SetPasswordRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin13" type="smoke">
    <t:objective> Add account alias with alias name as valid (good domain user's id) </t:objective>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <alias>${good.user.alias}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin14" type="functional">
    <t:objective> Add account alias with alias name as invalid (bad domain user's id) </t:objective>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <alias>${bad.user.alias}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin15" type="functional">
    <t:objective> Try to add alias to an account which belongs to different domain (bad domain user's id) </t:objective>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
                <alias>${bad.user.alias}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin16" type="functional">
    <t:objective> AddAccountAliasRequest with id of account in different domain (bad domain user's id)  </t:objective>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
                <alias>${good.user.alias}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin17" type="smoke">
    <t:objective> RemoveAccountAliasRequest with id existing in the same domain and alias name as valid </t:objective>

    <t:test>
        <t:request>
            <RemoveAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <alias>${good.user.alias}</alias>
            </RemoveAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:RemoveAccountAliasResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin18" type="functional">
    <t:objective>  RemoveAccountAliasRequest with id existing in the same domain and alias name as invalid  </t:objective>

    <t:test>
        <t:request>
            <RemoveAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
                <alias>nonexistantalias@${good.domain.name}</alias>
            </RemoveAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="account.NO_SUCH_ALIAS"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin19" type="functional">
    <t:objective> RemoveAccountAliasRequest with id of an account existing in different domain (bad domain user's id) </t:objective>

    <t:test>
        <t:request>
            <RemoveAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
                <alias>${bad.user.alias}</alias>
            </RemoveAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin20" type="smoke">
    <t:objective> SearchAccountRequest with zimbraId of an account existing in the same domain (good domain user's id) </t:objective>

    <t:test>
        <t:request>
            <SearchAccountsRequest xmlns="urn:zimbraAdmin">
                <query>(zimbraId=${good.user.id})</query>
            </SearchAccountsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchAccountsResponse"/>
            <t:select path="//admin:SearchAccountsResponse" attr="searchTotal"  match="^1$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin21" type="functional">
    <t:objective> SearchAccountRequest with zimbraId of an account existing in the different domain (bad domain user's id)  </t:objective>

    <t:test>
        <t:request>
            <SearchAccountsRequest xmlns="urn:zimbraAdmin">
                <query>(zimbraId=${bad.user.id})</query>
            </SearchAccountsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchAccountsResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin22" type="functional">
    <t:objective> SearchAccountRequest with attr "domain" as invalid (bad domain user's id)  </t:objective>

    <t:test>
        <t:request>
            <SearchAccountsRequest xmlns="urn:zimbraAdmin" domain="${bad.domain.name}">
                <query>(zimbraId=${good.user.id})</query>
            </SearchAccountsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchAccountsResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="domainAdmin23" type="smoke">
    <t:objective> GetAllAccountsRequest to verify it is working </t:objective>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

        <t:test>
                <t:request>
                        <GetAccountRequest xmlns="urn:zimbraAdmin">
                                <account by="name">${admin.user}</account>
                        </GetAccountRequest>
                </t:request>
                <t:response>
                   <t:select path="//admin:GetAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account1.server"/>
                </t:response>
        </t:test>

        <t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test>
        <t:request>
            <GetAllAccountsRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllAccountsResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="domainAdmin24" type="functional">
    <t:objective> GetAllAccountsRequest with domain name as invalid (by bad domain user's name) </t:objective>

    <t:test>
        <t:request>
            <GetAllAccountsRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${bad.domain.name}</domain>
            </GetAllAccountsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllAccountsResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin25" type="smoke">
    <t:objective> ReIndexRequest with good domain user's id </t:objective>

    <t:test>
        <t:request>
            <ReIndexRequest xmlns="urn:zimbraAdmin" action="start">
               <mbox id="${good.user.id}"/>   
            </ReIndexRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ReIndexResponse" attr="status" match="started"/>
        </t:response>
    </t:test>

    <t:delay sec="15"/>

</t:test_case>


<t:test_case testcaseid="domainAdmin26" type="functional">
    <t:objective> ReIndexRequest  with mbox id of account existing in different domain (bad domain user's id)  </t:objective>

    <t:test>
        <t:request>
            <ReIndexRequest xmlns="urn:zimbraAdmin" action="status">
                <mbox id="${bad.user.id}"/>
            </ReIndexRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin27" type="functional">
    <t:objective>DeleteMailboxRequest with id of account existing in different domain (bad domain user's id) </t:objective>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test>
        <t:request>
            <DeleteMailboxRequest xmlns="urn:zimbraAdmin" action="status">
                <mbox id="${bad.user.id}"/>
            </DeleteMailboxRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin28" type="smoke">
    <t:objective> GetMailboxRequest of account existing on the same domain (good domain user's id) </t:objective>

<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>

    <t:test>
        <t:request>
            <GetMailboxRequest xmlns="urn:zimbraAdmin" action="status">
                <mbox id="${good.user.id}"/>
            </GetMailboxRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetMailboxResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin29" type="functional">
    <t:objective> GetMailboxRequest with id of account existing on diffrent domain (bad domain user's id) </t:objective>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test>
        <t:request>
            <GetMailboxRequest xmlns="urn:zimbraAdmin" action="status">
                <mbox id="${bad.user.id}"/>
            </GetMailboxRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin30" type="smoke">
    <t:objective> CreateDistributionListRequest with valid name (good domain user's id) </t:objective>

    <t:test>
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <name>${good.dl.name}</name>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id"  set="good.dl.id"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin31" type="functional">
    <t:objective> CreateDistributionListRequest with different domain name (bad domain user's name)  </t:objective>

    <t:test>
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <name>${bad.dl.name}</name>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin32" type="smoke">
    <t:objective> GetDistributionListRequest for DL existing in the same domain (by name/id)</t:objective>

    <t:test>
        <t:request>
            <GetDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <dl by="name">${good.dl.name}</dl>
            </GetDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDistributionListResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <dl by="id">${good.dl.id}</dl>
            </GetDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDistributionListResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin33" type="functional">
    <t:objective>  GetDistributionListRequest for DL existing in different domain (by name/id)  </t:objective>

    <t:test>
        <t:request>
            <GetDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <dl by="name">${bad.dl.name}</dl>
            </GetDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDistributionListResponse/admin:dl/admin:a[@pd='1']" attr="n" match="zimbra.*[a-z]+"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDistributionListRequest xmlns="urn:zimbraAdmin" action="status">
                <dl by="id">${bad.dl.id}</dl>
            </GetDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDistributionListResponse/admin:dl/admin:a[@pd='1']" attr="n" match="zimbra.*[a-z]+"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin34" type="smoke">
    <t:objective>  GetAllDistributionListsRequest for sanity check </t:objective>

    <t:test>
        <t:request>
            <GetAllDistributionListsRequest xmlns="urn:zimbraAdmin" action="status">
            </GetAllDistributionListsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllDistributionListsResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin35" type="functional">
    <t:objective> GetAllDistributionListsRequest with domain name as invalid (bad domain user) </t:objective>

    <t:test>
        <t:request>
            <GetAllDistributionListsRequest xmlns="urn:zimbraAdmin" action="status">
                <domain by="name">${bad.domain.name}</domain>
            </GetAllDistributionListsRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllDistributionListsResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin36" type="smoke">
    <t:objective> AddDistributionListMember with valid name (good domain dl) </t:objective>

    <t:test>
        <t:request>
            <AddDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <dlm>${good.user.name}</dlm>
            </AddDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddDistributionListMemberResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin37" type="functional">
    <t:objective>AddDistributionListMember to DL existing in different domain (bad domain dl) </t:objective>

    <t:test>
        <t:request>
            <AddDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <dlm>${good.user.name}</dlm>
            </AddDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin38" type="smoke">
    <t:objective>  RemoveDistributionListMember existing in the same domain (good domain dl)</t:objective>

    <t:test>
        <t:request>
            <RemoveDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <dlm>${good.user.name}</dlm>
            </RemoveDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:RemoveDistributionListMemberResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin39" type="functional">
    <t:objective> RemoveDistributionListMemberRequest with invalid id (bad domain dl) </t:objective>

    <t:test>
        <t:request>
            <RemoveDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <dlm>${good.user.name}</dlm>
            </RemoveDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin40" type="smoke" bugids="36687">
    <t:objective> ModifyDistributionList with valid values (good domain dl) </t:objective>

    <t:test>
        <t:request>
            <ModifyDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <a n="zimbraNotes">test</a>
            </ModifyDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyDistributionListResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin41" type="functional">
    <t:objective> ModifyDistributionList existing in different domain (bad domain dl) </t:objective>

    <t:test>
        <t:request>
            <ModifyDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <a n="zimbraNotes">test</a>
            </ModifyDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin42" type="smoke">
    <t:objective> AddDistributionListAlias to DL existing in the same domain (good domain dl)  </t:objective>

    <t:test>
        <t:request>
            <AddDistributionListAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <alias>${good.dl.alias}</alias>
            </AddDistributionListAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddDistributionListAliasResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin43" type="functional">
    <t:objective> AddDistributionListAlias to DL existing in the different domain (bad domain dl) </t:objective>

    <t:test>
        <t:request>
            <AddDistributionListAliasRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <alias>${good.dl.alias}</alias>
            </AddDistributionListAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin44" type="smoke">
    <t:objective> RemoveDistributionListAlias from DL existing in the same domain (good domain dl) </t:objective>

    <t:test>
        <t:request>
            <RemoveDistributionListAliasRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <alias>${good.dl.alias}</alias>
            </RemoveDistributionListAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:RemoveDistributionListAliasResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin45" type="functional">
    <t:objective> RemoveDistributionListAlias from DL existing in the different domain (bad domain dl) </t:objective>

    <t:test>
        <t:request>
            <RemoveDistributionListAliasRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <alias>${good.dl.alias}</alias>
            </RemoveDistributionListAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin46" type="smoke">
    <t:objective> RenameDistributionList existing in the same domain (good domain dl) </t:objective>

    <t:test>
        <t:request>
            <RenameDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
                <newName>${good.dl.newName}</newName>
            </RenameDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:RenameDistributionListResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin47" type="functional">
    <t:objective> RenameDistributionList existing in the different domain (bad domain dl)</t:objective>

    <t:test>
        <t:request>
            <RenameDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
                <newName>${bad.dl.newName}</newName>
            </RenameDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin48" type="smoke">
    <t:objective> DeleteDistributionListRequest with dl existing in the same domain (good domain dl)</t:objective>

    <t:test>
        <t:request>
            <DeleteDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${good.dl.id}</id>
            </DeleteDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDistributionListResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin49" type="functional">
    <t:objective> DeleteDistributionListRequest with dl existing in different domain (bad domain dl)</t:objective>

    <t:test>
        <t:request>
            <DeleteDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${bad.dl.id}</id>
            </DeleteDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin50" type="smoke">
    <t:objective> Delete account existing in the same domain </t:objective>

    <!-- delete good user using domain admin -->
<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>

    <t:test>
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${good.user.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="domainAdmin51" type="functional">
    <t:objective> Delete account existing in the different domain </t:objective>

    <!-- try and delete bad user using domain admin -->
<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test>
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${bad.user.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>
