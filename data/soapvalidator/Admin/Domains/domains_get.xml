<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain1.name" value="test${TIME}${COUNTER}"/>
<t:property name="domain2.name" value="test${TIME}${COUNTER}"/>
<t:property name="domain3.name" value="test${TIME}${COUNTER}"/>

<t:property name="domain.space" value="    "/>
<t:property name="domain.blank" value=""/>
<t:property name="domain.spchar" value="//\\?|^-'"/>
<t:property name="domain.sometext" value="some text"/>
<t:property name="domain.negative" value="-1"/>
<t:property name="domain.zero" value="0"/>
<t:property name="domain.largeNumber" value="1112223333"/>
<t:property name="ldap.zimbraAuthLdapURL1" value = "ldap://ldap1.com" />
<t:property name="ldap.zimbraAuthLdapURL2" value = " ldap://ldap2.com" />

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>
    
	<t:test id="ping" required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>
    
</t:test_case>


<t:test_case testcaseid="acctSetup_domains_get" type="always" >
	<t:objective>Login to Admin Account</t:objective>
    
	<t:test id="admin_login" required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
                <a n="zimbraNotes">test of adding via SOAP</a>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id"  set="domain1.id"/>
        </t:response>        
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain2.name}</name>
                <a n="zimbraNotes">test domain2 of adding via SOAP</a>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id"  set="domain2.id"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain3.name}</name>
                <a n="zimbraAuthLdapURL">${ldap.zimbraAuthLdapURL1}</a>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id"  set="domain3.id"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <ModifyDomainRequest xmlns="urn:zimbraAdmin">
                <id>${domain3.id}</id>
                <a n="+zimbraAuthLdapURL">${ldap.zimbraAuthLdapURL2}</a>
            </ModifyDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyDomainResponse/admin:domain"/>
		</t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchDirectoryRequest1" type="smoke" areas="dev_sanity">
	<t:objective> Search Directory Request </t:objective>
  
	<t:test>
		<t:request>
			<SearchDirectoryRequest xmlns="urn:zimbraAdmin" offset="0" sortBy="zimbraDomainName" sortAscending="1" types="domains">
				<query/>
			</SearchDirectoryRequest>
		</t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:domain[@name='${domain1.name}']" attr="id"  match="^${domain1.id}$"/>
            <t:select path="//admin:SearchDirectoryResponse/admin:domain[@name='${domain2.name}']" attr="id"  match="^${domain2.id}$"/>
 		</t:response>
	</t:test>
</t:test_case>

<t:test_case testcaseid="GetDomainRequest1" type="smoke" areas="dev_sanity">
	<t:objective> Get domain by id</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain1.id}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//admin:GetDomainResponse/admin:domain" attr="id"  match="^${domain1.id}$"/>
        </t:response>
    </t:test>

</t:test_case>

    
<t:test_case testcaseid="GetDomainRequest2" type="smoke" areas="dev_sanity">
	<t:objective> Get domain by id (applyConfig=0)</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="0">
                <domain by="id">${domain1.id}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//admin:GetDomainResponse/admin:domain" attr="id"  match="^${domain1.id}$"/>
        </t:response>
    </t:test>
    
</t:test_case>
    
    
<t:test_case testcaseid="GetDomainRequest3" type="smoke" areas="dev_sanity">
	<t:objective> Get domain by name </t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//admin:GetDomainResponse/admin:domain" attr="name"  match="^${domain1.name}$"/>
        </t:response>
    </t:test>

</t:test_case>
    
   
<t:test_case testcaseid="GetDomainRequest4" type="smoke" areas="dev_sanity">
	<t:objective> Get domain by name (applyConfig=0)</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="0">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//admin:GetDomainResponse/admin:domain" attr="name"  match="^${domain1.name}$"/>
        </t:response>
    </t:test>

</t:test_case>
    
    
<t:test_case testcaseid="GetDomainRequest5" type="negative">
	<t:objective> Get  a deleted Domains</t:objective>
    <t:steps>1. Delete a domain
             2. Get the deleted domain by id
             3. Get the deleted domain by name
             4. Verify the deleted domain in SearchDirectory Request
    </t:steps>

    <t:test id="getDomainRequest5a">
        <t:request>
            <DeleteDomainRequest xmlns="urn:zimbraAdmin">
                <id>${domain2.id}</id>
            </DeleteDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDomainResponse"/>
        </t:response>        
    </t:test>
    
    <t:test depends="getDomainRequest5a">
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain2.id}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test depends="getDomainRequest5a">
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain2.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

	<t:test depends="getDomainRequest5a">
		<t:request>
			<SearchDirectoryRequest xmlns="urn:zimbraAdmin" offset="0" sortBy="zimbraDomainName" sortAscending="1" types="domains">
				<query/>
			</SearchDirectoryRequest>
		</t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:domain[@name='${domain2.name}']" attr="id"  match="^${domain2.id}$" emptyset="1"/>
		</t:response>
	</t:test>
</t:test_case>

    
<t:test_case testcaseid="GetDomainRequest6" type="negative">
	<t:objective>GetDomainRequest with invalid values for applyConfig (Negative/LargeNumber/blank/Spaces/Sometext/Special character)</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.negative}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.largeNumber}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.blank}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.space}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.sometext}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="${domain.spchar}">
                <domain by="name">${domain1.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>    

</t:test_case>
    
   
<t:test_case testcaseid="GetDomainRequest7" type="negative">
	<t:objective>GetDomainRequest with invalid values for name (Blank/Sometext/Special character)</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain.blank}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain.sometext}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain.spchar}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>    

</t:test_case>
    
   
<t:test_case testcaseid="GetDomainRequest8" type="negative">
	<t:objective>GetDomainRequest with invalid values for id (NEgative/Zero/Large Number/Blank/Sometext/Special character)</t:objective>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.negative}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.zero}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.largeNumber}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.blank}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.sometext}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="id">${domain.spchar}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^account.NO_SUCH_DOMAIN$"/>
        </t:response>
    </t:test>
    
</t:test_case>
    
    
<t:test_case testcaseid="GetDomainRequest9" type="negative">
	<t:objective> GetDomainRequest without domain element</t:objective>
  
    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="0">                
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="GetDomainRequest10" type="smoke" bugids="ZBUG-201">
	<t:objective> GetDomainRequest when zimbraAuthLdapURL is space separated list </t:objective>

    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin" applyConfig="0">
            	<domain by="id">${domain3.id}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDomainResponse/admin:domain" attr="name"  match="^${domain3.name}$"/>
            <t:select path="//admin:GetDomainResponse/admin:domain/admin:a[@n='zimbraAuthLdapURL']" match="${ldap.zimbraAuthLdapURL1} ${ldap.zimbraAuthLdapURL2}"/>
        </t:response>
    </t:test>

</t:test_case>
    
</t:tests>

