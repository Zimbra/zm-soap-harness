<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="Resource.equipment" value="Equipment"/>
<t:property name="Resource.location" value="Location"/>
<t:property name="active" value="active"/>

<t:property name="domain.name1" value="domain1${TIME}${COUNTER}"/>
<t:property name="account1.name" value="test1.${TIME}.${COUNTER}@${domain.name1}"/>
<t:property name="account2.name" value="test2.${TIME}.${COUNTER}@${domain.name1}"/>

<t:property name="domain.name2" value="domain2${TIME}${COUNTER}"/>
<t:property name="account3.name" value="test3.${TIME}.${COUNTER}@${domain.name2}"/>

<t:property name="displayName1" value="TestName1.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="displayName2" value="TestName2.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="description" value="Test Name"/>
<t:property name="zimbraNotes" value="Test Name"/>
<t:property name="building" value="Test Building"/>
<t:property name="floor" value="Test Floor"/>
<t:property name="room" value="Test Room"/>
<t:property name="street" value="Test Name"/>
<t:property name="city" value="Test City"/>
<t:property name="state" value="Test STATE"/>
<t:property name="country" value="Test Country"/>
<t:property name="postalcode" value="Test Name"/>

<t:property name="alias.name" value="Alias1.${TIME}.${COUNTER}@${domain.name1}"/>
<t:property name="alias1.name" value="Alias2.${TIME}.${COUNTER}@${domain.name1}"/> 
<t:property name="list1" value="list1@${domain.name1}"/>
<t:property name="cos.name" value="testcos${TIME}${COUNTER}"/>
<t:property name="invalid.domain" value="invalid_domain"/>


<t:property name="Resource.name1" value="testResource1.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="Resource.name2" value="testResource2.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="Resource.name3" value="testResource3.${TIME}${COUNTER}@${domain.name1}"/>
<t:property name="displayName3" value="TestName3.${TIME}${COUNTER}@${domain.name1}"/>
<t:property name="Resource.name4" value="testResource4.${TIME}${COUNTER}@${domain.name1}"/>
<t:property name="displayName4" value="TestName4.${TIME}${COUNTER}@${domain.name1}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:test_case testcaseid="AcctSetup01" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="AcctSetup02" type="always" >
    <t:objective>Set up test case for creating account and domain. </t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>

	<t:test id="CreateDomainRequest1">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name1}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>
    
    <t:test id="CreateDomainRequest2">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name2}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain2.id"/>
        </t:response>
    </t:test>
    
 </t:test_case>


<t:test_case testcaseid="CountObjectsRequest1" type="bhr">
  <t:objective>Verify CountObjectsRequest for account in particular domain.</t:objective>
    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="account" xmlns="urn:zimbraAdmin">
              <domain by="name">${domain.name1}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//admin:CountObjectsResponse" attr="num" match="2" />  	
        </t:response>
	</t:test>
	
</t:test_case>


<t:test_case testcaseid="CountObjectsRequest2" type="bhr">
    <t:objective>Verify CountObjectsRequest no account created in particular domain.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="account" xmlns="urn:zimbraAdmin">
              <domain by="name">${domain.name2}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//admin:CountObjectsResponse" attr="num" match="0" />  	
        </t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="CountObjectsRequest3" type="bhr">
    <t:objective>Verify CountObjectsRequest no alias created in particular domain.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="alias" xmlns="urn:zimbraAdmin">
              <domain by="name">${domain.name1}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//admin:CountObjectsResponse" attr="num" match="0" />  	
        </t:response>
	</t:test>
	
</t:test_case>


<t:test_case testcaseid="CountObjectsRequest4" type="bhr">
    <t:objective>Verify CountObjectsRequest for alias in particular domain.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <alias>${alias.name}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>  
    
    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${account2.id}</id>
                <alias>${alias1.name}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>  
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="alias" xmlns="urn:zimbraAdmin">
              <domain by="name">${domain.name1}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//admin:CountObjectsResponse" attr="num" match="2" />  	
        </t:response>
	</t:test>
	
</t:test_case>

<t:test_case testcaseid="CountObjectsRequest5" type="bhr">
    <t:objective>Verify CountObjectsRequest for  distribution list in particular domain.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin">
                <name>${list1}</name>
                <a n="description">A test distribution list</a>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id" set="list1.id"/>
        </t:response>
    </t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="dl" xmlns="urn:zimbraAdmin">
              <domain by="name">${domain.name1}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//admin:CountObjectsResponse" attr="num" match="1" />  	
        </t:response>
	</t:test>
	
</t:test_case>

<t:test_case testcaseid="CountObjectsRequest6" type="bhr">
    <t:objective>Verify CountObjectsRequest with cos. error: invalid request: domain cannot be specified for type: cos</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="cos" xmlns="urn:zimbraAdmin">
              <domain by="name">${defaultdomain.name}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>	
        </t:response>
	</t:test>
	
</t:test_case>

<t:test_case testcaseid="CountObjectsRequest7" type="bhr">
    <t:objective>Verify CountObjectsRequest with blank domain.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="cos" xmlns="urn:zimbraAdmin">
              <domain by="name"> </domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>	
        </t:response>
	</t:test>

	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="cos" xmlns="urn:zimbraAdmin">
              <domain by="name">${invalid.domain}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>	
        </t:response>
	</t:test>
	
</t:test_case>


<t:test_case testcaseid="CountObjectsRequest8" type="bhr">
    <t:objective>Verify CountObjectsRequest with invalid and blank by attribute.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="cos" xmlns="urn:zimbraAdmin">
              <domain by="">${defaultdomain.name}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>	
        </t:response>
	</t:test>
	
	<t:test required="true">
        <t:request>
            <CountObjectsRequest type="cos" xmlns="urn:zimbraAdmin">
              <domain by="invalid_by">${defaultdomain.name}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>	
        </t:response>
	</t:test>
	
</t:test_case>

<t:test_case testcaseid="CountObjectsRequest8" type="bhr">
    <t:objective>Verify CountObjectsRequest with invalid object type.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CountObjectsRequest type="calresource1" xmlns="urn:zimbraAdmin">
            </CountObjectsRequest>
           </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>   
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CountObjectsRequest type="calresource1" xmlns="urn:zimbraAdmin">
              <domain by="invalid_by">${defaultdomain.name}</domain>
            </CountObjectsRequest>
           </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST"/>   
        </t:response>
    </t:test>
    
</t:test_case>
</t:tests>