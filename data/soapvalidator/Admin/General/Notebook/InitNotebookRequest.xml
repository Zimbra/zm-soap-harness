<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain1.name" value="${TIME}.${COUNTER}.${defaultdomain.name}"/>
<t:property name="account1.name" value="test${TIME}.${COUNTER}@${domain1.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Basic Check" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="InitNotebookRequest_AccountSetup" type="always" >
    <t:objective>Login into Admin and check the Dump Sessions Request</t:objective>
	<t:steps>
			1. Login into admin.
			2. Create a test account.
			3. Check the Request.
	</t:steps>

	<t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="InitNotebookRequest_01" type="deprecated" bugids="8482" >
    <t:objective>Verify folder permissions that are set by user override default permissions</t:objective>
    <t:steps>
    1. Login as admin
    2. Create a new domain
    3. Initialize the domain notebook to a user's template folder
    4. Change the permissions (pub and dom) on the template folder
    5. Get the folder - the pub and dom permissions should reflect what the user set.
    </t:steps>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>    
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test> 

	<t:test >
        <t:request>
			<InitNotebookRequest xmlns="urn:zimbraAdmin">
				<template dest="Template">/opt/zimbra/wiki/Template</template>
				<name password="${defaultpassword.value}">${account1.name}</name>
				<domain by="name">${domain1.name}</domain>
			</InitNotebookRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:InitNotebookResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>
			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse">
            	<t:select path="//mail:folder[@name='Template']" attr="id" set="account1.folder.template.id"/>
            </t:select>
        </t:response>
	</t:test>

	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>
			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.template.id}" op="grant">
                	<grant gt="dom" d="${domain1.name}" perm="rwi"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
	</t:test>

	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>
			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.template.id}" op="grant">
                	<grant gt="pub" perm="rwi"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
	</t:test>

	<t:test>
		<t:requestContext>
			<authToken>${authToken}</authToken>
			<account by="id">${account1.id}</account>
		</t:requestContext>
		<t:request> 
			<GetFolderRequest xmlns="urn:zimbraMail">
				<folder l="${account1.folder.template.id}"/>
			</GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse">
            	<t:select path="//mail:folder[@id='${account1.folder.template.id}']">
            		<t:select path="//mail:grant[@gt='pub']" attr="perm" match="rwi"/>
            		<t:select path="//mail:grant[@gt='pub']" attr="perm" match="^r$" emptyset="1"/>
            		<t:select path="//mail:grant[@gt='dom']" attr="perm" match="rwi"/>
            	</t:select>
            </t:select>
        </t:response>
	</t:test>

</t:test_case>


</t:tests>