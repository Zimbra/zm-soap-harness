<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="account1.name" value="queue${TIME}${COUNTER}@${defaultdomain.name}"/>

	
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MailQueueActionRequest_DetermineMTA" type="always" areas="noncluster">
    <t:objective>Login as the admin.  Determine the MTA server.</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="name">${admin.user}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" attr="id"  set="admin.id"/>
			<t:select path='//admin:GetAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="admin.server"/>
		</t:response>
    </t:test>

    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${admin.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetServerResponse/admin:server/admin:a[@n='zimbraSmtpHostname']" set="mta.server"/>
		</t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns = "urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:finally areas="virus,mta,noncluster">

	<t:property name="postfix.check" value="true"/>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'source /opt/zimbra/.bashrc;/opt/zimbra/bin/zmamavisdctl start\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmailboxdctl}</params>
		</t:request>
	</t:staftask>

</t:finally>

<t:test_case testcaseid="MailQueueActionRequest_01" type="bhr" bugids="50878" areas="virus,mta, noncluster">
    <t:objective>Sanity check of MailQueueActionRequest</t:objective>
    <t:steps>
    1. Stop amavis so messages will be queued
    2. Login as account1, send a message
    3. Wait 15 seconds to make sure the message is in the queue
    4. Send GetMailQueueRequest with scan="1" to rescan
    5. Loop on GetMailQueueRequest until scan="0"
    6. Send GetMailQueueRequest (scan=0) to get the message ID
    7. Send MailQueueActionRequest to delete the message - verify the message is deleted
    </t:steps>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'source /opt/zimbra/.bashrc;/opt/zimbra/bin/zmamavisdctl stop\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmailboxdctl}</params>
		</t:request>
	</t:staftask>

	<t:property name="postfix.check" value="false"/>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:property name="message.subject" value="subject${TIME}${COUNTER}"/>

	<t:test >
  		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a="${account1.name}"/>
					<su>${message.subject}</su>
					<mp ct="text/plain">
	    				<content>content${TIME}${COUNTER}</content>
					</mp>
     			</m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
         	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>

	<t:delay msec="15000"/>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
    		<GetMailQueueRequest xmlns="urn:zimbraAdmin">
      			<server name="${mta.server}">
        			<queue name="deferred" scan="1">
          				<query limit="25" offset="0"/>
        			</queue>
      			</server>
			</GetMailQueueRequest>
        </t:request>
		<t:response>
			<t:select path="//admin:GetMailQueueResponse"/>
		</t:response>
    </t:test >  

	<t:for start="1" end="5" break="response">
	
		<t:delay msec="1000"/>
	
	    <t:test required="true">
	        <t:request>
	    		<GetMailQueueRequest xmlns="urn:zimbraAdmin">
	      			<server name="${mta.server}">
	        			<queue name="deferred" >
	          				<query limit="25" offset="0"/>
	        			</queue>
	      			</server>
				</GetMailQueueRequest>
	        </t:request>
			<t:response>
				<t:select path="//admin:GetMailQueueResponse">
					<t:select path="//admin:queue[@scan='0']" attr="name" set="response"/>	
				</t:select>
			</t:response>
	    </t:test >  

	</t:for>

    <t:test required="true">
        <t:request>
    		<GetMailQueueRequest xmlns="urn:zimbraAdmin">
      			<server name="${mta.server}">
        			<queue name="deferred" >
          				<query limit="25" offset="0"/>
        			</queue>
      			</server>
			</GetMailQueueRequest>
        </t:request>
		<t:response>
			<t:select path="//admin:GetMailQueueResponse">
				<t:select path="//admin:queue[@name='deferred']">
					<t:select path="//admin:qi" attr="id" set="queue.message.id"/>	
				</t:select>
			</t:select>
		</t:response>
    </t:test >  

    <t:test >
        <t:request>
            <MailQueueActionRequest xmlns="urn:zimbraAdmin">
				<server name="${mta.server}">
		        	<queue name="deferred">
		          		<action op="delete" by="id">${queue.message.id}</action>
		        	</queue>
		      	</server>
            </MailQueueActionRequest>
        </t:request>
		<t:response>
			<t:select path="//admin:MailQueueActionResponse"/>
		</t:response>
    </t:test >  

</t:test_case>

</t:tests>
