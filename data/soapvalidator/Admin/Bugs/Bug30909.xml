<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.user" value="user${TIME}${COUNTER}"/>
<t:property name="account1.name" value="${account1.user}@${defaultdomain.name}"/>
<t:property name="account1.password1" value="test123"/>

<t:property name="account1.password2" value="hello123"/>
    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
	 <t:request>
	   <PingRequest xmlns="urn:zimbraAdmin"/>
	 </t:request>
	  <t:response>
		<t:select path="//admin:PingResponse"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup_bug30909" type="always">
    <t:objective>Create test accounts</t:objective>
    <t:steps>1. Login to admin account
             2. Create accounts        
    </t:steps>  

	<t:test required="true" >
	     <t:request>
	        <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
	     </t:request>
	     <t:response>
	        <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	     </t:response>
	</t:test>

    <t:test required="true">
	    <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${account1.password1}</password>                
            </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                  <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
	    </t:response>

	</t:test>
    
</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
<t:property name="authToken" value=""/>

<t:test_case testcaseid="bug30909" type="bhr" bugids="30909">
    <t:objective>Test that the Authtoken expires when administrator resets the password</t:objective>
    <t:steps>1. Login to account1
             2. Send GetInfoRequest before the authentication has expired.                     
    </t:steps>

	<t:test>
	     <t:request>
	          <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${account1.password1}</password>	                
	          </AuthRequest>
	     </t:request>
	     <t:response>
		    <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
		    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
	     </t:response>
	</t:test>

    <t:property name="authToken_account1" value="${authToken}"/>

    <t:test>        
	<t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetInfoResponse/acct:name"/>
        </t:response>
    </t:test>

    <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    <t:test required="true" >
	     <t:request>
	        <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
	     </t:request>
	     <t:response>
	        <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	     </t:response>
     </t:test>

     <t:test>
        <t:request>
        <!--ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${account1.id}</id>
                <a n = "userPassword">${account1.password2}</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response-->

	<SetPasswordRequest xmlns="urn:zimbraAdmin">
		<id>${account1.id}</id>
		<newPassword>${account1.password2}</newPassword>
        </SetPasswordRequest>
	</t:request>
	<t:response>
		<t:select path="//admin:SetPasswordResponse"/>
	</t:response>
    </t:test>

    <t:delay msec="3000"/>
    <t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:property name="authToken" value="${authToken_account1}"/>

    <t:test>
	<t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:sent</query>
            </SearchRequest>
        </t:request>
        <t:response>
	    <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>
