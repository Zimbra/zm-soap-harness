<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain.admin" value="domainadmin"/>

<t:property name="domain.name1" value="Domain${TIME}${COUNTER}.com"/>
<t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${domain.name1}"/>
<t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${domain.name1}"/>
<t:property name="domain.notes" value="Testing domain functionality"/>
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test  id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>		
        </t:response>
    </t:test>
    
</t:test_case >

<t:test_case testcaseid="bug74612" type="bhr">
    <t:objective>configureQuota right not working for domain administrator.</t:objective>
    <t:steps>
    1. Auth as a Admin
    2. Create domain > create delegated admin in that domain
    3. Grant rights to delegated admin - domainAdminConsoleRights, domainAdminZimletRights, configureQuota, getAccount
    4. Auth as delegated admin> create test account
    5. Send ModifyAccountRequest to modify Quota> verify error message.
    </t:steps>
    <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    
      <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name1}</name>
                <a n="description">${domain.name1}</a>
                <a n="zimbraNotes">${domain.name1}</a>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain.id1"/>            
        </t:response>
    </t:test>

		<t:test>
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${test_account1.name}</name>
				<password>${defaultpassword.value}</password>
                <a n="zimbraIsDelegatedAdminAccount">TRUE</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account1.server"/>
		</t:response>
	</t:test>
	
	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target xmlns="" by="name" type="domain">${domain.name1}</target>
				<grantee xmlns="" by="name" type="usr">${test_account1.name}</grantee>
				<right xmlns="">domainAdminConsoleRights</right>
			</GrantRightRequest>
		</t:request>
		<t:response>
		</t:response>
	</t:test>	
	
		<t:test required="true">
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="global"/>
				<grantee xmlns="" by="name" type="usr">${test_account1.name}</grantee>			
				<right xmlns="">domainAdminZimletRights</right>
			</GrantRightRequest>
		</t:request>
		<t:response>
		</t:response>
	</t:test>
	
		<t:test required="true">
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target xmlns="" by="name" type="domain">${domain.name1}</target>
				<grantee xmlns="" by="name" type="usr">${test_account1.name}</grantee>
				<right xmlns="">configureQuota</right>
			</GrantRightRequest>
		</t:request>
		<t:response>
		</t:response>
	</t:test>	
	
		<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target xmlns="" by="name" type="domain">${domain.name1}</target>
				<grantee xmlns="" by="name" type="usr">${test_account1.name}</grantee>
				<right xmlns="">getAccount</right>
			</GrantRightRequest>
		</t:request>
		<t:response>
		</t:response>
	</t:test>
	
	
	   <t:property name="server.zimbraAccount" value="${test_account1.server}"/>
    
      <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    	<t:test>
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${test_account2.name}</name>
				<password>${defaultpassword.value}</password>
       
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account2.server"/>
		</t:response>
	</t:test>
	
	<t:test>
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account2.id}</id>
                <a n = "zimbraMailQuota">1024</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//zimbra:Code" match = "^service.PERM_DENIED$"/>
            <t:select path= "//soap:Text" match="^permission denied: can not modify mail quota, domain admin can only modify quota if zimbraDomainAdminMaxMailQuota is set to 0 or set to a certain value and quota is less than that value..*"/>
        </t:response>
    </t:test>
	
	
</t:test_case>

</t:tests>
