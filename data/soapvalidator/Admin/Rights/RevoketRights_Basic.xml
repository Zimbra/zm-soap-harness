<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="domain.name" value="right.${COUNTER}${TIME}"/>
<t:property name="admin1.account" value="admin1.${COUNTER}${TIME}"/>
<t:property name="admin2.account" value="admin2.${COUNTER}${TIME}"/>
<t:property name="account1.name" value="right1.${TIME}${COUNTER}"/>
<t:property name="account2.name" value="right2.${TIME}${COUNTER}"/>
<t:property name="password.new" value="tingtong"/>

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
	 <t:request>
	   <PingRequest xmlns="urn:zimbraAdmin"/>
	 </t:request>
	  <t:response>
		<t:select path="//admin:PingResponse"/>
	 </t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

<!-- Create a testdomain and an account in it -->

    <t:test id="CreateDomainRequest0a">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}@${domain.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="name" set="account1.fullName"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account1.server"/>
        </t:response>
    </t:test>  
  
      <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}@${domain.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="name" set="account2.fullName"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account2.server"/>
        </t:response>
    </t:test>  

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin1.account}@${domain.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraIsDelegatedAdminAccount">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="name" set="admin1.fullName"/>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="admin1.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="admin1.server"/>
        </t:response>
    </t:test>  

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin2.account}@${domain.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraIsDelegatedAdminAccount">TRUE</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="name" set="admin2.fullName"/>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="admin2.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="admin2.server"/>
        </t:response>
    </t:test>  

</t:test_case>

<t:test_case testcaseid="RevokeRightRequest01" type="smoke" >
<t:objective> Basic test case to verify RevokeRightRequest </t:objective>
	<t:steps>
	1. Create a regular admin account (created in above request)
	2. Grant right to setPassword
	3. Revoke the same right
	</t:steps>

	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${domain.name}</target>
				<grantee type="usr" by="name">${admin1.fullName}</grantee>
				<right>setAccountPassword</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>
 
 	<t:test>
		<t:request>
			<RevokeRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${domain.name}</target>
				<grantee type="usr" by="name">${admin1.fullName}</grantee>
				<right>setAccountPassword</right>
			</RevokeRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:RevokeRightResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<account by="name">${admin1.fullName}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <SetPasswordRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <newPassword>${password.new}</newPassword>
            </SetPasswordRequest>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^service.PERM_DENIED" />
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="RevokeRightRequest02" type="functional" >
<t:objective> Revoking rights by using attr "id" instead of "name" </t:objective>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="id">${domain.id}</target>
				<grantee type="usr" by="id">${admin1.id}</grantee>
				<right>getAccount</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>

 	<t:test>
		<t:request>
			<RevokeRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="id">${domain.id}</target>
				<grantee type="usr" by="id">${admin1.id}</grantee>
				<right>getAccount</right>
			</RevokeRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:RevokeRightResponse"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<account by="name">${admin1.fullName}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account1.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse" />
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="RevokeRightRequest03" type="smoke">
<t:objective> Verify 'canDelegate' for revoke works  </t:objective>

  <t:steps>
    1. Grant right to admin1 with canDelegate="1"
    2. Login as admin1 and grant same right to admin2
    2. Login as global admin
    3. revoke right from admin1 with canDelegate="1"
    4. Login as admin1
    5. Try to revoke right from admin2
  </t:steps>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${domain.name}</target>
				<grantee type="usr" by="name">${admin1.fullName}</grantee>
				<right canDelegate="1">getDomain</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<account by="name">${admin1.fullName}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${domain.name}</target>
				<grantee type="usr" by="name">${admin2.fullName}</grantee>
				<right>getDomain</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

 	<t:test>
		<t:request>
			<RevokeRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="id">${domain.id}</target>
				<grantee type="usr" by="id">${admin1.id}</grantee>
				<right canDelegate="1">getDomain</right>
			</RevokeRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:RevokeRightResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<account by="name">${admin1.fullName}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<RevokeRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="id">${domain.id}</target>
				<grantee type="usr" by="name">${admin2.fullName}</grantee>
				<right canDelegate="1">getDomain</right>
			</RevokeRightRequest>    
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^service.PERM_DENIED" />
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="RevokeRightRequest04" type="smoke">
<t:objective> Verify 'deny' works </t:objective>

</t:test_case>


<t:test_case testcaseid="RevokeRightRequest05" type="smoke" bugids="36021">
<t:objective> revoke right throw no_such_account error on a grant whose grantee account was deleted </t:objective>
	<t:steps>
	1. Grant right admin2
	2. Delete admin2
	3. Try to revoke the rights
	</t:steps>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${defaultdomain.name}</target>
				<grantee type="usr" by="name">${admin2.fullName}</grantee>
				<right>countAccount</right>
			</GrantRightRequest>    
		</t:request>
		<t:response>
            <t:select path="//admin:GrantRightResponse"/>
		</t:response>
	</t:test>

<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test>
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${admin2.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<RevokeRightRequest xmlns="urn:zimbraAdmin">
				<target type="domain" by="name">${defaultdomain.name}</target>
				<grantee type="usr" by="name">${admin2.fullName}</grantee>
				<right>checkHealth</right>
			</RevokeRightRequest>    
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
		</t:response>
	</t:test>

</t:test_case>

</t:tests>