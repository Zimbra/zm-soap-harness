<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="interest.all" value="all"/>
<t:property name="interest.messages" value="m"/>
<t:property name="interest.appointments" value="a"/>
<t:property name="interest.contacts" value="c"/>



<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>




<t:test_case testcaseid="CreateWaitSetRequest_Basic_01" type="smoke" >
    <t:objective>WaitSetRequest for a particular account (non-blocking)</t:objective>
    <t:steps>
    1. Login to admin
    2. Send the CreateWaitSetRequest to create a wait set (add = account1.id)
    3. Inject a message into the mailbox
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraMail" value="${zimbraServer.name}"/>
	<!--
		Should the admin be able to send the waitset requests to the 'main' server?
		Or, does he need to send it to the account server?
	-->

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="admin.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="admin.waitset.waitSet"/>
        </t:response>
    </t:test>

	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test >
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" waitSet="${admin.waitset.waitSet}" seq="${admin.waitset.seq}"  >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account1.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 

<t:test_case testcaseid="CreateWaitSetRequest_Basic_02" type="smoke" >
    <t:objective>WaitSetRequest for a particular account (blocking)</t:objective>
    <t:steps>
    1. Login to admin
    2. Send the CreateWaitSetRequest to create a wait set (add = account1.id)
    3. Send the WaitSetRequest (non-blocking)
    4. Inject a message into the mailbox
    5. Wait for the WaitSetResponse
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="server.zimbraMail" value="${zimbraServer.name}"/>
	<!--
		Should the admin be able to send the waitset requests to the 'main' server?
		Or, does he need to send it to the account server?
	-->

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account2.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="admin.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="admin.waitset.waitSet"/>
        </t:response>
    </t:test>

    <t:test concurrent="true">
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" block="1" waitSet="${admin.waitset.waitSet}" seq="${admin.waitset.seq}" defTypes="${interest.all}" >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account2.id}"/>
            </t:select>
        </t:response>
    </t:test>

	<t:delay sec="10"/>
	
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <!-- The WaitSetRequest will return here, once the LMTP message is received -->


</t:test_case> 


<t:test_case testcaseid="CreateWaitSetRequest_Basic_02" type="smoke">
    <t:objective> TC to verify Admin can create more than 5 existing/valid Waiset  </t:objective>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>

    <t:test id="WaitSet401" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq1"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet1"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet402" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq2"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet2"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet403" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq3"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet3"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet404" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq4"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet4"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet405" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq5"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet5"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet406" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account4.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account4.waitset.seq6"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account4.waitset.waitSet6"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account4.waitset.waitSet1}" seq="${account4.waitset.seq1}"  >
			</WaitSetRequest>
		</t:request>
		<t:response>
            <t:select path="//mail:WaitSetResponse" attr="waitSet" match="${account4.waitset.waitSet1}"/>
		</t:response>
	</t:test>

</t:test_case>

</t:tests>
