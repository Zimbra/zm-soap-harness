<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="hostA.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="hostB.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="COS.name" value="multihostcos${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup_CreateAcctMultinode1" hostCount="2" type="always" >
    <t:objective>Account setup </t:objective>
	<t:steps> 1. Login to admin.
			  2. Get the Servers.
			  3. Create COS using the servers.			
	</t:steps>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test depends="admin_login" required="true" >
        <t:request>
            <GetAllServersRequest xmlns="urn:zimbraAdmin"></GetAllServersRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllServersResponse/admin:server[@name='${multihostA.FQDN}']" attr="id" set="serverA.id"/>
            <t:select path="//admin:GetAllServersResponse/admin:server[@name='${multihostB.FQDN}']" attr="id" set="serverB.id"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="GetAccountMultinode_01" hostCount="2" type="bhr" bugids="16500">
    <t:objective>Verify that GetAccountRequest is successfully proxied</t:objective>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraMailHost">${multihostA.FQDN}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']"  match="${multihostA.FQDN}"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraMailHost">${multihostB.FQDN}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
            <t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']"  match="${multihostB.FQDN}"/>
        </t:response>
    </t:test>  

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account1.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" />
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account2.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" />
		</t:response>
	</t:test>

	
</t:test_case>


</t:tests>