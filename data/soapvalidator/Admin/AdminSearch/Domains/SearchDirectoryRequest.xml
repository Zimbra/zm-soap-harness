<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain1.name" value="domain${TIME}${COUNTER}.com"/>  


<t:property name="account1.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>
<t:property name="account2.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>  
<t:property name="account2.alias" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>
<t:property name="dl1.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>
<t:property name="resource1.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>
<t:property name="resource1.displayname" value="searchdir.${TIME}${COUNTER}"/>
<t:property name="resource1.type" value="Location"/>
<t:property name="resource2.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>
<t:property name="resource2.displayname" value="searchdir.${TIME}${COUNTER}"/>
<t:property name="resource2.type" value="Equipment"/>


<t:property name="domain1.query1" value="(|(uid=*${domain1.name}*)(cn=*${domain1.name}*)(sn=*${domain1.name}*)(gn=*${domain1.name}*)(displayName=*${domain1.name}*)(zimbraMailAlias=*${domain1.name}*)(zimbraId=vc)(zimbraMailAddress=*${domain1.name}*)(zimbraMailDeliveryAddress=*${domain1.name}*))"/>   
    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_account_search" type="always" >
    <t:objective>Prepare the account for tests</t:objective>
    <t:steps> 1. Login to admin
              2. Create test-accounts
              3. Create an alias 
              4. Create a distribution list        
    </t:steps>
    
    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test reuqired="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>
    
	<t:test required="true">
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${account2.id}</id>
                <alias>${account2.alias}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin">
                <name>${dl1.name}</name>
                <a n="description">A test distribution list</a>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id" set="dl1.id"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
			<CreateCalendarResourceRequest xmlns="urn:zimbraAdmin">
				<name>${resource1.name}</name>
				<a n="zimbraCalResType">${resource1.type}</a>
				<a n="displayName">${resource1.displayname}</a>
	        </CreateCalendarResourceRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateCalendarResourceResponse/admin:calresource" attr="id" set="resource1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
			<CreateCalendarResourceRequest xmlns="urn:zimbraAdmin">
				<name>${resource2.name}</name>
				<a n="zimbraCalResType">${resource2.type}</a>
				<a n="displayName">${resource2.displayname}</a>
	        </CreateCalendarResourceRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateCalendarResourceResponse/admin:calresource" attr="id" set="resource2.id"/>
        </t:response>
    </t:test>

</t:test_case>

    

<t:test_case testcaseid="SearchDirectoryRequest_Domains_01" type="functional">
    <t:objective>Verify searching for types="domains" only. </t:objective>    

    <t:test>
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" types="domains">
                <query></query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:domain" attr="id" match="${domain1.id}"/>    
        </t:response>
    </t:test> 

</t:test_case> 




<t:test_case testcaseid="SearchDirectoryRequest_Domains_02" type="functional">
    <t:objective>Verify searching for types="accounts,aliases,distributionlists,resources" in a particular domain</t:objective>    


	<t:test>
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" types="accounts,aliases,distributionlists,resources" domain="${domain1.name}">
                <query></query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:SearchDirectoryResponse/admin:account" attr="id" match="${account1.id}"/>
			<t:select path="//admin:SearchDirectoryResponse/admin:account" attr="id" match="${account2.id}"/>
			<t:select path="//admin:SearchDirectoryResponse/admin:alias" attr="name" match="${account2.alias}"/>
			<t:select path="//admin:SearchDirectoryResponse/admin:dl" attr="id" match="${dl1.id}"/>
			<t:select path="//admin:SearchDirectoryResponse/admin:calresource" attr="id" match="${resource1.id}"/>
			<t:select path="//admin:SearchDirectoryResponse/admin:calresource" attr="id" match="${resource2.id}"/>
        </t:response>
    </t:test> 

</t:test_case> 



</t:tests>
