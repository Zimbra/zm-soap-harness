<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain1.name" value="domain${TIME}${COUNTER}.com"/>  
<t:property name="Resource.equipment" value="Equipment"/>
<t:property name="Resource.location" value="Location"/>

<t:property name="account1.user" value="searchdir.${TIME}${COUNTER}"/>
<t:property name="account1.name" value="${account1.user}@${domain1.name}"/>
<t:property name="account2.name" value="searchdir.${TIME}${COUNTER}@${domain1.name}"/>  


<t:property name="account1.query1" value="(|(uid=*${account1.user}*)(cn=*${account1.user}*)(sn=*${account1.user}*)(gn=*${account1.user}*)(displayName=*${account1.user}*)(zimbraMailAlias=*${account1.user}*)(zimbraId=vc)(zimbraMailAddress=*${account1.user}*)(zimbraMailDeliveryAddress=*${account1.user}*))"/>
<t:property name="account1.query2" value="(|(uid=*${account1.name}*)(cn=*${account1.name}*)(sn=*${account1.name}*)(gn=*${account1.name}*)(displayName=*${account1.name}*)(zimbraMailAlias=*${account1.name}*)(zimbraId=vc)(zimbraMailAddress=*${account1.name}*)(zimbraMailDeliveryAddress=*${account1.name}*))"/>
    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_account_search" type="always" >
    <t:objective>Prepare the account for tests</t:objective>
    <t:steps> 1. Login to admin
              2. Create test-accounts
              3. Create an alias 
              4. Create a distribution list        
    </t:steps>
    
    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test reuqired="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>


</t:test_case>

    

<t:test_case testcaseid="SearchDirectoryRequest_Accounts_01" type="smoke">
    <t:objective>Verify searching for an account where types="accounts" offset="0" limit="0" without domain name</t:objective>

    <t:test>
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" offset="0" limit="0" types="accounts">
				<query>${account1.query1}</query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:account" attr="name" match="${account1.name}"/>   
        </t:response>
    </t:test> 

</t:test_case>    


<t:test_case testcaseid="SearchDirectoryRequest_Accounts_02" type="sanity">
    <t:objective>Verify searching for an account where types="accounts" limit="25" domain="${defaultdomain.name}". </t:objective>    

	<t:test>
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" domain="${domain1.name}" limit="25" types="accounts">
                <query>${account1.query2}</query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:account" attr="name" match="${account1.name}"/>   
        </t:response>
    </t:test> 

</t:test_case>     



<t:test_case testcaseid="SearchDirectoryRequest_Accounts_03" type="sanity">
    <t:objective>Verify searching for types="accounts,aliases,distributionlists,resources,domains"  </t:objective>    

    <t:test>
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" types="accounts,aliases,distributionlists,resources,domains">
                <query>${account1.query1}</query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:account" attr="name" match="${account1.name}"/>
        </t:response>
    </t:test> 


</t:test_case> 


<t:test_case testcaseid="SearchDirectoryRequest_Accounts_04" type="sanity">
    <t:objective>Verify searching for deleted particular account </t:objective>
    <t:steps>
        1. Delete the account
        2. Search the deleted account
    </t:steps>

    <t:test id="searchDirectoryRequest18a">
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    <t:test depends="searchDirectoryRequest18a">
        <t:request>
            <SearchDirectoryRequest xmlns="urn:zimbraAdmin" types="accounts">
                <query>${account1.query1}</query>
            </SearchDirectoryRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:SearchDirectoryResponse/admin:account" attr="name" match="${account1.name}" emptyset="1"/>    
        </t:response>
    </t:test> 

</t:test_case>     



</t:tests>
