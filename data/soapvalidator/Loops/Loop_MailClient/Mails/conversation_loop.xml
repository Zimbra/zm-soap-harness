<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="conv1.subject" value="First conversation"/>
<t:property name="conv2.subject" value="Second message to be searched"/>
<t:property name="tag1.name" value="Tag${TIME}${COUNTER}"/>
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>    
    
<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>
<t:property name="op.delete" value="delete"/>
<t:property name="op.spam" value="spam"/>    
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>
    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_conversation_loop" type="always">
    <t:objective>Create test account</t:objective>
    <t:steps> 1. Login to admin.
              2. Create test account. 
    </t:steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account2" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
<t:test_case testcaseid="acctSetup2_conversation_loop" type="always">
    <t:objective>Login to account1</t:objective>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Conversation_loop1" type="functional" duration="long" bugids="4082">
    <t:objective>Create a conversation with many messages </t:objective>
    <t:steps> 1. Send a message with particular subject 
              2. Send many messages with same subject to create a conversation
              3. Test GetInfoRequest              
    </t:steps>

    <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a="${test_account2.name}"/>
                    <su>${conv1.subject}</su>
                    <mp ct="text/plain">
                        <content>Content of mail ${TIME} ${COUNTER}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>

    <t:test_loop count="1000">      
        
        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account2.name}"/>
                        <su>Re: ${conv1.subject}</su>
                        <mp ct="text/plain">
                            <content>Content of mail ${TIME} ${COUNTER}</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m"/>
            </t:response>
        </t:test> 
        
    </t:test_loop>

    <t:test timeframeMax="3000">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetInfoResponse/acct:name"/>
        </t:response>
    </t:test>    

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
<!-- Login to account2 and perform various operation on conversation -->  
<t:test_case testcaseid="acctSetup3_conversation_loop" type="always">
    <t:objective>Login to account2</t:objective>
    <t:steps>1. Login to account2
             2. Get the ids of different folders.        
    </t:steps>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder[@name='${globals.root}']" attr="id" set="folder.pname"/>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
        </t:response>
    </t:test>
    
</t:test_case>
    
    
<t:test_case testcaseid="Conversation_loop2" type="functional" duration="long" bugids="4482">
    <t:objective>Search a conversation </t:objective>

    <t:test id="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> subject:(${conv1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>            
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv1.id"/>
        </t:response>
    </t:test>
   
</t:test_case>
  
    
<t:test_case testcaseid="Conversation_loop3" type="functional" duration="long" bugids="1923">
    <t:objective>Mark conversation as read </t:objective>
    <t:steps>1. Mark the conversation as read
             2. Search for read conversation
             3. Verify that the search for unread messages does not return any message
    </t:steps>

    <t:test depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.read}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> is:read </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> is:unread </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Conversation_loop4" type="functional" duration="long">
    <t:objective>Mark conversation as unread </t:objective>
    <t:steps> 1. Mark the conversation as read
              2. Verify searching the read conversation
              3. Verify that the search for read messages does not return any message
    </t:steps>

    <t:test depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> is:unread </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> is:read </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>    
    
 
<t:test_case testcaseid="Conversation_loop5" type="functional" duration="long" bugids="1923">
    <t:objective>Flag a conversation </t:objective>
    <t:steps>1. Flag a conversation 
             2. Search for the flagged conversation
             3. Verify that the search for unflagged messages does not return any message   
    </t:steps>

    <t:test depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.flag}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.flag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> is:flagged </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> is:unflagged </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Conversation_loop6" type="functional" duration="long">
    <t:objective>Unflag a conversation</t:objective>
    <t:steps> 1. Unflag a conversation
              2. Search for unflaaged conversation
              3. Verify that the search for flagged messages does not return any message
    </t:steps>

    <t:test depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.unflag}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unflag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> is:unflagged </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> is:flagged </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case> 
    

<t:test_case testcaseid="Conversation_loop7" type="functional" duration="long">
    <t:objective>Tag a conversation</t:objective>
    <t:steps>1. Create a Tag
             2. Tag a conversation            
             3. Search for the tagged conversation
    </t:steps>

    <t:test id="conversation_loop7a">
        <t:request>
            <CreateTagRequest xmlns="urn:zimbraMail">
                <tag name="${tag1.name}" color="0"/>
            </CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag1.id"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a,conversation_loop7a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.tag}" tag="${tag1.id}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.tag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query>  tag:"${tag1.name}"  </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Conversation_loop8" type="functional" duration="long">
    <t:objective>UnTag a conversation</t:objective>
    <t:steps> 1. Untag a conversation
              2. Verify that the search for tagged message does not return any message
    </t:steps>

    <t:test depends="conversation_loop2a,conversation_loop7a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.untag}" tag="${tag1.id}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.untag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> tag:"${tag1.name}" </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>    
    
    
<t:test_case testcaseid="Conversation_loop9" type="functional" duration="long" bugids="1923">
    <t:objective>Move a conversation in a particular folder</t:objective>
    <t:steps>1. Create a folder
             2. Move the conversation in that folder
             3. Search for the conversation in that folder
             4. Verify that the search of messages in inbox does not return any message
    </t:steps>

    <t:test id="conversation_loop9a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
    </t:test>
    
    <t:test depends="conversation_loop2a,conversation_loop9a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.move}" l="${folder1.id}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> in:"${folder1.name}" </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> in:"${globals.inbox}" </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>     
    
   
<t:test_case testcaseid="Conversation_loop10" type="functional" duration="long">
    <t:objective>Mark conversation as spam </t:objective>
    <t:steps>1. Mark conversation as spam
             2. Search the conversation in spam folder
             3. Verify that the search of messages in previous folder does not return any message
    </t:steps>

    <t:test depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.spam}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> in:"${globals.spam}" </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv1.id}"/>
        </t:response>
    </t:test>

    <t:test depends="conversation_loop2a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> in:"${folder1.name}" </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case> 
    
    
<t:test_case testcaseid="Conversation_loop11" type="functional" duration="long">
    <t:objective>Delete a conversation </t:objective>
   
    <t:test id="conversation_loop11a" depends="conversation_loop2a" timeframeMax="3000">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.delete}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>    

</t:test_case>     
    
    
<t:test_case testcaseid="Conversation_loop12" type="functional" duration="long">
    <t:objective>Search for the nonexisting conversation </t:objective>

    <t:test depends="conversation_loop11a" timeframeMax="3000">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" offset="0" limit="25">
                <query> subject:(${conv1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>           
            <t:select path="//mail:SearchResponse/mail:c" emptyset="1"/>
        </t:response>
    </t:test>
   
</t:test_case>    
    
    
</t:tests>
