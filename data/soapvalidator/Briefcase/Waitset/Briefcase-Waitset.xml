<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account0.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="interest.all" value="all"/>
<t:property name="interest.docs" value="d"/>
<t:property name="interest.appointments" value="a"/>
<t:property name="interest.contacts" value="c"/>
<t:property name="account.document.htmlfile" value="${testMailRaw.root}/wiki01/basic.html"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"> </PingRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="CreateWaitSetRequest_Basic_AccountSetup" type="always">
    <t:objective>create test account</t:objective>
    <t:steps>1. Login to admin
             2. Create an account.    
    </t:steps>
    
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account0.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account0.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account0.server"/>
        </t:response>
    </t:test>    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
        <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    </t:test_case>


<t:test_case testcaseid="CreateWaitSetRequest_Document_01" type="bhr">
    <t:objective>Sanity Test Case for WaitSetRequest on document</t:objective>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account0.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account0.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="defTypes" match="f,m,c,a,t,d"/>
        </t:response>
    </t:test>
    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.docs}" >
				<add>
					<a id="${account0.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="defTypes" match="d"/>
            
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="CreateWaitSetRequest_Document_02" type="bhr">
    <t:objective>Basic Test Case for WaitSetRequest on document</t:objective>
    <t:steps>
    1. Login to account1
    2. Send the CreateWaitSetRequest to create a wait set for all type
    3. Upload a file to briefcase.
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet"/>
        </t:response>
    </t:test>



	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account1.folder.briefcase.id"/>
		</t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account.document.htmlfile}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="document.htmlfile.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>
	
	 <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${account1.folder.briefcase.id}">
			    <upload id="${document.htmlfile.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse/mail:doc" attr="id" set="document.htmlfile.id"/>
        </t:response>
    </t:test>
    
    <t:delay sec="10"/>
    <t:test >
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account1.waitset.waitSet}" seq="${account1.waitset.seq}">
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account1.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 

 

<t:test_case testcaseid="CreateWaitSetRequest_Document_03" type="bhr">
    <t:objective>Basic Test Case for WaitSetRequest on document</t:objective>
    <t:steps>
    1. Login to account2
    2. Send the CreateWaitSetRequest to create a wait set for document type
    3. Upload a file to briefcase.
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.docs}" >
				<add>
					<a id="${account2.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account2.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account2.waitset.waitSet"/>
        </t:response>
    </t:test>



	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account2.folder.briefcase.id"/>
		</t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account.document.htmlfile}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="document.htmlfile.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>
	
	 <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${account2.folder.briefcase.id}">
			    <upload id="${document.htmlfile.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SaveDocumentResponse/mail:doc" attr="id" set="document.htmlfile.id"/>
        </t:response>
    </t:test>
    
    <t:delay sec="10"/>
    <t:test >
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account2.waitset.waitSet}" seq="${account2.waitset.seq}">
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account2.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 

</t:tests>

