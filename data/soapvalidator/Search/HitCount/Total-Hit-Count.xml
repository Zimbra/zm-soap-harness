<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="message.subject1" value="message01"/>
<t:property name="message.content1" value="content of the message01"/>

<t:property name="message2.subject" value="message02"/>
<t:property name="message2.content" value="&lt;div style='font-family:Arial, Helvetica, sans-serif;font-size:10pt;color:#000000;'&gt;html content of the message02"/>

<t:property name="message.subject3" value="message03"/>
<t:property name="message.content3" value="content of the message03"/>

<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>


<t:test_case testcaseid="acctSetup1_HitCount_56927" type="deprecated" bugids="64358">
    <t:objective>Create a test account</t:objective>
    <steps> 
        1. Login to admin account
        2. Create a test accounts
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account2" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup2_HitCount_56927" type="deprecated" bugids="64358">
    <t:objective>login as the test account and create a conversation.</t:objective>
    <t:steps> 
        1. Login to test_account1 
        2. Send a mail to test_account1        
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="sendmail1" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account2.name}'/>
                    <su>${message.subject1}</su>
                    <mp ct="text/plain">
                        <content>${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>

    <t:test id="sendmail2" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="w">
                    <e t="t" a='${test_account2.name}'/>
                    <su>Fwd: ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content>Forwarded content:${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>
    
    <t:test id="sendmail1" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account2.name}'/>
                    <su>${message.subject3}</su>
                    <mp ct="text/plain">
                        <content>${message.content3}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message3.id"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>

    <t:test id="sendmail3" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account2.name}'/>
                    <su>${message2.subject}</su>
					<mp ct="multipart/alternative">
						<mp ct="text/plain">
							<content>${message.content1}</content>
						</mp>
						<mp ct="text/html">
							<content>${message2.content}</content>
						</mp>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>


    <t:test id="sendmail4" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="w">
                    <e t="t" a='${test_account2.name}'/>
                    <su>Fwd: ${message2.subject}</su>
					<mp ct="multipart/alternative">
						<mp ct="text/plain">
							<content>Forwarded content: ${message.content1}</content>
						</mp>
						<mp ct="text/html">
							<content>Forwarded content: ${message2.content}</content>
						</mp>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>

	
</t:test_case>


<t:test_case testcaseid="TotalHitCount_56927_01" type="deprecated" bugids="64358">
    <t:objective>Search for conversation type and check the total hit count</t:objective>

	<t:steps> 
    	1. test_account2 has two conversations of 2 messgages and one single message in account set up method.
    	2. Search for conversation type.
    	3. Verify Searchresponse has total hit count =3.
    </t:steps>
    
    <t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account2.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail"  types="conversation">               
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse" attr="total" match="3"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="TotalHitCount_56927_02" type="deprecated" bugids="64358">
    <t:objective>Send Searchrequest for message type and check the total hit count for messgeses</t:objective>

	<t:steps> 
    	1. test_account2 has two conversation of 4 messages and one single message in account set up method.
    	2. Search for message type.
    	2. Verify Searchresponse has total hit count =5.
    </t:steps>
    
    <t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account2.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail"  types="message">               
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse" attr="total" match="5"/>
        </t:response>
    </t:test>    
</t:test_case>

</t:tests>
