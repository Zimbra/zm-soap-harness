<t:tests xmlns:t="urn:zimbraTestHarness">





<t:property name="account1.name" value="account${COUNTER}.${TIME}@${defaultdomain.name}"/>



<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
	 <t:request>
	   <PingRequest xmlns="urn:zimbraAdmin"/>
	 </t:request>
	  <t:response>
		<t:select path="//admin:PingResponse"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="account_setup_conversation" type="always" >
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account
            2. Create a mail account 
    </steps>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_test_account1"  required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="Search_MailingLists_SearchPaging_01" type="functional" bugids="37344" >
	<t:objective>Verify search paging takes the conversation subject into account</t:objective>
	<t:steps>
		1. Inject several messages and conversations from bugzilla (subjects contact [])
		2. Search by conversation.
			A. Verify correct order based on sort field
			B. Sort should not be based on the bug number (e.g. data inside the brackets)
		3. Search for first 2 conversations - verify correct order
		4. Search for next 2 conversations - verify correct order
		6. Search for next 2 conversations - verify correct order
	</t:steps>

	<t:property name="mime.folder" value="${testMailRaw.root}/Bugs/37344/"/>

    <t:mailinjecttest required="true">
        <t:lmtpInjectRequest>
            <foldername>${mime.folder}</foldername>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" sortBy="subjAsc" offset="0" limit="100" query="in:inbox" types="conversation">
				<!--query>in:inbox</query-->
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:c[1]">
					<t:select attr="sf" match="CANCELED APPTS STILL SHOW ON ATTENDEE CALENDARS"/>
					<t:select attr="id" set="conversation1.id"/>
				</t:select>
				<t:select path="//mail:c[2]">
					<t:select attr="sf" match="CANNOT SEE ALL ATTENDEES FOR MEETINGS WITH MANY ATTENDEES"/>
					<t:select attr="id" set="conversation2.id"/>
				</t:select>
				<t:select path="//mail:c[3]">
					<t:select attr="sf" match="CREATING APPOINTMENTS IN ICAL DOES NOT SEND THE INVITE"/>
					<t:select attr="id" set="conversation3.id"/>
				</t:select>
				<t:select path="//mail:c[4]">
					<t:select attr="sf" match="DOGFOOD MAILBOXLOG SCAN RESULT"/>
					<t:select attr="id" set="conversation4.id"/>
				</t:select>
				<t:select path="//mail:c[5]">
					<t:select attr="sf" match="I18N/L10N:LOCALISE UI OF ZCOLOGCTL.EXE"/>
					<t:select attr="id" set="conversation5.id"/>
				</t:select>
				<t:select path="//mail:c[6]">
					<t:select attr="sf" match="INCORRECT MESSAGE INCLUDED AS PART OF CONVERSATION"/>
					<t:select attr="id" set="conversation6.id"/>
				</t:select>
			</t:select>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="subjAsc" offset="0" limit="2">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:c[1]" attr="id" match="${conversation1.id}"/>
				<t:select path="//mail:c[2]" attr="id" match="${conversation2.id}"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="subjAsc" offset="2" limit="2">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:c[1]" attr="id" match="${conversation3.id}"/>
				<t:select path="//mail:c[2]" attr="id" match="${conversation4.id}"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="subjAsc" offset="4" limit="2">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:c[1]" attr="id" match="${conversation5.id}"/>
				<t:select path="//mail:c[2]" attr="id" match="${conversation6.id}"/>
			</t:select>
		</t:response>
	</t:test>



</t:test_case>






</t:tests>
