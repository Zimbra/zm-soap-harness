<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="tz" value="(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana"/>



<t:property name="account1.name" value="U1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="U2.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Search_Mountpoint_LocalRemote_AccountSetup" type="always">
    <t:objective>create test account</t:objective>
    <t:steps>
            1. Login to admin.
            2. Create two accounts.
    </t:steps>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
     

    <t:test  id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test  id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test depends="create_test_account1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="getFolderRequest" required="true">
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
            <t:select path="//mail:folder[@name='${globals.tasks}']" attr="id" set="account1.folder.tasks.id"/>
            <t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="account1.folder.calendar.id"/>
            <t:select path="//mail:folder[@name='${globals.contacts}']" attr="id" set="account1.folder.contacts.id"/>
            <t:select path="//mail:folder[@name='${globals.emailed}']" attr="id" set="account1.folder.emailed.id"/> 
            <t:select path="//mail:folder[@name='${globals.chats}']" attr="id" set="account1.folder.chats.id"/>
        </t:response>
    </t:test>


    
	<t:property name="account1.folder1.name" value="folder.${TIME}.${COUNTER}"/>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account1.folder1.name}" l="${account1.folder.inbox.id}" view="message"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder1.id"/>
        </t:response>
	</t:test>

	<t:property name="account1.message1.subject" value="folder message ${TIME}${COUNTER}"/>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account1.folder1.id}">
                    <content>To: foo@example.com
From: bar@example.com
Subject: U1 ${account1.message1.subject}
Date: Mon, 30 Oct 2006 20:27:31 -0800 (PST)

Sample Content

                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="account1.message1.id"/>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="cid" set="account1.message1.cid"/>
        </t:response>
    </t:test>

	<t:property name="account1.folder2.name" value="subfolder.${TIME}.${COUNTER}"/>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account1.folder2.name}" l="${account1.folder1.id}" view="message"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder2.id"/>
        </t:response>
	</t:test>

	<t:property name="account1.message2.subject" value="subfolder message ${TIME}${COUNTER}"/>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account1.folder2.id}">
                    <content>To: foo@example.com
From: bar@example.com
Subject: U1 ${account1.message2.subject}
Date: Mon, 30 Oct 2006 20:27:31 -0800 (PST)

Sample Content

                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="account1.message2.id"/>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="cid" set="account1.message2.cid"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

  


	<t:property name="account1.contacts1.name" value="contacts.${TIME}.${COUNTER}"/>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account1.contacts1.name}" l="${account1.folder.contacts.id}" view="contact"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.contacts1.id"/>
        </t:response>
	</t:test>

	<t:property name="account1.contact1.first" value="First${TIME}${COUNTER}"/>
	<t:property name="account1.contact1.last" value="Last${TIME}${COUNTER}"/>
	<t:property name="account1.contact1.email" value="email${TIME}${COUNTER}@domain.com"/>

    <t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn l="${account1.contacts1.id}">
                    <a n="firstName">${account1.contact1.first}</a>
                    <a n="lastName">U1${account1.contact1.last}</a>
                    <a n="email">${account1.contact1.email}</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn" attr="id" set="account1.contact1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.contacts1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>


	<t:property name="account1.calendar1.name" value="calendar.${TIME}.${COUNTER}"/>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account1.calendar1.name}" l="${account1.folder.calendar.id}" view="appointment"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.calendar1.id"/>
        </t:response>
	</t:test>

	<t:property name="account1.appointment1.subject" value="summary ${TIME}${COUNTER}"/>
	<t:property name="account1.appointment1.content" value="calendar ${TIME}${COUNTER}"/>
	<t:property name="account1.appointment1.uid" value="${TIME}${COUNTER}"/>

	<!-- PST is -8 hours from GMT time -->
	<t:property name="account1.appointment1.start.gmt" value="1263830400000"/>
	<t:property name="account1.appointment1.start.pst" value="${TIME(-8h)[${account1.appointment1.start.gmt}]}"/>
	
    <t:test >
        <t:request>
            <SetAppointmentRequest xmlns="urn:zimbraMail" l="${account1.calendar1.id}">
                <default needsReply="0" ptst="AC">
                    <m>
                        <inv uid="${account1.appointment1.uid}" method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="U1 ${account1.appointment1.subject}">
                            <s d="${ICALTIME[${account1.appointment1.start.pst}]}" tz="${tz}"/>  
                            <e d="${ICALTIME(+1h)[${account1.appointment1.start.pst}]}" tz="${tz}"/>  
                            <or a="${account1.name}"/>
                        </inv>
                        <mp content-type="text/plain">
                            <content>${account1.appointment1.content}</content>
                        </mp>
                        <su>U1 ${account1.appointment1.subject}</su>
                    </m>
                </default>
            </SetAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SetAppointmentResponse" attr="apptId" set="account1.appointment1.apptId"/>
            <t:select path="//mail:SetAppointmentResponse" attr="calItemId" set="account1.appointment1.calItemId"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.calendar1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test id="getFolderRequest" required="true">
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
            <t:select path="//mail:folder[@name='${globals.tasks}']" attr="id" set="account2.folder.tasks.id"/>
            <t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="account2.folder.calendar.id"/>
            <t:select path="//mail:folder[@name='${globals.contacts}']" attr="id" set="account2.folder.contacts.id"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="account2.folder.trash.id"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="account2.folder.sent.id"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="account2.folder.spam.id"/> 
            <t:select path="//mail:folder[@name='${globals.drafts}']" attr="id" set="account2.folder.drafts.id"/> 
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account2.folder.root.id"/>
        </t:response>
    </t:test>


	<t:property name="account2.mountpoint1.name" value="mountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root.id}" name="${account2.mountpoint1.name}" view="message" rid="${account1.folder1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse">
            	<t:select path="//mail:link" attr="id" set="account2.mountpoint1.id"/>
            </t:select>
        </t:response>
    </t:test>
    
	<t:property name="account2.submountpoint1.name" value="submountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root.id}" name="${account2.submountpoint1.name}" view="message" rid="${account1.folder2.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse">
            	<t:select path="//mail:link" attr="id" set="account2.submountpoint1.id"/>
            </t:select>
        </t:response>
    </t:test>
    
	<t:property name="account2.dupmountpoint1.name" value="dupmountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root.id}" name="${account2.dupmountpoint1.name}" view="message" rid="${account1.folder1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse">
            	<t:select path="//mail:link" attr="id" set="account2.dupmountpoint1.id"/>
            </t:select>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account2.folder.inbox.id}">
                    <content>To: foo@example.com
From: bar@example.com
Subject: U2 ${account1.message1.subject}
Date: Mon, 30 Oct 2006 20:27:31 -0800 (PST)

Sample Content

                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="account2.message1.id"/>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="cid" set="account2.message1.cid"/>
        </t:response>
    </t:test>


	<t:property name="account2.mountpoint2.name" value="mountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root.id}" name="${account2.mountpoint2.name}" view="contact" rid="${account1.contacts1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn l="${account2.folder.contacts.id}">
                    <a n="firstName">${account1.contact1.first}</a>
                    <a n="lastName">U2${account1.contact1.last}</a>
                    <a n="email">${account1.contact1.email}</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn" attr="id" set="account2.contact1.id"/>
        </t:response>
    </t:test>


	<t:property name="account2.mountpoint3.name" value="mountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.root.id}" name="${account2.mountpoint3.name}" view="appointment" rid="${account1.calendar1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse"/>
        </t:response>
    </t:test>
    
	<t:property name="account2.appointment1.uid" value="${TIME}${COUNTER}"/>
	
    <t:test >
        <t:request>
            <SetAppointmentRequest xmlns="urn:zimbraMail" l="${account2.folder.calendar.id}">
                <default needsReply="0" ptst="AC">
                    <m>
                        <inv uid="${account2.appointment1.uid}" method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="U2 ${account1.appointment1.subject}">
                            <s d="${ICALTIME[${account1.appointment1.start.pst}]}" tz="${tz}"/>  
                            <e d="${ICALTIME(+1h)[${account1.appointment1.start.pst}]}" tz="${tz}"/>  
                            <or a="${account1.name}"/>
                        </inv>
                        <mp content-type="text/plain">
                            <content>${account1.appointment1.content}</content>
                        </mp>
                        <su>U2 ${account1.appointment1.subject}</su>
                    </m>
                </default>
            </SetAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SetAppointmentResponse" attr="apptId" set="account2.appointment1.apptId"/>
            <t:select path="//mail:SetAppointmentResponse" attr="calItemId" set="account2.appointment1.calItemId"/>
        </t:response>
    </t:test>

</t:test_case>

  
<t:test_case testcaseid="Search_Mountpoint_IDs_01" type="bhr" bugids="7083">
    <t:objective>Verify search by inid:mountpoint returns remote items</t:objective>
    <t:steps>
            1. Login to account2.
            2. Search for inid:mountpointID
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>inid:(${account2.mountpoint1.id})</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message1.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder1.id}"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>inid:(${account2.submountpoint1.id})</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message2.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder2.id}"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>
  
<t:test_case testcaseid="Search_Mountpoint_IDs_02" type="bhr" bugids="7083">
    <t:objective>Verify search by in:mountpoint</t:objective>
    <t:steps>
            1. Login to account2.
            2. Search for in:"localpath"
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:"/${account2.mountpoint1.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message1.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder1.id}"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:"/${account2.submountpoint1.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message2.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder2.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case>
  
<t:test_case testcaseid="Search_Mountpoint_IDs_03" type="bhr" bugids="7083">
    <t:objective>Verify search by in:"/local mountpoint/remote subfolder"</t:objective>
    <t:steps>
            1. Login to account2.
            2. Search for in:"/localpath/remotefolder"
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:"/${account2.mountpoint1.name}/${account1.folder2.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message2.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder2.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case>
  
  
<t:test_case testcaseid="Search_Mountpoint_IDs_04" type="bhr" bugids="9396">
    <t:objective>Verify SearchConv by inid:mountpoint returns remote items</t:objective>
    <t:steps>
            1. Login to account2.
            2. SearchConv for cid="account1:cid" with query inid:mountpointID
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${account1.id}:${account1.message1.cid}">
                <query>inid:(${account2.mountpoint1.id})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchConvResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message1.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder1.id}"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>
 
<t:test_case testcaseid="Search_Mountpoint_IDs_05" type="bhr" bugids="47084">
    <t:objective>Verify SearchConv by in:mountpoint returns remote items</t:objective>
    <t:steps>
            1. Login to account2.
            2. SearchConv for cid="account1:cid" with query in:mountpoint
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${account1.id}:${account1.message1.cid}">
                <query>in:"${account2.mountpoint1.name}"</query>
            </SearchConvRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchConvResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message1.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder1.id}"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>
 
<t:test_case testcaseid="Search_Mountpoint_IDs_06" type="bhr" bugids="9396">
    <t:objective>Verify SearchConv by in:"mountpoint/remote" returns remote items</t:objective>
    <t:steps>
            1. Login to account2.
            2. SearchConv for cid="account1:cid" with query in:"mountpoint/remote"
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${account1.id}:${account1.message2.cid}">
                <query>in:"${account2.mountpoint1.name}/${account1.folder2.name}"</query>
            </SearchConvRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchConvResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message2.id}"/>
            	<t:select path="//mail:m" attr="l" match="${account1.id}:${account1.folder2.id}"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Search_Mountpoint_IDs_07" type="bhr" bugids="7083">
    <t:objective>Verify search by in:"mountpoint1" OR in:"mountpoint2" (where both mp point to the same folder) returns one remote item (Bug 7083, comment 4)</t:objective>
    <t:steps>
            1. Login to account2.
            2. SearchConv for cid="account1:cid" with query in:"mountpoint/remote"
    </t:steps>
     
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>inid:${account2.mountpoint1.id} OR inid:${account2.dupmountpoint1.id}</query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" match="${account1.id}:${account1.message1.id}"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>
 
 
</t:tests>