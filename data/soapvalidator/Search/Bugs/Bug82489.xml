<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="mime.filename" value="${testMailRaw.root}/bug82489/bug82489.txt"/>
<t:property name="from" value="Perceptyx"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="bug82489" type="smoke" bugids="82489">

    <t:objective>"content: + is:anywhere + from:" search does not find correct emails</t:objective>
      <t:steps>
   		1. Inject message
   		2. Move the message to trash 
		3. Verify mail get searched for "survey is:anywhere from:perceptyx".
    </t:steps>
    
	    <t:mailinjecttest>
    	    <t:lmtpInjectRequest>
        	    <filename>${mime.filename}</filename>
            	<to>${account1.name}</to>
            	<from>${account1.name}</from>
            	<server>${account1.server}</server>
        	</t:lmtpInjectRequest>
    	</t:mailinjecttest>    
    	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    

   	<!-- Sleep for 1 minute to wait for mbox to come up 
	<t:delay sec="20"/> -->
	
	       <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>survey is:anywhere from:perceptyx</query>
            </SearchRequest>
        </t:request>
     <t:response>       
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="conv.id"/>
        </t:response>
    </t:test>
    
      <t:test >
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id}" op="trash"/>
            </MsgActionRequest>
        </t:request>
   </t:test>
        
        
       <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>survey is:anywhere from:perceptyx</query>
            </SearchRequest>
        </t:request>
        
        <t:response>       
            <t:select path="//mail:SearchResponse/mail:m/mail:e" attr="d" match="${from}"/>
        </t:response>
    </t:test>

       
</t:test_case >
</t:tests>