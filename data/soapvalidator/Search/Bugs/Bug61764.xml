<t:tests xmlns:t="urn:zimbraTestHarness">
	<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>
		<t:test id="ping" required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="acctSetup" type="always">
		<t:objective>Create test accounts</t:objective>
		<t:steps>	1. Login to admin account
					2. Create accounts        
	    </t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id" />
				<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'	set="account1.server" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account2.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id" />
				<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'	set="account2.server" />
			</t:response>
		</t:test>
	</t:test_case>


	<t:test_case testcaseid="bug61764" type="bhr" bugids="61764">
		<t:objective>Search in shared folder  </t:objective>


		<t:property name="msg01.file" value="${testMailRaw.root}/bugs/61764/should-match.txt" />
		<t:property name="msg02.file" value="${testMailRaw.root}/bugs/61764/should-not-match.txt" />
		<t:property name="subject.match" value="Re: SF: Case 00071623: NTTC BizMail - [Biz-INC300] SSL.test.ccnnection by Vulnerable Common key Cryptography" />
		<t:property name="subject.not.match" value="Re: SF: Case 00070427: Bassette Printers" />
		
		
    	<t:mailinjecttest >
        	<t:lmtpInjectRequest>
            	<filename>${msg01.file}</filename>
				<to>${account1.name}</to>
				<from>${account2.name}</from>
				<server>${account1.server}</server>
        	</t:lmtpInjectRequest>
    	</t:mailinjecttest> 
    	
    	<t:mailinjecttest >
        	<t:lmtpInjectRequest>
            	<filename>${msg02.file}</filename>
				<to>${account1.name}</to>
				<from>${account2.name}</from>
				<server>${account1.server}</server>
        	</t:lmtpInjectRequest>
    	</t:mailinjecttest> 
		 
		<t:property name="server.zimbraAccount" value="${account1.server}"/>
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
			</t:response>
		</t:test>

	   <t:test id="getFolderRequest" required="true">
    	    <t:request>
        	     <GetFolderRequest xmlns = "urn:zimbraMail"/>
        	</t:request>
        	<t:response>
            	<t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
         	</t:response>
    	</t:test>
    	
    	<t:test>
        	<t:request>
            	<FolderActionRequest xmlns="urn:zimbraMail">
                	<action id="${account1.folder.inbox.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
		<t:property name="server.zimbraAccount" value="${account2.server}"/>
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
			</t:response>
		</t:test>
    
    	<t:property name="account2.mountpoint.name" value="mountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="1" name="${account2.mountpoint.name}" view="message" rid="${account1.folder.inbox.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse" />
        </t:response>
    </t:test>




		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:"${account2.mountpoint.name}" and zimbraSSLExcludeCipherSuites and not has:attachment</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" equal="${subject.match}" />
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${subject.not.match}" emptyset="1" />
			</t:response>
		</t:test> 


 	</t:test_case>
</t:tests>
