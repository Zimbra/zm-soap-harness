<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="mime.dir" value="${testMailRaw.root}/email01"/>

<t:property name="account1.name" value="delegator.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="delegatee.${TIME}.${COUNTER}@${defaultdomain.name}"/>



<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="AccountSetup" type="always" >
	<t:objective> setup acct01 </t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>  

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>  

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
			<foldername>${mime.dir}</foldername>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test id="getFolderRequest" required="true">
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${account1.folder.inbox.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="rwidax"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>subject:(email01A)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="email01A.id"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>subject:(email01C)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="email01C.id"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>subject:(email01C)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="email01C.id"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>subject:(email01E)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="email01E.id"/>
			</t:select>
		</t:response>
	</t:test>


	<t:property name="server.zimbraAccount" value="${account2.server}"/>
     
    <t:test depends="create_test_account2" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
 
    <t:test id="getFolderRequest" required="true">
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
        </t:response>
    </t:test>


	<t:property name="account2.mountpoint1.name" value="mountpoint.${TIME}.${COUNTER}"/>

    <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.inbox.id}" name="${account2.mountpoint1.name}" view="message" rid="${account1.folder.inbox.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse">
            	<t:select path="//mail:link" attr="id" set="account2.mountpoint.id"/>
            </t:select>
        </t:response>
    </t:test>
    

</t:test_case>


<t:test_case testcaseid="NegateFolderMountpoints_from_SearchRequest1" type="bhr" >
	 <t:objective>
		Verify a search for "not from:(address)" in a mountpoint
	 </t:objective>
	 <t:steps>
		Search for inid:mountpoint not from:(origination_address)
		Search for inid:mountpoint -from:(origination_address)
	 </t:steps>

	<t:test>
	 <t:request>
	   <SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
		   <query>inid:${account2.mountpoint.id} not from:(origination_address)</query>
	   </SearchRequest>
	 </t:request>
	  <t:response>
		<t:select path="//mail:SearchResponse">
			<t:select path="//mail:m[@id='${account1.id}:${email01E.id}']" emptyset="1"/>
			<t:select path="//mail:m[@id='${account1.id}:${email01A.id}']"/>
		</t:select>
	 </t:response>
	</t:test>

	<t:test>
	 <t:request>
	   <SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
		   <query>inid:${account2.mountpoint.id} not from:(origination_address@origination_domain.com)</query>
	   </SearchRequest>
	 </t:request>
	  <t:response>
		<t:select path="//mail:SearchResponse">
			<t:select path="//mail:m[@id='${account1.id}:${email01E.id}']" emptyset="1"/>
			<t:select path="//mail:m[@id='${account1.id}:${email01A.id}']"/>
		</t:select>
	 </t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="NegateFolderMountpoints_from_SearchRequest2" type="bhr" >
	 <t:objective>
		Verify a search for "not from:(address)" in a remote folder
	 </t:objective>
	 <t:steps>
		email has "simple text string in the body" in the body of the message
		Search for inid:account1:folder not from:(address)
		Search for inid:account1:folder -from:(address)
	 </t:steps>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>inid:"${account1.id}:${account1.folder.inbox.id}" not from:(origination_address)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m[@id='${account1.id}:${email01E.id}']" emptyset="1"/>
				<t:select path="//mail:m[@id='${account1.id}:${email01A.id}']"/>
			</t:select>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest limit="100" xmlns="urn:zimbraMail" types="message">
				<query>inid:"${account1.id}:${account1.folder.inbox.id}" -from:(origination_address@origination_domain.com)</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m[@id='${account1.id}:${email01E.id}']" emptyset="1"/>
				<t:select path="//mail:m[@id='${account1.id}:${email01A.id}']"/>
			</t:select>
		</t:response>
	</t:test>

</t:test_case>


</t:tests>

