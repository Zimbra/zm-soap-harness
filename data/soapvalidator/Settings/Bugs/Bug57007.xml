<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="account1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.reply" value="reply content"/>

<t:property name="account2.name" value="account2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.reply" value="reply content"/>

<t:property name="account4.name" value="account3.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="message1.subject" value="subject1.${TIME}.${COUNTER}"/>
<t:property name="message1.content" value="content1.${TIME}.${COUNTER}"/>

<t:property name="message2.subject" value="subject2.${TIME}.${COUNTER}"/>
<t:property name="message2.content" value="content2.${TIME}.${COUNTER}"/>

<t:property name="message3.subject" value="subject3.${TIME}.${COUNTER}"/>
<t:property name="message3.content" value="content3.${TIME}.${COUNTER}"/>

<t:property name="message4.subject" value="subject4.${TIME}.${COUNTER}"/>
<t:property name="message4.content" value="content5.${TIME}.${COUNTER}"/>

<t:property name="message5.subject" value="subject5.${TIME}.${COUNTER}"/>
<t:property name="message5.content" value="content5.${TIME}.${COUNTER}"/>

<t:property name="message6a.subject" value="subject6a.${TIME}.${COUNTER}"/>
<t:property name="message6a.content" value="content6a.${TIME}.${COUNTER}"/>
<t:property name="message6b.subject" value="subject6b.${TIME}.${COUNTER}"/>
<t:property name="message6b.content" value="content6b.${TIME}.${COUNTER}"/>

<t:property name="message7.subject" value="subject7.${TIME}.${COUNTER}"/>
<t:property name="message7.content" value="content7.${TIME}.${COUNTER}"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<!-- authentication -->
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<!-- Login as the admin to get an auth token -->
<t:test_case testcaseid="acct1_setup" type="always" >
    <t:objective>create test account</t:objective>
	<t:steps>1. Login to admin.
			2. Create a test account.
	</t:steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="Acct_Maintenane_Forward_OOO_Enabled" type="sanity" bugids="57007">
    <t:objective>Verify that an out of office setting send automatic response, when account is inactive</t:objective>
    <t:steps>
	1. Login to Account1.
	2. Set the forwarding address to Account3 and OOO reply.
	2. From Account2 send  mail to Account1.
	3. Verify that the OOO reply is received at Account2
	4. Verify that the forwarded mail is received to Account3
    </t:steps>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<!-- Login as Account1 to change its settings  --> 
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <!-- Set Forwarding rule -->
     <t:test id="modifyprefsrequest1">
        <t:request>
			<ModifyPrefsRequest xmlns="urn:zimbraAccount">
				<pref name="zimbraPrefMailForwardingAddress">${account3.name}</pref>	
				<pref name="zimbraPrefMailLocalDeliveryDisabled">TRUE</pref>  			
			</ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>
    
	<!-- Set Out of Office rule -->
    <t:test >
        <t:request>
            <ModifyPrefsRequest xmlns="urn:zimbraAccount">
                <pref name="zimbraPrefOutOfOfficeReplyEnabled">TRUE</pref>
                <pref name="zimbraPrefOutOfOfficeReply">${account1.reply}</pref>
            </ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>

	<!-- As admin set the account1 to maintenance mode -->
	<t:property name="server.zimbraAdmin" value="${test_acct1.server}"/>
	
	<t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<t:test>
        <t:request>
            <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
                <a n="zimbraAccountStatus">maintenance</a>
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyAccountResponse/admin:account/admin:a[@n='zimbraAccountStatus']" match="maintenance"/>
        </t:response>
    </t:test>
	

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="msg01.file"		value="${testMailRaw.root}/email28/Msg01.txt"/>

	<!-- Login as Account2 -->
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<!-- Send message to account1 -->
	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
				<e t="t" a='${account1.name}'/>
				<su> ${message1.subject} </su>
				<mp ct="text/plain">
				    <content>${message1.content}</content>
				</mp>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
		 <t:select path="//mail:SendMsgResponse"/>
	   </t:response>
	</t:test>

   <t:delay sec="60"/>
      
	<!-- Login to account2 to check for ooo responses -->
 	<t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
     <t:test>
        <t:request>
           <SearchRequest xmlns="urn:zimbraMail" types="message">
           <query>${account1.reply}</query>
           </SearchRequest>
         </t:request>
          <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="message1.inbox"/> 
         </t:response>
     </t:test>    
	
	<!-- Doing a getmsgrequest of that message -->
    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.inbox}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
		<t:select path="//mail:GetMsgResponse/mail:m/mail:mp">
			<t:select attr="content" match="(?s)${account1.reply}.*"/>
		</t:select>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${test_acct3.server}"/>
    <!-- To check if the messages have got forwarded to Account3 from account1 --> 
    <!-- Login as Account3 -->
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
        
    <!-- Search for the sendmsg search text which would have got forwarded from Account1-->    
    <t:test>
        <t:request>
           <SearchRequest xmlns="urn:zimbraMail" types="message">
           <query>${message1.subject}</query>
           </SearchRequest>
         </t:request>
          <t:response>
                <t:select path="//mail:SearchResponse/mail:m[@l='2']" attr="id" set="message1.inbox"/> 
         </t:response>
     </t:test>
         
     <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.inbox}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
		<t:select path="//mail:GetMsgResponse/mail:m/mail:mp">	 		
		</t:select>
        </t:response>
    </t:test>
    

</t:test_case>

</t:tests>
