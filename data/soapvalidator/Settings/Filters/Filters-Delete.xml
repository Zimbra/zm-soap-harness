<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="folder.name" value="folder.${TIME}.${COUNTER}"/>
<t:property name="tag1.name" value="tag.${TIME}.${COUNTER}"/>

<t:property name="test_account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
<t:property name="filter2.name" value="filter2.${TIME}.${COUNTER}"/>
<t:property name="filter3.name" value="filter3.${TIME}.${COUNTER}"/>
<t:property name="filter4.name" value="filter4.${TIME}.${COUNTER}"/>

<t:property name="subject1" value="Subject 1"/>
<t:property name="subject2" value="Subject 2"/>
<t:property name="subject3" value="Subject 3"/>
<t:property name="subject4" value="Subject 4"/>

<t:property name="compose.content" value="Content in the message is contents..."/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>
<t:property name="test_acct3.server" value="NOT_DEFINED"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters_delete" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account3.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
	    </t:response>
    </t:test>

</t:test_case>




<t:test_case testcaseid="filters_delete01" type="bhr" >
    <t:objective> Delete a filter rule </t:objective>
    <t:steps> 1. Create a rule 
			  2. Delete above created filter rule.            
    </t:steps>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
	<t:property name="filter1.subject" value="filter1.${TIME}.${COUNTER}"/>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${filter1.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />                    
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    

    <!-- Delete the filter rule -->
    <t:test>
        <t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules/>
			</ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>        
        </t:response>
    </t:test>
    
	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    
		
</t:test_case>



<t:test_case testcaseid="filters_delete05" type="sanity">
    <t:objective>Verify that filter rules dont not get applied to the messages sent to test account</t:objective>
    <t:steps>1. Login to acocunt2
             2. Create a filter that flags a message
             3. Send mails to account1 with different subject
             4. Inject a message that matches
             5. Verify that the message is not flagged            
    </t:steps> 
    
	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


	<t:property name="message2.file" value="${testMailRaw.root}/email04/email04A.txt"/>
	<t:property name="message2.subject" value="email04A"/>

	<t:property name="filter2.name" value="filter1.${TIME}.${COUNTER}"/>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter2.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${message2.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />                    
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
    <!-- Delete the filter rule -->
    <t:test>
        <t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules/>
			</ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>        
        </t:response>
    </t:test>
    
	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
		
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message2.file}</filename>
			<to>${test_account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${message2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*" emptyset="1"/>
        </t:response>
    </t:test>   
	

</t:test_case>


<t:test_case testcaseid="filters_delete06" type="always" >
    <t:objective>Verify deleting a one rule does not afftect other rules created</t:objective>
    <t:steps> 1. Login to test account
              2. Create a rule with action "Mark As flagged"
              3. Create a rule with action "Mark As Read"
			  4. Delete a rule with action "Mark As flagged"
			  5. GetRulesRequest to verify that rule 1 is deleted 
			  6. Inject a matching message
			  7. Verify that mail is not flagged and is read (i.e. not unread)
    </t:steps>

	<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>
	
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>    

	<t:property name="message3.file" value="${testMailRaw.root}/email04/email04B.txt"/>
	<t:property name="message3.subject" value="email04B"/>

	<t:property name="filter3.name" value="filter1.${TIME}.${COUNTER}"/>
	<t:property name="filter4.name" value="filter1.${TIME}.${COUNTER}"/>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter3.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${message3.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />                    
                        </filterActions>
                    </filterRule>
                    
                    <filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${message3.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="read" />                    
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Delete the filter rule -->
    
    <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>    
                    <filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${message3.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="read" />                    
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message3.file}</filename>
			<to>${test_account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct3.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

	<t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${message3.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse" attr="f" match=".*f.*" emptyset="1"/> 
            <t:select path="//mail:SearchResponse" attr="f" match=".*u.*" emptyset="1"/> 
        </t:response>
    </t:test>

</t:test_case>


</t:tests>

