<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
<t:property name="filter2.name" value="filter2.${TIME}.${COUNTER}"/>
<t:property name="filter3.name" value="filter3.${TIME}.${COUNTER}"/>
<t:property name="root"				value="${soapxml.root}/MailClient/Mail/lmtp/MimeBasic/"/>
<t:property name="msg01.file"		value="${root}/lmtp_basic01.txt"/>
<t:property name="msg03.file"		value="${testMailRaw.root}/Bugs/21287/mime01.txt"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FilterHeader_AccountSetup" type="always" >
    <t:objective>create test account</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:property name="server.zimbraAccount" value="${account1.server}"/>

<t:test_case testcaseid="FilterHeader_01" type="bhr">
    <t:objective>Verify messages that match Header: are filtered</t:objective>
	    <t:steps> 
			  1. Login to test account 1
			  2. Create a filter based on "Header:" on "X-Spam-Score"
			  3. Inject a message to account1
			  4. Verify the message is filtered
        </t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
	  <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="X-Spam-Score" stringComparison="contains" value="0"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
   
	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="X-Spam-Score">0</header>
                <header a="To">${account2.name}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>to:${account2.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="FilterHeader_02" type="bhr">
    <t:objective>Verify messages that do not match Header: are not filtered</t:objective>
	    <t:steps> 
			  1. Login to test account 1
			  2. Create a filter based on "Header:" as "X-Spam-Score"
			  3. Inject a message to account1
			  4. Verify the message is not filtered
        </t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
    <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter2.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="X-Spam-Score" stringComparison="contains" value="0"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    

	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    

<t:property name="subject" value="filter header test"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="X-Spam-Score">1</header>
                <header a="Subject">${subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>${subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*" emptyset="1"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="FilterHeader_03" type="bhr" bugids="21287" >
    <t:objective>Verify header named Received</t:objective>
	    <t:steps> 
			  1. Login to test account 1
			  2. Create a filter based on "Header:" named "Recieved" contains "yahoo.com"
			  3. Inject a message to account1
			  4. Verify the message is  filtered
        </t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
    <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter3.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="Received" stringComparison="contains" value="yahoo.com"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    

	<t:property name="subject" value="bug21287"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg03.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>


</t:test_case>

</t:tests>

