<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
<t:property name="root" value="${soapxml.root}/Mail/LMTP/MimeBasic/"/>
<t:property name="msg01.file" value="${root}/lmtp-basic01.txt"/>
<t:property name="firstName" value="First.${TIME}.${COUNTER}"/>
<t:property name="lastName" value="Last.${TIME}.${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_AddressIn_AccountSetup" type="always" >
    <t:objective>create test account</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

	<t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>


</t:test_case>


<t:property name="server.zimbraAccount" value="${account1.server}"/>

<t:test_case testcaseid="Filter_AddressIn_01" type="bhr">
    <t:objective> Verify filter works if from field of the mail matches the contacts saved </t:objective>
	    <t:steps> 
			  1. Login to test account 1
			  2. Create a contact
			  3. Save a Rule as Addressbook -> FROM -> :in -> contacts
			  4. Inject a Mail with From field is one of the contact that is being saved.
			  5. Search mail get filtered.
        </t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	 
	<t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn>
                    <a n="firstName">${firstName}</a>
                    <a n="lastName">${lastName}</a>
                    <a n="email">${account2.name}</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	<addressBookTest header="from" stringComparison="contacts"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />       
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>

	
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="X-Spam-Score">0</header>
                <header a="From">${account2.name}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>from:${account2.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_AddressIn_02" type="bhr">
    <t:objective> Verify filter works if To field of the mail matches the contacts saved </t:objective>
	    <t:steps> 
			  1. Create a contact
			  2. Save a Rule as Addressbook -> To -> :in -> contacts
			  3. Inject a Mail with To field is one of the contact that is being saved.
			  4. Search mail get filtered.
        </t:steps>
  
	<t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn>
                    <a n="firstName">${firstName}</a>
                    <a n="lastName">${lastName}</a>
                    <a n="email">${account1.name}</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	<addressBookTest header="to" stringComparison="contacts"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="X-Spam-Score">0</header>
                <header a="From">${account2.name}</header>
                <header a="To">${account1.name}</header>
                <header a="Subject">TestSubject</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:TestSubject</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_AddressIn_03" type="bhr">
    <t:objective> Verify filter works if To field of the mail matches the contacts saved </t:objective>
	    <t:steps> 
			  1. Login to account3
			  2. Create a contact with for account1
			  3. Create a rule as Addressbook -> Cc -> :in -> contacts
			  3. Inject a Mail with Cc field is one of the contact that is being saved.
			  4. Search mail get filtered.
        </t:steps>

  <t:property name="server.zimbraAccount" value="${account3.server}"/>

	 <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn>
                    <a n="firstName">${firstName}</a>
                    <a n="lastName">${lastName}</a>
                    <a n="email">${account1.name}</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	<addressBookTest header="cc" stringComparison="contacts"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account3.server}</server>
            <modify>
                <header a="Cc">${account1.name}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>cc:${account1.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_AddressIn_04" type="bhr">
    <t:objective> Verify filter works if Cc field of the mail doesnot matches the contacts saved </t:objective>
	    <t:steps> 
			  1. Login to account3
			  2. Create a rule as Addressbook -> Cc -> not :in -> contacts
			  3. Inject a Mail with Cc field is one of the contact that is not in the address book.
			  4. Search mail get filtered.
        </t:steps>

  <t:property name="server.zimbraAccount" value="${account3.server}"/>

	 <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	<addressBookTest header="cc" negative="1" stringComparison="contacts"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
   
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account3.server}</server>
            <modify>
                <header a="Cc">${account2.name}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>cc:${account2.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_AddressIn_05" type="bhr">
    <t:objective> Verify filter works if Bcc field of the mail doesnot matches the contacts saved </t:objective>
	    <t:steps> 
			  1. Login to account3
			  2. Create a rule as Addressbook -> Bcc -> not :in -> contacts
			  3. Inject a Mail with Bcc field is one of the contact that is not in the address book.
			  4. Search mail get filtered.
        </t:steps>

  <t:property name="server.zimbraAccount" value="${account3.server}"/>

	 <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	<addressBookTest header="bcc" negative="1" stringComparison="contacts"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    <!-- Get the rules to check if it has got created -->
	<t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>
   
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account3.server}</server>
            <modify>
                <header a="Bcc">${account2.name}</header>
                <header a="Subject">Subject 1</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:Subject 1</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>

