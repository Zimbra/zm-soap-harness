<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="bug18104.dir" value="${testMailRaw.root}/bug18104"/>
<t:property name="filter1.name" value="18104bug${TIME}${COUNTER}"/>
<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters_body" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SaveRulesRequest_Body01" type="bhr" bugids="18104">
    <t:objective> Create a rule as "if body contains particular keyword, mark it as junk and verify that attachment are not searched" (binary attachment) </t:objective>
	<t:steps> 1. Login to account1
			  2. Create a rule as "if keyword "ERROR" is found mark the message as Junk"
			  3. Inject two mails one having that keyword in body and another with having keyword in attachment			 
			  4. Verify attachment search is excluded and meesage with that keyword in attachment is not marked as junk
	</t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	 <bodyTest value="ERROR"/>                  	     
                        </filterTests>
                        <filterActions> 
                        	<actionFileInto folderPath="/Junk" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
  
	
     <t:mailinjecttest >
        <t:lmtpInjectRequest>
		<foldername>${bug18104.dir}</foldername>
		<to>${account1.name}</to>
		<from>${nonZimbraUser.name}</from>
		<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


     <t:test>
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="folder.trash"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="folder.sent"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="folder.spam"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> in:${globals.spam} </query>
            </SearchRequest>
        </t:request>
        <t:response>
			<!--
				Message1 contains ERROR in the body (should be filtered)
				Message2 contains ERROR in an attachment (should not be filtered)
				DLL attached contains ERROR in the binary attachment (should not be filtered)
				Message4 does not contain ERROR (should not be filtered)
				Message5 contains ERROR in an RFC822 attachment (should be filtered)
			-->       
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Message1"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Message2" emptyset="1"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="DLL attached" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SaveRulesRequest_Body02" type="bhr" bugids="18104">
    <t:objective> Create a rule as "if body contains particular keyword, mark it as junk and verify that attachment are not searched" (RFC822 attachment)</t:objective>
	<t:steps> 1. Login to account1
			  2. Create a rule as "if keyword "ERROR" is found mark the message as Junk"
			  3. Inject two mails one having that keyword in body and another with having keyword in attachment			 
			  4. Verify attachment search is excluded and meesage with that keyword in attachment is not marked as junk
	</t:steps>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         	 <bodyTest value="ERROR"/>                  	     
                        </filterTests>
                        <filterActions> 
                        	<actionFileInto folderPath="/Junk" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

	
     <t:mailinjecttest >
        <t:lmtpInjectRequest>
		<foldername>${bug18104.dir}</foldername>
		<to>${account2.name}</to>
		<from>${nonZimbraUser.name}</from>
		<server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


     <t:test>
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="folder.trash"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="folder.sent"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="folder.spam"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> in:${globals.spam} </query>
            </SearchRequest>
        </t:request>
        <t:response>
			<!--
				Message1 contains ERROR in the body (should be filtered)
				Message2 contains ERROR in an attachment (should not be filtered)
				DLL attached contains ERROR in the binary attachment (should not be filtered)
				Message4 does not contain ERROR (should not be filtered)
				Message5 contains ERROR in an RFC822 attachment (should be filtered)
			-->       
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Message4" emptyset="1"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Message5"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>

