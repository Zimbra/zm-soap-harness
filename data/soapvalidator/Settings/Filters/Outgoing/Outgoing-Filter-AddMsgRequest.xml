<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="AccountSetup" type="always" >
    <t:objective>create test account</t:objective>
    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
        	<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
        	<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>
</t:test_case>

<t:property name="server.zimbraAccount" value="${account1.server}"/>

<t:test_case testcaseid="outgoing_filter_AddMsgRequest_01" type="bhr" >
    <t:objective> Verify outgoing messages get filtered when AddMsgRequest with filterSent="1"</t:objective>
	<t:steps> 
			  1. Login to test account 1
			  2. Create an outgoing message filter.
			  3. Inject message matching filter criteria AddMsgRequest and filterSent="1" 
			  4. Verify messages get flagged
 	</t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
<t:property name="subject" value="hello world"/>

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                    <filterRule name="${filter1.name}" active="1">
                        <filterTests condition="anyof">
                            <headerTest header="subject" stringComparison="contains" value="${subject}"/>
			      </filterTests>
                        <filterActions>
                            <actionFlag flagName="flagged" />
                        </filterActions>
                        <actionStop/>
                    </filterRule>
                </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>
    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="sent.folder.id"/>
        </t:response>
    </t:test>
    
    	<t:test >
		<t:request>
            <AddMsgRequest filterSent="1" xmlns="urn:zimbraMail">
                <m l="${sent.folder.id}" f="s">
                    <content>From: ${account1.name} 
To: foo@foo.com 
Subject: ${subject}
MIME-Version: 1.0 
Content-Type: text/plain; charset=utf-8 
Content-Transfer-Encoding: 7bit

simple text string in the body
					</content>
                </m>
            </AddMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:AddMsgResponse" />
		</t:response>
	</t:test>
	
	    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:${globals.sent} subject:(${subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match="sf"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="outgoing_filter_AddMsgRequest_02" type="bhr" >
    <t:objective> Verify outgoing message does not get filtered when AddMsgRequest with  filterSent="0"</t:objective>
	<t:steps> 
			  1. Login to test account 1
			  2. Create an outgoing message filter.
			  3. Inject message matching filter criteria AddMsgRequest and filterSent="0" 
			  4. Verify message does not get flagged
 	</t:steps>
        
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
<t:property name="subject2" value="Good Bye"/>

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                    <filterRule name="${filter1.name}" active="1">
                        <filterTests condition="anyof">
                            <headerTest header="subject" stringComparison="contains" value="${subject2}"/>
			      </filterTests>
                        <filterActions>
                            <actionFlag flagName="flagged" />
                        </filterActions>
                        <actionStop/>
                    </filterRule>
                </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>
    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="sent.folder.id"/>
        </t:response>
    </t:test>
    
    	<t:test >
		<t:request>
            <AddMsgRequest filterSent="0" xmlns="urn:zimbraMail">
                <m l="${sent.folder.id}" f="s">
                    <content>From: ${account1.name} 
To: foo@foo.com 
Subject: ${subject2}
MIME-Version: 1.0 
Content-Type: text/plain; charset=utf-8 
Content-Transfer-Encoding: 7bit

simple text string in the body
					</content>
                </m>
            </AddMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:AddMsgResponse" />
		</t:response>
	</t:test>
	
	    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:${globals.sent} subject:(${subject2})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match="s"/>
        </t:response>
    </t:test>
</t:test_case>
</t:tests>