<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="FilterRulesRequests_AccountSetup" type="always" >
    <t:objective>Account setup for all filterrules requests smoke test</t:objective>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
             
</t:test_case>


<t:test_case testcaseid="GetOutGoingFilterRulesRequest_basic_01" type="smoke">
<t:objective>Get Filter Rule</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
           
	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
            </GetOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="active" match="1"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="name" match="${filter1.name}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="stringComparison" match="contains"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="value" match="${filter1.subject}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="header" match="Subject"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="flagged"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="index" match="0"/>
        </t:response>
    </t:test>  
</t:test_case>

<t:test_case testcaseid="GetOutGoingFilterRulesRequest_basic_01" type="bhr">
<t:objective>Get Filter Rule</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
           
	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
            </GetOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="active" match="1"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="name" match="${filter1.name}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="stringComparison" match="contains"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests" attr="condition" match="anyof"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="value" match="${filter1.subject}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="header" match="Subject"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="flagged"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="index" match="0"/>
        </t:response>
    </t:test>  
</t:test_case>


<t:test_case testcaseid="GetOutGoingFilterRulesRequest_basic_02" type="bhr">
<t:objective>Get Filter Rule multiple rules</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
           
	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter1.name}" active="1">
						<filterTests condition="allof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                	<filterRule name="${filter2.name}" active="0">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter2.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>

                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
            </GetOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter1.name}']" attr="active" match="1"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter2.name}']" attr="active" match="0"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="name" match="${filter1.name}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="name" match="${filter2.name}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter1.name}']/mail:filterTests/mail:headerTest" attr="stringComparison" match="contains"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter1.name}']/mail:filterTests" attr="condition" match="allof"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter2.name}']/mail:filterTests" attr="condition" match="anyof"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter1.name}']/mail:filterTests/mail:headerTest" attr="value" match="${filter1.subject}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter1.name}']/mail:filterTests/mail:headerTest" attr="header" match="Subject"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter2.name}']/mail:filterActions/mail:actionFlag" attr="flagName" match="flagged"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter2.name}']/mail:filterActions/mail:actionFlag" attr="index" match="0"/>
        </t:response>
    </t:test>  
</t:test_case>


<t:test_case testcaseid="GetOutGoingFilterRulesRequest_basic_03" type="bhr">
<t:objective>Get Filter Rule multiple actions</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
           
	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	
	

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter1.name}" active="1">
						<filterTests condition="allof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionFileInto folderPath="${folder1.name}" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
            </GetOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="active" match="1"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule" attr="name" match="${filter1.name}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="stringComparison" match="contains"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests" attr="condition" match="allof"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="value" match="${filter1.subject}"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest" attr="header" match="Subject"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="flagName" match="flagged"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag" attr="index" match="0"/>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFileInto" attr="folderPath" match="${folder1.name}"/>
        </t:response>
    </t:test>  
</t:test_case>
</t:tests>