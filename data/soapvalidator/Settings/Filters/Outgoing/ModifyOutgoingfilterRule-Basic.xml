<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="FilterRulesRequests_AccountSetup" type="always" >
    <t:objective>Account setup</t:objective>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

             
</t:test_case>


<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_01" type="bhr" >
    <t:objective>Check outgoing message matching filter condition on subject get flagged</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter1.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:sent subject:(${filter1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter1.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='sf']" />
        </t:response>
    </t:test>	

</t:test_case>

<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_02" type="bhr" >
    <t:objective>Check outgoing message matching filter condition on To get flagged</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test id="filters_basic01a">
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="To" stringComparison="contains" value="${account2.name}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter2.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:sent subject:(${filter2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter2.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='sf']" />
        </t:response>
    </t:test>	

</t:test_case>

<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_02" type="bhr" >
    <t:objective>Check outgoing message matching filter condition on To get flagged</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	

   <t:test id="filters_basic01a">
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="To" stringComparison="contains" value="${account2.name}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter2.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:sent subject:(${filter2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter2.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='sf']" />
        </t:response>
    </t:test>	

</t:test_case>

<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_03" type="bhr" >
    <t:objective>Check outgoing message matching filter condition on subject filed into another folder.</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter3.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
	<t:property name="filter3.subject" value="filter${TIME}${COUNTER}"/>
	
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns = "urn:zimbraMail">
                <folder name = "${folder1.name}" l = "1"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateFolderResponse/mail:folder" attr = "id" set = "folder1.id"/>
        </t:response>
    </t:test>
    

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter3.name}" active="1">
						<filterTests condition="allof">
							<headerTest header="To" stringComparison="contains" value="${account2.name}" />
							<headerTest header="Subject" stringComparison="contains" value="${filter3.subject}" />
						</filterTests>
						<filterActions>
							<actionFileInto folderPath="${folder1.name}" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter3.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message3.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:${folder1.name} subject:(${filter3.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter3.subject}"/>
        </t:response>
    </t:test>	

</t:test_case>

<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_04" type="bhr" >
    <t:objective>Check inactive filter  rule not applied .</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter4.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="folder2.name" value="folder${TIME}${COUNTER}"/>
	<t:property name="filter4.subject" value="filter${TIME}${COUNTER}"/>
	
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns = "urn:zimbraMail">
                <folder name = "${folder2.name}" l = "1"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateFolderResponse/mail:folder" attr = "id" set = "folder2.id"/>
        </t:response>
    </t:test>
    

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter4.name}" active="0">
						<filterTests condition="allof">
							<headerTest header="To" stringComparison="contains" value="${account2.name}" />
							<headerTest header="Subject" stringComparison="contains" value="${filter4.subject}" />
						</filterTests>
						<filterActions>
							<actionFileInto folderPath="${folder2.name}" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter4.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message4.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:${folder2.name} subject:(${filter4.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>	

</t:test_case>

<t:test_case testcaseid="ModifyOutGoingFilterRulesRequest_basic_05" type="bhr" >
    <t:objective>Modify filter rule request with multiple action .</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter5.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="folder3.name" value="folder${TIME}${COUNTER}"/>
	<t:property name="filter5.subject" value="filter${TIME}${COUNTER}"/>
	
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns = "urn:zimbraMail">
                <folder name = "${folder3.name}" l = "1"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateFolderResponse/mail:folder" attr = "id" set = "folder2.id"/>
        </t:response>
    </t:test>
    

   <t:test>
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter5.name}" active="1">
						<filterTests condition="allof">
							<headerTest header="To" stringComparison="contains" value="${account2.name}" />
							<headerTest header="Subject" stringComparison="contains" value="${filter5.subject}" />
						</filterTests>
						<filterActions>
							<actionFileInto folderPath="${folder3.name}" />
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su>${filter5.subject}</su>
                    <mp ct="text/plain">
                        <content>Hello</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message5.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>in:${folder3.name} subject:(${filter5.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
              <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${filter5.subject}"/>
            <t:select path="//mail:SearchResponse/mail:m[@f='sf']" />
        </t:response>
    </t:test>	

</t:test_case>

</t:tests>

