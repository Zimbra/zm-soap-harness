<t:tests xmlns:t="urn:zimbraTestHarness">
    <!-- Test accounts declaration -->
    <t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />

    <!-- Variables declaration -->
    <t:property name="folder_inbox" value="Inbox" />
    <t:property name="text"       value="$\{text}"/>
    <t:property name="digit"      value="$\{digit}"/>
    <t:property name="negative"   value="$\{negative}"/>
    <t:property name="undefined"  value="$\{undefined}"/>

    <!-- Sieve rules declaration -->
    <!-- Test case patterns
      # : test   | type   | comparator      | l.h.s                        | r.h.s 
      01: string | :value | i;ascii-casemap | variable (text)              | literal (single character) 
      02: string | :value | i;ascii-casemap | literal (single character)   | variable (text)
      03: string | :value | i;ascii-casemap | variable (text)              | literal (text) 
      04: string | :value | i;ascii-casemap | undefined variable           | literal (text) 
      05: string | :value | i;ascii-casemap | literal (text)               | variable 
      06: string | :value | i;ascii-casemap | literal (text)               | undefined variable 
      07: string | :value | i;ascii-casemap | list of variable (inc. undefined variable) | list of literal 
      08: string | :value | i;ascii-casemap | list of literal              | list of variable (inc. undefined variable) 
      09: string | :value | - (default i;ascii-numeric) | variable (text)  | literal  (digit)
      10: string | :value | - (default i;ascii-numeric) | literal  (digit) | variable (text)
      11: string | :value | - (default i;ascii-numeric) | variable (digit) | literal  (digit)
      12: string | :value | - (default i;ascii-numeric) | literal  (digit) | variable (digit)
      13: string | :value | i;ascii-numeric             | variable (digit) | literal  (digit)
      14: string | :value | i;ascii-numeric             | literal  (digit) | variable (digit)
      15: string | :value | i;ascii-numeric             | variable (text)  | literal  (text)
      16: string | :value | - (default i;ascii-numeric) | variable (text)           | undefined variable
      17: string | :value | - (default i;ascii-numeric) | undefined variable        | variable (text)
      18: string | :value | - (default i;ascii-numeric) | undefined variable        | undefined variable
      19: string | :value | - (default i;ascii-numeric) | undefined variable        | variable (digit)
      20: string | :value | - (default i;ascii-numeric) | variable (digit)          | undefined variable
      21: string | :value | i;octet         | variable (text)              | literal (text)
      22: string | :value | i;octet         | variable (text)              | literal (single character)
      23: string | :value | i;octet         | literal (text)               | variable (text)
      24: string | :value | i;octet         | undefined variable           | empty string
      25: string | :value | i;octet         | undefined variable           | literal (text)
      26: string | :value | i;octet         | literal (text)               | undefined variable
      27: string | :count | i;ascii-numeric | variable (text)              | literal "1"
      28: string | :count | i;ascii-numeric | literal "1"                  | variable (digit)
      29: string | :count | i;ascii-numeric | undefined variable           | literal "0"
      30: string | :count | i;ascii-numeric | variable (text)              | variable (text)
      31: string | :count | i;ascii-numeric | variable (text)              | undefined variable
      32: string | :count | i;ascii-numeric | undefined variable           | variable (text)
      33: string | :count | i;ascii-numeric | undefined variable           | undefined variable
      34: string | :count | i;ascii-numeric | list of variable             | literal "1"
      35: string | :count | i;ascii-numeric | list of variable (inc. undefined variable) | literal "2"
      36: string | :count | i;ascii-numeric | list of variable (inc. undefined variable) | undefined variable
      37: string | :count | i;ascii-numeric | list of variable (inc. undefined variable) | list of literal
      38: string | :count | i;ascii-numeric | list of variable (inc. undefined variable) | list of literal (inc. variable (text & digit))
    -->
    
    <t:property name="sieve_rule1" value='require ["tag", "variables", "comparator-i;ascii-numeric", "relational"];
set "text" "test text";
set "digit" "7";
if string :value "gt" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-1-YES"; }
if string :value "ge" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-2-YES"; }
if string :value "lt" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-3-NO"; }
if string :value "le" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-4-NO"; }
if string :value "eq" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "${text}" "T" { tag "01-6-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-1-NO"; }
if string :value "ge" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-2-NO"; }
if string :value "lt" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-3-YES"; }
if string :value "le" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-4-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "T" "${text}" { tag "02-6-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-1-YES"; }
if string :value "ge" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-2-YES"; }
if string :value "lt" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-3-NO"; }
if string :value "le" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-4-NO"; }
if string :value "eq" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "${text}" "Test"      { tag "03-6-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" "${text}" "Test Text" { tag "03-7-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-1-NO"; }
if string :value "ge" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-2-NO"; }
if string :value "lt" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-3-YES"; }
if string :value "le" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-4-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "${undefined}" "Test" { tag "04-6-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-1-NO"; }
if string :value "ge" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-2-NO"; }
if string :value "lt" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-3-YES"; }
if string :value "le" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-4-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "Test" "${text}"      { tag "05-6-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" "Test Text" "${text}" { tag "05-7-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-1-YES"; }
if string :value "ge" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-2-YES"; }
if string :value "lt" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-3-NO"; }
if string :value "le" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-4-NO"; }
if string :value "eq" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" "Test" "${undefined}" { tag "06-6-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-1-YES"; }
if string :value "ge" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-2-YES"; }
if string :value "lt" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-3-YES"; }
if string :value "le" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-4-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-5-NO"; }
if string :value "ne" :comparator "i;ascii-casemap" ["${text}","${undefined}"] ["abc", "T"] { tag "07-6-YES"; }

if string :value "gt" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-1-YES"; }
if string :value "ge" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-2-YES"; }
if string :value "lt" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-3-YES"; }
if string :value "le" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-4-YES"; }
if string :value "eq" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-5-YES"; }
if string :value "ne" :comparator "i;ascii-casemap" ["", "abc"] ["${text}","${undefined}"]  { tag "08-6-YES"; }

if string :value "gt" "${text}" "1"  { tag "09-1-YES"; }
if string :value "ge" "${text}" "1"  { tag "09-2-YES"; }
if string :value "lt" "${text}" "1"  { tag "09-3-NO"; }
if string :value "le" "${text}" "1"  { tag "09-4-NO"; }
if string :value "eq" "${text}" "1"  { tag "09-5-NO"; }
if string :value "ne" "${text}" "1"  { tag "09-6-YES"; }

if string :value "gt" "1" "${text}"  { tag "10-1-NO"; }
if string :value "ge" "1" "${text}"  { tag "10-2-NO"; }
if string :value "lt" "1" "${text}"  { tag "10-3-YES"; }
if string :value "le" "1" "${text}"  { tag "10-4-YES"; }
if string :value "eq" "1" "${text}"  { tag "10-5-NO"; }
if string :value "ne" "1" "${text}"  { tag "10-6-YES"; }

if string :value "gt" "${digit}" "1" { tag "11-1-YES"; }
if string :value "ge" "${digit}" "1" { tag "11-2-YES"; }
if string :value "lt" "${digit}" "1" { tag "11-3-NO"; }
if string :value "le" "${digit}" "1" { tag "11-4-NO"; }
if string :value "eq" "${digit}" "1" { tag "11-5-NO"; }
if string :value "ne" "${digit}" "1" { tag "11-6-YES"; }

if string :value "gt" "1" "${digit}" { tag "12-1-NO"; }
if string :value "ge" "1" "${digit}" { tag "12-2-NO"; }
if string :value "lt" "1" "${digit}" { tag "12-3-YES"; }
if string :value "le" "1" "${digit}" { tag "12-4-YES"; }
if string :value "eq" "1" "${digit}" { tag "12-5-NO"; }
if string :value "ne" "1" "${digit}" { tag "12-6-YES"; }

if string :value "gt" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-1-NO"; }
if string :value "ge" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-2-YES"; }
if string :value "lt" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-3-NO"; }
if string :value "le" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-4-YES"; }
if string :value "eq" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-5-YES"; }
if string :value "ne" :comparator "i;ascii-numeric" "${digit}" "7" { tag "13-6-NO"; }
if string :value "gt" :comparator "i;ascii-numeric" "${digit}" "#" { tag "13-7-NO"; }
if string :value "gt" :comparator "i;ascii-numeric" "${digit}" "@" { tag "13-8-NO"; }

if string :value "gt" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-1-NO"; }
if string :value "ge" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-2-YES"; }
if string :value "lt" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-3-NO"; }
if string :value "le" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-4-YES"; }
if string :value "eq" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-5-YES"; }
if string :value "ne" :comparator "i;ascii-numeric" "7" "${digit}" { tag "14-6-NO"; }
if string :value "gt" :comparator "i;ascii-numeric" "#" "${digit}" { tag "14-7-YES"; }
if string :value "gt" :comparator "i;ascii-numeric" "@" "${digit}" { tag "14-8-YES"; }

if string :value "gt" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-1-NO"; }
if string :value "ge" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-2-YES"; }
if string :value "lt" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-3-NO"; }
if string :value "le" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-4-YES"; }
if string :value "eq" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-5-YES"; }
if string :value "ne" :comparator "i;ascii-numeric" "${text}" "another text" { tag "15-6-NO"; }

if string :value "gt" "${text}" "${undefined}" { tag "16-1-NO"; }
if string :value "ge" "${text}" "${undefined}" { tag "16-2-YES"; }
if string :value "lt" "${text}" "${undefined}" { tag "16-3-NO"; }
if string :value "le" "${text}" "${undefined}" { tag "16-4-YES"; }
if string :value "eq" "${text}" "${undefined}" { tag "16-5-YES"; }
if string :value "ne" "${text}" "${undefined}" { tag "16-6-NO"; }

if string :value "gt" "${undefined}" "${text}" { tag "17-1-NO"; }
if string :value "ge" "${undefined}" "${text}" { tag "17-2-YES"; }
if string :value "lt" "${undefined}" "${text}" { tag "17-3-NO"; }
if string :value "le" "${undefined}" "${text}" { tag "17-4-YES"; }
if string :value "eq" "${undefined}" "${text}" { tag "17-5-YES"; }
if string :value "ne" "${undefined}" "${text}" { tag "17-6-NO"; }

if string :value "gt" "${undefined}" "${undefined}" { tag "18-1-NO"; }
if string :value "ge" "${undefined}" "${undefined}" { tag "18-2-YES"; }
if string :value "lt" "${undefined}" "${undefined}" { tag "18-3-NO"; }
if string :value "le" "${undefined}" "${undefined}" { tag "18-4-YES"; }
if string :value "eq" "${undefined}" "${undefined}" { tag "18-5-YES"; }
if string :value "ne" "${undefined}" "${undefined}" { tag "18-6-NO"; }

if string :value "gt" "${undefined}" "${digit}" { tag "19-1-YES"; }
if string :value "ge" "${undefined}" "${digit}" { tag "19-2-YES"; }
if string :value "lt" "${undefined}" "${digit}" { tag "19-3-NO"; }
if string :value "le" "${undefined}" "${digit}" { tag "19-4-NO"; }
if string :value "eq" "${undefined}" "${digit}" { tag "19-5-NO"; }
if string :value "ne" "${undefined}" "${digit}" { tag "19-6-YES"; }

if string :value "gt" "${digit}" "${undefined}" { tag "20-1-NO"; }
if string :value "ge" "${digit}" "${undefined}" { tag "20-2-NO"; }
if string :value "lt" "${digit}" "${undefined}" { tag "20-3-YES"; }
if string :value "le" "${digit}" "${undefined}" { tag "20-4-YES"; }
if string :value "eq" "${digit}" "${undefined}" { tag "20-5-NO"; }
if string :value "ne" "${digit}" "${undefined}" { tag "20-6-YES"; }

if string :value "gt" :comparator "i;octet" "${text}" "test"      { tag "21-1-YES"; }
if string :value "ge" :comparator "i;octet" "${text}" "test"      { tag "21-2-YES"; }
if string :value "lt" :comparator "i;octet" "${text}" "test"      { tag "21-3-NO"; }
if string :value "le" :comparator "i;octet" "${text}" "test"      { tag "21-4-NO"; }
if string :value "eq" :comparator "i;octet" "${text}" "test"      { tag "21-5-NO"; }
if string :value "ne" :comparator "i;octet" "${text}" "test"      { tag "21-6-YES"; }
if string :value "eq" :comparator "i;octet" "${text}" "test text" { tag "21-7-YES"; }

if string :value "gt" :comparator "i;octet" "${text}" "u"         { tag "22-1-NO"; }
if string :value "ge" :comparator "i;octet" "${text}" "u"         { tag "22-2-NO"; }
if string :value "lt" :comparator "i;octet" "${text}" "u"         { tag "22-3-YES"; }
if string :value "le" :comparator "i;octet" "${text}" "u"         { tag "22-4-YES"; }
if string :value "eq" :comparator "i;octet" "${text}" "u"         { tag "22-5-NO"; }
if string :value "ne" :comparator "i;octet" "${text}" "u"         { tag "22-6-YES"; }

if string :value "gt" :comparator "i;octet" "test" "${text}"      { tag "23-1-NO"; }
if string :value "ge" :comparator "i;octet" "test" "${text}"      { tag "23-2-NO"; }
if string :value "lt" :comparator "i;octet" "test" "${text}"      { tag "23-3-YES"; }
if string :value "le" :comparator "i;octet" "test" "${text}"      { tag "23-4-YES"; }
if string :value "eq" :comparator "i;octet" "test" "${text}"      { tag "23-5-NO"; }
if string :value "ne" :comparator "i;octet" "test" "${text}"      { tag "23-6-YES"; }
if string :value "eq" :comparator "i;octet" "test text" "${text}" { tag "23-7-YES"; }

if string :value "gt" :comparator "i;octet" "${undefined}" ""     { tag "24-1-NO"; }
if string :value "ge" :comparator "i;octet" "${undefined}" ""     { tag "24-2-YES"; }
if string :value "lt" :comparator "i;octet" "${undefined}" ""     { tag "24-3-NO"; }
if string :value "le" :comparator "i;octet" "${undefined}" ""     { tag "24-4-YES"; }
if string :value "eq" :comparator "i;octet" "${undefined}" ""     { tag "24-5-YES"; }
if string :value "ne" :comparator "i;octet" "${undefined}" ""     { tag "24-6-NO"; }

if string :value "gt" :comparator "i;octet" "${undefined}" "test" { tag "25-1-NO"; }
if string :value "ge" :comparator "i;octet" "${undefined}" "test" { tag "25-2-NO"; }
if string :value "lt" :comparator "i;octet" "${undefined}" "test" { tag "25-3-YES"; }
if string :value "le" :comparator "i;octet" "${undefined}" "test" { tag "25-4-YES"; }
if string :value "eq" :comparator "i;octet" "${undefined}" "test" { tag "25-5-NO"; }
if string :value "ne" :comparator "i;octet" "${undefined}" "test" { tag "25-6-YES"; }

if string :value "gt" :comparator "i;octet" "test" "${undefined}" { tag "26-1-YES"; }
if string :value "ge" :comparator "i;octet" "test" "${undefined}" { tag "26-2-YES"; }
if string :value "lt" :comparator "i;octet" "test" "${undefined}" { tag "26-3-NO"; }
if string :value "le" :comparator "i;octet" "test" "${undefined}" { tag "26-4-NO"; }
if string :value "eq" :comparator "i;octet" "test" "${undefined}" { tag "26-5-NO"; }
if string :value "ne" :comparator "i;octet" "test" "${undefined}" { tag "26-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-2-YES"; }
if string :count "lt" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-3-NO"; }
if string :count "le" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-5-YES"; }
if string :count "ne" :comparator "i;ascii-numeric" "${text}" "1" { tag "27-6-NO"; }

if string :count "gt" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" "1" "${digit}" { tag "28-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-2-YES"; }
if string :count "lt" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-3-NO"; }
if string :count "le" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-5-YES"; }
if string :count "ne" :comparator "i;ascii-numeric" "${undefined}" "0" { tag "29-6-NO"; }

if string :count "gt" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" "${text}" "${text}" { tag "30-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" "${text}" "${undefined}" { tag "31-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" "${undefined}" "${text}" { tag "32-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" "${undefined}" "${undefined}" { tag "33-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-2-YES"; }
if string :count "lt" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-3-NO"; }
if string :count "le" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-5-YES"; }
if string :count "ne" :comparator "i;ascii-numeric" ["${text}"] "1" { tag "34-6-NO"; }

if string :count "gt" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-2-YES"; }
if string :count "lt" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-3-NO"; }
if string :count "le" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-5-YES"; }
if string :count "ne" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "2" { tag "35-6-NO"; }

if string :count "gt" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" ["${text}","${undefined}","${digit}"] "${undefined}" { tag "36-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-1-YES"; }
if string :count "ge" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-2-YES"; }
if string :count "lt" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-5-YES"; }
if string :count "ne" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["3","2","1","0"] { tag "37-6-YES"; }

if string :count "gt" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-1-NO"; }
if string :count "ge" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-2-NO"; }
if string :count "lt" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-3-YES"; }
if string :count "le" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-4-YES"; }
if string :count "eq" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-5-NO"; }
if string :count "ne" :comparator "i;ascii-numeric" ["${text}","${undefined}"] ["${text}","${digit}"] { tag "38-6-YES"; }
'/>

    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup1_create_account" type="always">
        <t:objective>create test accounts</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="ZCS-863_rule1" type="smoke" bugids="ZCS-863">
        <t:objective>Verify the various combination of parameters with :value and :count for the test "string"</t:objective>
        <t:test>
            <t:request>
                <ModifyConfigRequest xmlns="urn:zimbraAdmin">
                    <a n="zimbraCustomMimeHeaderNameAllowed">X-Test-Header</a>
                </ModifyConfigRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyConfigResponse" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account1.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m f="!">
                        <e t="t" a="${test_account1.name}" />
                        <su>Test message</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="sendmsg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:delay sec="5"/>
        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match=".*YES.*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match=".*NO.*" emptyset="1" />
            </t:response>
        </t:test>
    </t:test_case>
</t:tests>
