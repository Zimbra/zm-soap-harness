<t:tests xmlns:t="urn:zimbraTestHarness">
    <!-- Test accounts declaration -->
    <t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account4.name" value="test4.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account5.name" value="test5.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account6.name" value="test6.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account7.name" value="test7.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account8.name" value="test8.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account9.name" value="test9.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account10.name" value="test10.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account11.name" value="test11.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account12.name" value="test12.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_notify_account1.name" value="notify1*abc?123.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_redirect_account1.name" value="redirect1*abc?123.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="account_partial_1" value=".${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_notify_account2.name" value="notify2*abc?123${account_partial_1}" />
    <t:property name="account_partial_2" value=".${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_redirect_account2.name" value="redirect2*abc?123${account_partial_2}" />
    <t:property name="account_partial_3" value=".${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_notify_account3.name" value="notify3\\*abc\\?123${account_partial_3}" />
    <t:property name="account_partial_4" value=".${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_redirect_account3.name" value="redirect3\\*abc\\?123${account_partial_4}" />

    <!-- Variables declaration -->
    <t:property name="folder_inbox" value="Inbox" />
    <t:property name="backslash" value="\\\\" />
    <t:property name="notify_body_variable" value="$\{notify_body}"/>
    <t:property name="msg01.file" value="${testMailRaw.root}/bug107381/mime.txt" />

    <!-- Sieve rules declaration -->
    <!-- Match-type :matches - * and ? sholud be treated as wildcard -->
    <t:property name="sieve_rule1" value='require ["tag", "editheader", "envelope", "variables"];
if address :matches "From" "test*1?3@zimbra.com" {
    tag "test_address";
}
if header :matches "From" "test*1?3@zimbra.com" {
    tag "test_header";
}
if envelope :matches "From" "test*1?3@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "REPLACED" :matches "X-Test-Header-1" "test*1?3";
deleteheader :matches "X-Test-Header-2" "test*1?3";
if string :matches "test*abc?123" "test*1?3" {
    tag "test_string";
}
'/>

    <!-- Match-type :matches - \* and \? should be treated as wildcard * and ?-->
    <t:property name="sieve_rule2" value='require ["tag", "editheader", "envelope", "variables"];
if address :matches "From" "test${backslash}*1${backslash}?3@zimbra.com" {
    tag "test_address";
}
if header :matches "From" "test${backslash}*1${backslash}?3@zimbra.com" {
    tag "test_header";
}
if envelope :matches "From" "test${backslash}*1${backslash}?3@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "REPLACED" :matches "X-Test-Header-1" "test${backslash}*1${backslash}?3";
deleteheader :matches "X-Test-Header-2" "test${backslash}*1${backslash}?3";
if string :matches "test*abc?123" "test${backslash}*1${backslash}?3" {
    tag "test_string";
}
'/>

    <!-- Match-type :matches - \\* and \\? should be treated as a character '*' and '?' -->
    <t:property name="sieve_rule3" value='require ["tag", "editheader", "envelope", "variables"];
if address :matches "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_address";
}
if address :matches "From" "test${backslash}${backslash}*1${backslash}${backslash}?3@zimbra.com" {
    tag "test_address-should-not-be-added";
}
if header :matches "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_header";
}
if header :matches "From" "test${backslash}${backslash}*1${backslash}${backslash}?3@zimbra.com" {
    tag "test_header-should-not-be-added";
}
if envelope :matches "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_envelope";
}
if envelope :matches "From" "test${backslash}${backslash}*1${backslash}${backslash}?3@zimbra.com" {
    tag "test_envelope-should-not-be-added";
}
replaceheader :newvalue "REPLACED" :matches "X-Test-Header-1" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
deleteheader :matches "X-Test-Header-2" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
replaceheader :newvalue "SHOULD-NOT-BE-REPLACED" :matches "X-Test-Header-3" "test${backslash}${backslash}*1${backslash}${backslash}?3";
deleteheader :matches "X-Test-Header-4" "test${backslash}${backslash}*1${backslash}${backslash}?3";
if string :matches "test*abc?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string";
}
if string :matches "test*abc?123" "test${backslash}${backslash}*1${backslash}${backslash}?3" {
    tag "test_string-should-not-be-added";
}
'/>

    <!-- Match-type :is - * and ? should be matched with a character '*' and '?' without being escaped-->
    <t:property name="sieve_rule4" value='require ["tag", "editheader", "envelope", "variables"];
if address :is "From" "test*abc?123@zimbra.com" {
    tag "test_address";
}
if header :is "From" "test*abc?123@zimbra.com" {
    tag "test_header";
}
if envelope :is "From" "test*abc?123@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "REPLACED" :is "X-Test-Header-1" "test*abc?123";
deleteheader :is "X-Test-Header-2" "test*abc?123";
if string :is "test*abc?123" "test*abc?123" {
    tag "test_string";
}
'/>
    <!-- Match-type :is - "\*" and "\?" should be matched with a character '*' and '?'-->
    <t:property name="sieve_rule5" value='require ["tag", "editheader", "envelope", "variables"];
if address :is "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_address";
}
if header :is "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_header";
}
if envelope :is "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_envelope";
}
if string :is "test*abc?123" "test${backslash}*abc${backslash}?123" {
    tag "test_string";
}
replaceheader :newvalue "REPLACED" :is "X-Test-Header-1" "test${backslash}*abc${backslash}?123";
deleteheader :is "X-Test-Header-2" "test${backslash}*abc${backslash}?123";
'/>

    <!-- Match-type :is - \\* and \\? should be treated as a string "\*" and "\?".
         A double-quotation in Envelope From is removed during lmtpinject (bug107618).
         Test Address cannot match a double quotation (bug107617)
    -->
    <t:property name="sieve_rule6" value='require ["tag", "editheader", "envelope", "variables"];
if address :is "Cc" "${backslash}"test${backslash}${backslash}*abc${backslash}${backslash}?123${backslash}"@zimbra.com" {
    tag "test_address";
}
if address :is "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_address-should-not-be-added";
}
if header :is "Cc" "${backslash}"test${backslash}${backslash}*abc${backslash}${backslash}?123${backslash}"@zimbra.com" {
    tag "test_header";
}
if header :is "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_header-should-not-be-added";
}
if envelope :is "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "SHOULD-NOT-BE-REPLACED" :is "X-Test-Header-1" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
deleteheader :is "X-Test-Header-2" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
replaceheader :newvalue "REPLACED" :is "X-Test-Header-5" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
deleteheader :is "X-Test-Header-6" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
if string :is "test${backslash}${backslash}*abc${backslash}${backslash}?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string";
}
if string :is "test${backslash}*abc${backslash}?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string-should-not-be-added";
}
if string :is "test*abc?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string-should-not-be-added";
}
'/>

    <!-- Match-type :contains - * and ? should be matched with a character '*' and '?' without being escaped-->
    <t:property name="sieve_rule7" value='require ["tag", "editheader", "envelope", "variables"];
if address :contains "From" "test*abc?123@zimbra.com" {
    tag "test_address";
}
if header :contains "From" "test*abc?123@zimbra.com" {
    tag "test_header";
}
if envelope :contains "From" "test*abc?123@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "REPLACED" :contains "X-Test-Header-1" "test*abc?123";
deleteheader :contains "X-Test-Header-2" "test*abc?123";
if string :contains "test*abc?123" "test*abc?123" {
    tag "test_string";
}
'/>

    <!-- Match-type :contains - "\*" and "\?" should be matched with a character '*' and '?'-->
    <t:property name="sieve_rule8" value='require ["tag", "editheader", "envelope", "variables"];
if address :contains "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_address";
}
if header :contains "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_header";
}
if envelope :contains "From" "test${backslash}*abc${backslash}?123@zimbra.com" {
    tag "test_envelope";
}
if string :contains "test*abc?123" "test${backslash}*abc${backslash}?123" {
    tag "test_string";
}
replaceheader :newvalue "REPLACED" :contains "X-Test-Header-1" "test${backslash}*abc${backslash}?123";
deleteheader :contains "X-Test-Header-2" "test${backslash}*abc${backslash}?123";
'/>

    <!-- Match-type :contains - \\* and \\? should be treated as a string "\*" and "\?".
         A double-quotation in Envelope From is removed during lmtpinject (bug107618).
         Test Address cannot match a double quotation (bug107617)
    -->
    <t:property name="sieve_rule9" value='require ["tag", "editheader", "envelope", "variables"];
if address :contains "Cc" "${backslash}"test${backslash}${backslash}*abc${backslash}${backslash}?123${backslash}"@zimbra.com" {
    tag "test_address";
}
if address :contains "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_address-should-not-be-added";
}
if header :is "Cc" "${backslash}"test${backslash}${backslash}*abc${backslash}${backslash}?123${backslash}"@zimbra.com" {
    tag "test_header";
}
if header :contains "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_header-should-not-be-added";
}
if envelope :contains "From" "test${backslash}${backslash}*abc${backslash}${backslash}?123@zimbra.com" {
    tag "test_envelope";
}
replaceheader :newvalue "SHOULD-NOT-BE-REPLACED" :contains "X-Test-Header-1" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
deleteheader :contains "X-Test-Header-2" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
replaceheader :newvalue "REPLACED" :contains "X-Test-Header-5" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
deleteheader :contains "X-Test-Header-6" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
if string :contains "test${backslash}${backslash}*abc${backslash}${backslash}?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string";
}
if string :contains "test${backslash}*abc${backslash}?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string-should-not-be-added";
}
if string :contains "test*abc?123" "test${backslash}${backslash}*abc${backslash}${backslash}?123" {
    tag "test_string-should-not-be-added";
}
'/>

    <!-- Other fields - '*' and '?' should be treated as a character -->
    <t:property name="sieve_rule10" value='require ["fileinto", "tag", "enotify", "editheader", "variables"];
addheader :last "X-New-Header-1" "test*abc?123";
addheader :last "X-New-Header-2-test*abc?123" "ADDED";
replaceheader :newvalue "test*abc?123" :matches "X-Test-Header-7" "*";
replaceheader :newname "X-New-Header-3-test*abc?123" :newvalue "REPLACED" :matches "X-Test-Header-8" "*";
tag "test*a1?b1";
fileinto "test*a1?b1";
notify :from "notification_test@${defaultdomain.name}" :message "test*abc?123"
"mailto:${test_notify_account1.name}?body=NotificationMessage1";
set :encodeurl "notify_body" "test*abc?123";
notify :from "notification_test@${defaultdomain.name}" :message "NotificationMessage2"
"mailto:${test_notify_account1.name}?body=${notify_body_variable}";
redirect "${test_redirect_account1.name}";
keep;
' />

    <!-- Other fields - '\*' and '\?' should be treated as a character '*' and '?'-->
    <t:property name="sieve_rule11" value='require ["fileinto", "tag", "enotify", "editheader", "variables"];
addheader :last "X-New-Header-1" "test${backslash}*abc${backslash}?123";
addheader :last "X-New-Header-2-test${backslash}*abc${backslash}?123" "ADDED";
replaceheader :newvalue "test${backslash}*abc${backslash}?123" :matches "X-Test-Header-7" "*";
replaceheader :newname "X-New-Header-3-test${backslash}*abc${backslash}?123" :newvalue "REPLACED" :matches "X-Test-Header-8" "*";
tag "test${backslash}*a1${backslash}?b1";
fileinto "test${backslash}*a1${backslash}?b1";
notify :from "notification_test@${defaultdomain.name}" :message "test${backslash}*abc${backslash}?123"
"mailto:notify2${backslash}*abc${backslash}?123${account_partial_1}?body=NotificationMessage1";
set :encodeurl "notify_body" "test${backslash}*abc${backslash}?123";
notify :from "notification_test@${defaultdomain.name}" :message "NotificationMessage2"
"mailto:notify2${backslash}*abc${backslash}?123${account_partial_1}?body=${notify_body_variable}";
redirect "redirect2${backslash}*abc${backslash}?123${account_partial_2}";
keep;
' />

    <!-- Other fields - '\\*' and '\\?' should be treated as a string "\*" and "\?"-->
    <!-- tag: Exception is thrown if a tag name has "\".
              com.zimbra.cs.mailbox.MailServiceException: invalid name: test\*a1\?b1
         notify: 2nd notify action fails due to bug107621
     -->
    <t:property name="sieve_rule12" value='require ["fileinto", "tag", "enotify", "editheader", "variables"];
addheader :last "X-New-Header-1" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
addheader :last "X-New-Header-2-test${backslash}${backslash}*abc${backslash}${backslash}?123" "ADDED";
replaceheader :newvalue "test${backslash}${backslash}*abc${backslash}${backslash}?123" :matches "X-Test-Header-7" "*";
replaceheader :newname "X-New-Header-3-test${backslash}${backslash}*abc${backslash}${backslash}?123" :newvalue "REPLACED" :matches "X-Test-Header-8" "*";
fileinto "test${backslash}${backslash}*a1${backslash}${backslash}?b1";
notify :from "notification_test@${defaultdomain.name}" :message "test${backslash}${backslash}*abc${backslash}${backslash}?123"
"mailto:notify3${backslash}${backslash}*abc${backslash}${backslash}?123${account_partial_3}?body=NotificationMessage1";
set :encodeurl "notify_body" "test${backslash}${backslash}*abc${backslash}${backslash}?123";
notify :from "notification_test@${defaultdomain.name}" :message "NotificationMessage2"
"mailto:notify3${backslash}${backslash}*abc${backslash}${backslash}?123${account_partial_3}?body=${notify_body_variable}";
redirect "redirect3${backslash}${backslash}*abc${backslash}${backslash}?123${account_partial_4}";
keep;
' />

    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup1_create_account" type="always">
        <t:objective>create test accounts</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

   <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
				<a n="zimbraSpamSubjectTag"/>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveNotifyActionRFCCompliant">TRUE</a>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
    
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account1.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account2.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule3}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account3.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account3.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account4.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule4}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account4.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account4.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account5.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule5}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account5.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account5.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account6.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule6}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account6.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account6.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account7.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule7}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account7.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account7.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account8.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule8}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account8.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account8.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account9.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule9}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account9.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account9.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account10.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule10}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account10.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account10.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_notify_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_notify_account1.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_redirect_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraSpamApplyUserFilters">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_redirect_account1.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account11.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule11}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account11.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account11.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_notify_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_notify_account2.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_redirect_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraSpamApplyUserFilters">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_redirect_account2.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account12.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule12}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account12.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account12.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_notify_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_notify_account3.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_redirect_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraSpamApplyUserFilters">TRUE</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_redirect_account3.id" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule1" type="smoke" bugids="107381">
        <t:objective>* and ? should be treated as wildcard if Match-type is :matches</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account1.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account1.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

       <t:resttest>
            <t:restServletRequest>
                <id>${msg1.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case> 

    <t:test_case testcaseid="bug107381_rule2" type="smoke" bugids="107381">
        <t:objective>"\* and \? should be treated as wildcard * and ? if Match-type is :matches</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account2.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account2.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg2.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg2.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case> 

    <t:test_case testcaseid="bug107381_rule3" type="smoke" bugids="107381">
        <t:objective>\\* and \\? should be treated as a character '*' and '?' if Match-type is :matches</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account3.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account3.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg3.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg3.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
                <t:select attr="X-Test-Header-3" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-4" match="test\*abc\?123" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule4" type="smoke" bugids="107381">
        <t:objective>"*" and "?" should be treated as a character '*' and '?' if Match-type is :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account4.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account4.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account4.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg4.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg4.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule5" type="smoke" bugids="107381">
        <t:objective>"\*" and "\?" should be treated as a character '*' and '?' if Match-type is :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account5.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account5.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account5.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg5.id" />
            </t:response>
        </t:test>

     <t:resttest>
            <t:restServletRequest>
                <id>${msg5.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule6" type="smoke" bugids="107381">
        <t:objective>"\\*" and "\\?" should be treated as a string "\*" and "\?" if Match-type is :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account6.name}</to>
                <from>"test\\*abc\\?123"@zimbra.com</from>
                <server>${test_account6.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account6.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_header,test_envelope,test_string" />
                <!-- test_address should be added after bug107617 is fixed -->
                <!-- 
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                -->
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg6.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg6.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-2" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-3" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-4" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-5" match="REPLACED" />
                <t:select attr="X-Test-Header-6" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule7" type="smoke" bugids="107381">
        <t:objective>"*" and "?" should be treated as a character '*' and '?' if Match-type is :contains</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account7.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account7.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account7.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg7.id" />
            </t:response>
        </t:test>

     <t:resttest>
            <t:restServletRequest>
                <id>${msg7.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule8" type="smoke" bugids="107381">
        <t:objective>"\*" and "\?" should be treated as a character '*' and '?' if Match-type is :contains</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account8.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account8.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account8.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg8.id" />
            </t:response>
        </t:test>

       <t:resttest>
            <t:restServletRequest>
                <id>${msg8.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="REPLACED" />
                <t:select attr="X-Test-Header-2" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule9" type="smoke" bugids="107381">
        <t:objective>"\\*" and "\\?" should be treated as a string "\*" and "\?" if Match-type is :contains</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account9.name}</to>
                <from>"test\\*abc\\?123"@zimbra.com</from>
                <server>${test_account9.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account9.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_header,test_envelope,test_string" />
                <!-- test_address should be added after bug107617 is fixed -->
                <!--
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test_address,test_header,test_envelope,test_string" />
                -->
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg9.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg9.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Test-Header-1" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-2" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-3" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-4" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-5" match="REPLACED" />
                <t:select attr="X-Test-Header-6" emptyset="1" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule10" type="smoke" bugids="107381">
        <t:objective>'*' and '?' should be treated as a character in other fields</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account10.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account10.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account10.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:test*a1?b1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test\*a1\?b1" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg10.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg10.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header-1" match="test\*abc\?123" />
                <t:select attr="X-New-Header-2-test*abc?123" match="ADDED" />
                <t:select attr="X-Test-Header-7" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-8" emptyset="1" />
                <t:select attr="X-New-Header-3-test*abc?123" match="REPLACED" />
            </t:restServletResponse>
        </t:resttest> 

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_notify_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>NotificationMessage1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="test\*abc\?123" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
                    <query>NotificationMessage2</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:mp[@ct='text/plain']/mail:content" match="test\*abc\?123\n" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_redirect_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:Junk</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Test message" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule11" type="smoke" bugids="107381">
        <t:objective>'\*' and '\?' should be treated as a character '*' and '?' in other fields</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account11.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account11.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account11.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:test*a1?b1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test\*a1\?b1" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg11.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg11.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header-1" match="test\*abc\?123" />
                <t:select attr="X-New-Header-2-test*abc?123" match="ADDED" />
                <t:select attr="X-Test-Header-7" match="test\*abc\?123" />
                <t:select attr="X-Test-Header-8" emptyset="1" />
                <t:select attr="X-New-Header-3-test*abc?123" match="REPLACED" />
            </t:restServletResponse>
        </t:resttest> 

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_notify_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>NotificationMessage1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="test\*abc\?123" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
                    <query>NotificationMessage2</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:mp[@ct='text/plain']/mail:content" match="test\*abc\?123\n" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_redirect_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:Junk</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Test message" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107381_rule12" type="smoke" bugids="107381">
        <t:objective>'\\*' and '\\?' should be treated as a string "\*" and "\?" in other fields</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account12.name}</to>
                <from>test*abc?123@zimbra.com</from>
                <server>${test_account12.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account12.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:test\*a1\?b1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg12.id" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg12.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header-1" match="test\\\*abc\\\?123" />
                <t:select attr="X-New-Header-2-test\*abc\?123" match="ADDED" />
                <t:select attr="X-Test-Header-7" match="test\\\*abc\\\?123" />
                <t:select attr="X-Test-Header-8" emptyset="1" />
                <t:select attr="X-New-Header-3-test\*abc\?123" match="REPLACED" />
            </t:restServletResponse>
        </t:resttest> 

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_notify_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>NotificationMessage1</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="test\\\*abc\\\?123" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
                    <query>NotificationMessage2</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m/mail:mp[@ct='text/plain']/mail:content" match="test\\\*abc\\\?123\n" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_redirect_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:Junk</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Test message" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:finally type="always">
        <t:objective>reset cosconfig </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

    <t:test>
        <t:request>
            <ModifyCosRequest xmlns="urn:zimbraAdmin">
                <id>${cosid}</id>
                <a n="zimbraSieveNotifyActionRFCCompliant">FALSE</a>
                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
            </ModifyCosRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
        </t:response>
    </t:test>

    </t:finally>
    
</t:tests>
