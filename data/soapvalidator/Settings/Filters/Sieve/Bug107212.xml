<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account4.name" value="test4.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account5.name" value="test5.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account6.name" value="test6.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account7.name" value="test7.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account8.name" value="test8.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account9.name" value="test9.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account10.name" value="test10.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account11.name" value="test11.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account12.name" value="test12.${TIME}.${COUNTER}@${defaultdomain.name}" />

<t:property name="mail_subject" value="Sieve Mail" />
<t:property name="msg01.file" value="${testMailRaw.root}/bug107212/mime1.txt"/>
<t:property name="msg02.file" value="${testMailRaw.root}/bug107212/mime2.txt"/>
<t:property name="msg03.file" value="${testMailRaw.root}/bug107212/mime3.txt"/>
<t:property name="msg05.file" value="${testMailRaw.root}/bug107212/mime5.txt"/>
<t:property name="msg06.file" value="${testMailRaw.root}/bug107212/index_mime.txt"/>


<t:property name="dollar1" value="$\{1}"/>
<t:property name="dollar2" value="$\{2}"/>

<t:property name="sieve_rule1" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :matches "X-Sieve-Header1" "Oldval1 Oldvalabc";
log "done";'/>

<t:property name="sieve_rule2" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :is "X-Sieve-Header1" "Oldval1 Oldvalabc";
log "done";'/>

<t:property name="sieve_rule3" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :contains "X-Sieve-Header1" "Oldvalabc";
log "done";'/>

<t:property name="sieve_rule4" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :contains "X-Sieve-Header1" " Oldvalabc";
log "done";'/>

<t:property name="sieve_rule5" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :is "X-Sieve-Header1" "Oldval1 Oldvalabc";
log "done";'/>

<t:property name="sieve_rule6" value='require ["editheader", "log"];
replaceheader :index 2 :newname "X-Sieve-HeaderNew" :newvalue "[NEWVAL] ${mail_subject}" :matches "X-Sieve-Header2" "Oldval2 Oldvalabc"; 
log "done";'/>

<t:property name="sieve_rule8" value='require ["editheader", "log", "variables"];
replaceheader :newvalue "${dollar1} ${mail_subject}" :matches "X-Sieve-Header1" "* Oldvalabc";
log "done";'/>

<t:property name="sieve_rule9" value='require ["editheader", "log"];
replaceheader :newvalue "[NEWVAL] ${mail_subject}" :is "X-Sieve-Header1" "Oldval1 Oldvalabc1 Oldvalabc2 Oldvalabc3";
log "done";'/>

<t:property name="sieve_rule10" value='require ["editheader", "log", "variables"];
replaceheader :newvalue "${dollar1} [NEWVAL] ${mail_subject} ${dollar2}" :matches "X-Sieve-Header1" "* Oldvalabc1 * Oldvalabc3";
log "done";'/>

<t:property name="sieve_rule11" value='require ["editheader","log"];
deleteheader :matches "X-Test-Header" "Ran*";
log "Sieve rule 11";
'/>

<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>
    
	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin" />
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse" />
		</t:response>
	</t:test>
    
</t:test_case>

<t:test_case testcaseid="acctSetup1" type="smoke">
    <t:objective>create test account</t:objective>
    
	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	                
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>   
  
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account3.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>  

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account4.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct4.server"/>
        </t:response>
    </t:test> 


    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account5.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct5.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account6.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account6.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct6.server"/>
        </t:response>
    </t:test>    

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account7.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account7.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct7.server"/>
        </t:response>
    </t:test> 

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account8.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account8.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct8.server"/>
        </t:response>
    </t:test> 

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account9.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account9.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct9.server"/>
        </t:response>
    </t:test> 
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account10.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account10.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct10.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account11.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account11.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct11.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account12.name}</name>
                <password>${defaultpassword.value}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account12.id" />
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct12.server"/>
        </t:response>
    </t:test>
                              
</t:test_case>

<t:test_case testcaseid="bug107212_rule1" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using "matches"</t:objective>
    <steps> 
        1. Add sieve rule for a user to match multiline header and replace it with new one as per the sieve rule
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account2.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule1}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account2.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account2.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account2.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>
 
<t:test_case testcaseid="bug107212_rule2" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using "is"</t:objective>
    <steps> 
        1. Add sieve rule for a user to match multiline header and replace it with new one as per the sieve rule
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account3.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule2}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account3.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account3.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account3.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>

<t:test_case testcaseid="bug107212_rule3" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using contains</t:objective>
    <steps> 
        1. Add sieve rule for a user to match multiline header and replace it with new one as per the sieve rule
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account4.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule3}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account4.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account4.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account4.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>

<t:test_case testcaseid="bug107212_rule4" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using contains and space in the match value</t:objective>
    <steps> 
        1. Verify if there are multiple multilines headers and sieve rule matches the condition, those should be replaced.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account5.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule4}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg03.file}</filename>
			<to>${test_account5.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account5.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account5.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2Oldvalabc"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>  

<t:test_case testcaseid="bug107212_rule5" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail where mime has multiple multi line headers</t:objective>
    <steps> 
        1. Verify if there are multiple multilines headers and sieve rule matches the condition, those should be replaced.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account6.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule5}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg03.file}</filename>
			<to>${test_account6.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account6.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account6.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2Oldvalabc"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>

<t:test_case testcaseid="bug107212_rule6" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using index value</t:objective>
    <steps> 
        1. Verify if there are multiple multilines headers and sieve rule matches the condition, those should be replaced.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account7.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule6}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg06.file}</filename>
			<to>${test_account7.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account7.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account7.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header2" match="Oldval1Oldvalabc"/>
			<t:select attr="X-Sieve-HeaderNew" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>   

<t:test_case testcaseid="bug107212_rule8" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail using dollar1</t:objective>
    <steps> 
        1. Verify if there are multiple multilines headers and sieve rule matches the condition, those should be replaced.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account9.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule8}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg03.file}</filename>
			<to>${test_account9.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account9.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account9.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="Oldval1 ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2Oldvalabc"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case> 

<t:test_case testcaseid="bug107212_rule9" type="smoke" bugids="107212">
   <t:objective>Verify Oldval1\nOldvalabc is replaced with [NEWVAL] Sieve Mail if mime has 3-4 multiline value in header</t:objective>
    <steps> 
        1. Verify if there are multiple multilines headers and sieve rule matches the condition, those should be replaced.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account10.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule9}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg05.file}</filename>
			<to>${test_account10.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account10.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account10.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="\[NEWVAL]\ ${mail_subject}"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2Oldvalabc"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>
	    
</t:test_case>

<t:test_case testcaseid="bug107212_rule10" type="smoke" bugids="107212">
   <t:objective>Verify all the matching headers should be deleted using :matches</t:objective>
    <steps> 
        1. Verify the matching header is deleted if value has some part of it in all headers.
    </steps>	

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
		</t:response>
	</t:test>
    	
    <t:test id = "modifyaccountrequest01">
        <t:request>
            <ModifyAccountRequest xmlns = "urn:zimbraAdmin">
                <id>${test_account11.id}</id>
                <a n = "zimbraAdminSieveScriptAfter">${sieve_rule10}</a>             
            </ModifyAccountRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:ModifyAccountResponse/admin:account"/>
        </t:response>
    </t:test> 
	
<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account1.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg05.file}</filename>
			<to>${test_account11.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account11.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

<t:test required="true">
	<t:request>
		<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
          	<account by="name">${test_account11.name}</account>
			<password>${defaultpassword.value}</password>
		</AuthRequest>
		</t:request>
		<t:response>		   
			 <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
		</t:response>
	</t:test>
	
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}"/>
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
			</t:response>
    </t:test>
	
	<t:resttest>
		<t:restServletRequest>
			<id>${msg1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Sieve-Header1" match="Oldval1 \[NEWVAL]\ ${mail_subject} Oldvalabc2"/>
			<t:select attr="X-Sieve-Header2" match="Oldval2Oldvalabc"/>
			<t:select attr="X-Sieve-Header3" match="Oldval3Oldvalabc"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>

	<t:test_case testcaseid="bug107212_SieveRule11" type="smoke" bugids="107212">
		<t:objective>Add a sieve rule to delete custom header and verify the mime via rest servlet</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyaccountrequest01">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${test_account12.id}</id>
					<a n="zimbraAdminSieveScriptAfter">${sieve_rule11}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account" />
			</t:response>
		</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account12.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct1.server}</server>
            <modify>
                <header a="To">${test_account12.name}</header>
                <header a="From">${test_account1.name}</header>
                <header a="Subject">${mail_subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
					<account by="name">${test_account12.name}</account>
					<password>test123</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>subject:${mail_subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${mail_subject}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
			</t:response>
		</t:test>

		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-Test-Header" match="Random2" emptyset="1" />
				<t:select attr="X-Test-Header" match="Random1" emptyset="1" />
				<t:select attr="X-Test-Header" match="Random" emptyset="1" />
				<t:select attr="X-Test-Header" match="unRandom" emptyset="0" />
			</t:restServletResponse>
		</t:resttest>
	</t:test_case>	     

    <t:finally type="always">
        <t:objective>reset cosconfig to default </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally>    
</t:tests>