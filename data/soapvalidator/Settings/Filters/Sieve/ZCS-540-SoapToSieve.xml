<t:tests xmlns:t="urn:zimbraTestHarness">

	<!-- Following bugs are included as part of this testcase -->
	<!-- zcs-540:- Sieve: User is able to activate filters with fileinto action 
		for non-exist folder -->

	<t:property name="account1.name"
		value="test_zcs540.${TIME}${COUNTER}@${defaultdomain.name}" />

	<t:property name="folder1.name" value="folder1.${TIME}${COUNTER}" />
	<t:property name="folder2.name" value="folder2.${TIME}${COUNTER}" />
	<t:property name="folder3.name" value="folder3.${TIME}${COUNTER}" />
	<t:property name="folder4.name" value="folder4.${TIME}${COUNTER}" />
	<t:property name="folder4.rename" value="folder4_rename.${TIME}${COUNTER}" />

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AcctSetup1_filters_save" type="always">
		<t:objective>create test accounts</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account1.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account1.server" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder1.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id1" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder2.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id2" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder3.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id3" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder4.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id4" />
			</t:response>
		</t:test>

	</t:test_case>

	<!-- This change was reverted as part of zcs-1076 -->
	<t:test_case testcaseid="ZCS-540_Filter1" type="deprecated"
		bugids="ZCS-540">
		<t:objective>Verify the behavior when Folder is deleted and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with fileinto action for a
			specific folder and keep it deactivated.
			2. Delete the above folder.
			3. Activate the above filter. Filter should not get activated.
		</t:steps>

		<t:property name="server.zimbraAccount" value="${account1.server}" />

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter1.name" value="filter_name1${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter1.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id1}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="mail.NO_SUCH_FOLDER" />
			</t:response>
		</t:test>

	</t:test_case>
	
		<!-- This change was reverted as part of zcs-1076 -->
	<t:test_case testcaseid="ZCS-540_Filter2" type="deprecated"
		bugids="ZCS-540">
		<t:objective>Verify the behaviour when Folder is deleted and filter is
			activated for Outgoing rules.
		</t:objective>
		<t:steps>1. Create a new outgoing filter with fileinto action for a
			specific folder and keep it deactivated.
			2. Delete the above folder.
			3. Activate the above filter. Filter should not get activated.
		</t:steps>

		<t:property name="server.zimbraAccount" value="${account1.server}" />

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter2.name" value="filter_name2${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyOutgoingFilterRulesRequest
					xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="0">
							<filterTests condition="anyof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyOutgoingFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter2.name}" />
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder2.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id2}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyOutgoingFilterRulesRequest
					xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="1">
							<filterTests condition="anyof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="mail.NO_SUCH_FOLDER" />    <!-- Should fail -->
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-540_Filter3" type="smoke"
		bugids="ZCS-540">
		<t:objective>Verify the behaviour when Folder is not deleted and
			filter is activated.
		</t:objective>
		<t:steps>1. Create a new filter with fileinto action for a specific
			folder and keep it deactivated.
			2. Don't delete the folder.
			3. Activate the above filter. Filter should get activated.
		</t:steps>

		<t:property name="server.zimbraAccount" value="${account1.server}" />

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter3.name" value="filter_name3${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter3.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder3.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="ZCS-540_Filter4" type="smoke"
		bugids="ZCS-540">
		<t:objective>Verify the behavior when Folder is renamed and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with fileinto action for a
			specific folder and keep it deactivated.
			2. Rename the above folder.
			3. Activate the above filter. Filter should get activated.
		</t:steps>

		<t:property name="server.zimbraAccount" value="${account1.server}" />

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter4.name" value="filter_name4${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder4.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter4.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder4.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="rename" id="${folder.id4}" name="${folder4.rename}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder4.rename}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

	</t:test_case>

</t:tests>