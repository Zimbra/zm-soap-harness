<t:tests xmlns:t="urn:zimbraTestHarness">
    <!-- Test accounts declaration -->
    <t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="test_account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />

    <!-- Variables declaration -->
    <t:property name="folder_inbox" value="Inbox" />
    <t:property name="folder_sub" value="Inbox/sub" />
    <t:property name="folder_sub2" value="Inbox/sub2" />
    <t:property name="message_subject" value="require abc def" />

    <!-- Sieve rules declaration -->
    <t:property name="admin_sieve_before_rule1" value='require ["tag"];
tag "admin_sieve_before";
if  header :contains ["Subject"] "require abc def" {
  log "--- require in admin sieve before  ---";
}
'/>
    <t:property name="account_sieve_rule1" value='require ["fileinto"];
fileinto "/Inbox/sub";
if  header :contains ["Subject"] "require abc def" {
  log "--- require in account sieve  ---";
}
'/>
    <t:property name="admin_sieve_after_rule1" value='require ["flag"];
flag "flagged";
if  header :contains ["Subject"] "require abc def" {
  log "--- require in admin sieve after  ---";
}
'/>

    <!--  multiple require commands -->
   <t:property name="admin_sieve_before_rule2" value='require ["tag"];
require ["fileinto"];
require ["editheader"];
tag "admin_sieve_before";
fileinto "/Inbox/sub";
addheader :last "X-New-Header-1" "value1";
if  header :contains ["Subject"] "require abc def" {
log "require in admin sieve before" ;}
'/> 

    <t:property name="account_sieve_rule2" value='require ["fileinto"];
require ["flag"];
require ["tag"];
fileinto "/Inbox/sub2";
flag "read";
tag "account_sieve";
if  header :contains ["Subject"] "require abc def" {
  log "--- require in account sieve  ---";
}
'/>

   <t:property name="admin_sieve_after_rule2" value='require ["flag"];
require ["editheader"];
require ["tag"];
flag "flagged";
tag "admin_sieve_script_after";
addheader :last "X-New-Header-2" "value2";
if  header :contains ["Subject"] "require abc def" {
 log "require in admin sieve before" ;
}
'/> 

    <!-- with line breaks -->
   <t:property name="admin_sieve_before_rule3" value='require ["tag"];&#010;
require ["fileinto"];&#010;
require ["editheader"];&#010;
tag "admin_sieve_before";&#010;
fileinto "/Inbox/sub";&#010;
addheader :last "X-New-Header-1" "value1";&#010;
if  header :contains ["Subject"] "require abc def" {&#010;
  log "require in admin sieve before";&#010;
}&#010;
'/> 

  <t:property name="account_sieve_rule3" value='require ["fileinto"];&#010;
require ["flag"];&#010;
require ["tag"];&#010;
fileinto "/Inbox/sub2";&#010;
flag "read";&#010;
tag "account_sieve";&#010;
if  header :contains ["Subject"] "require abc def" {&#010;
  log "--- require in account sieve  ---";&#010;
}&#010;
'/>

 <t:property name="admin_sieve_after_rule3" value='require ["flag"];&#010;
require ["editheader"];&#010;
require ["tag"];&#010;
flag "flagged";&#010;
tag "admin_sieve_script_after";&#010;
addheader :last "X-New-Header-2" "value2";&#010;
if  header :contains ["Subject"] "require abc def" {&#010;
  log "require in admin sieve after";&#010;
}&#010;
'/> 

    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup1_create_account" type="always">
        <t:objective>create test accounts</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account3.id" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107562_rule1" type="smoke" bugids="107562">
        <t:objective>A word "require" in other commands should not picked up. (pattern 1: single line and single require command in each attribute)</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account1.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${admin_sieve_before_rule1}</a>
                    <a n="zimbraMailSieveScript">${account_sieve_rule1}</a>
                    <a n="zimbraAdminSieveScriptAfter">${admin_sieve_after_rule1}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account1.name}" />
                        <su>${message_subject}</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="sendmsg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_sub}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="admin_sieve_before" />
                <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107562_rule2" type="smoke" bugids="107562">
        <t:objective>A word "require" in other commands should not picked up. (pattern 2: single line and multiple require commands in each attribute)</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test id="modifyaccountrequest2">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account2.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${admin_sieve_before_rule2}</a>
                    <a n="zimbraMailSieveScript">${account_sieve_rule2}</a>
                    <a n="zimbraAdminSieveScriptAfter">${admin_sieve_after_rule2}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account2.name}" />
                        <su>${message_subject}</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="sendmsg2.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_sub}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="^(?=.*admin_sieve_before)(?=.*account_sieve)(?=.*admin_sieve_script_after).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="f" match="^(?=.*f)(?!.*u).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg2.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_sub2}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="^(?=.*admin_sieve_before)(?=.*account_sieve)(?=.*admin_sieve_script_after).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="f" match="^(?=.*f)(?!.*u).*" />
            </t:response>
        </t:test>

      <t:resttest>
            <t:restServletRequest>
                <id>${msg2.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header-1" match="value1" />
                <t:select attr="X-New-Header-2" match="value2" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>

    <t:test_case testcaseid="bug107562_rule3" type="smoke" bugids="107562">
        <t:objective>A word "require" in other commands should not picked up. (pattern 3: multiple lines and multiple require commands in each attribute)</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
        <t:test id="modifyaccountrequest3">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account3.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${admin_sieve_before_rule3}</a>
                    <a n="zimbraMailSieveScript">${account_sieve_rule3}</a>
                    <a n="zimbraAdminSieveScriptAfter">${admin_sieve_after_rule3}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account3.name}" />
                        <su>${message_subject}</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="sendmsg3.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_sub}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="^(?=.*admin_sieve_before)(?=.*account_sieve)(?=.*admin_sieve_script_after).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="f" match="^(?=.*f)(?!.*u).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg3.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_sub2}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="^(?=.*admin_sieve_before)(?=.*account_sieve)(?=.*admin_sieve_script_after).*" />
                <t:select path="//mail:SearchResponse/mail:m" attr="f" match="^(?=.*f)(?!.*u).*" />
            </t:response>
        </t:test>

     <t:resttest>
            <t:restServletRequest>
                <id>${msg3.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header-1" match="value1" />
                <t:select attr="X-New-Header-2" match="value2" />
            </t:restServletResponse>
        </t:resttest> 
    </t:test_case>


    <t:finally type="always">
        <t:objective>reset cosconfig to default </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally>    
</t:tests>
