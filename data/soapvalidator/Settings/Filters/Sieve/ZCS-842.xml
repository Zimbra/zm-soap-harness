<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="sender_account.name"
		value="sender${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account1.name"
		value="reciever1${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account2.name"
		value="reciever2${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account3.name"
		value="reciever3${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account4.name"
		value="reciever4${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account5.name"
		value="reciever5${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account6.name"
		value="reciever6${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account7.name"
		value="reciever7${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account8.name"
		value="reciever8${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account9.name"
		value="reciever9${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="reciever_account10.name"
		value="reciever10${TIME}${COUNTER}@${defaultdomain.name}" />
	
	<t:property name="subject" value="sample abc test 123 test ABC test" />
	<t:property name="0" value="$\{0}" />
	<t:property name="1" value="$\{1}" />
	<t:property name="2" value="$\{2}" />
	<t:property name="3" value="$\{3}" />
	<t:property name="000" value="$\{000}" />
	<t:property name="0001" value="$\{0001}" />
	<t:property name="var_one" value="$\{var_one}" />
	<t:property name="var_two" value="$\{var_two}" />

	<t:property name="sieve_test1"
		value='require ["variables"];
if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*" {
tag "${1}";
} 
' />

	<t:property name="sieve_test2"
		value='require ["variables"];
if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test" {
tag "${1}";
} 
' />

	<t:property name="sieve_test3"
		value='require ["variables"];
 if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*test" {
tag "${1}-${2}";
} 
' />

	<t:property name="sieve_test4"
		value='require ["variables"];
 if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*test" {
tag "${1}-${2}";
} 
' />

	<t:property name="sieve_test4"
		value='require ["variables"];
if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test" {
tag "${0}";
} 
' />

	<t:property name="sieve_test5"
		value='require ["variables"];
if header :matches :comparator "i;ascii-casemap" "Subject" "sample*" {
tag "${1}";
}  
' />

	<t:property name="sieve_test6"
		value='require ["variables"];
if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*" {
tag "space.${1}.tag.${2}";
} 
' />

	<t:property name="sieve_test7"
		value='require ["variables"];
if address :matches :comparator "i;ascii-casemap" "From" "*@${defaultdomain.name}" {
tag "${000}-${0001}@${defaultdomain.name}";
} 
' />

	<t:property name="sieve_test8"
		value='require ["editheader"];
replaceheader :newvalue "[Spam] ${1},${2}" :comparator "i;ascii-casemap" :matches "subject" "sample*test*";
' />

	<t:property name="sieve_test9"
		value='require ["editheader", "variables"];
addheader "X-New-Header1" "This is a new header1";
addheader "X-New-Header2" "This is a new header2";
if header :matches "X-New-Header1" "This*"
{ 
deleteheader :comparator "i;ascii-casemap" :matches "X-New-Header1" "${0}";
}
' />

	<t:property name="sieve_test10"
		value='require ["variables"];
set "var_one" "sieve_test new";
if header :matches "Subject" "sieve_test new*sample"
{
tag "${1}";
}
' />

	<t:test_case testcaseid="AcctSetup1_Sieve" type="smoke"
		bugids="zcs873">
		<t:objective> Accounts setup
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${sender_account.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="sender_account.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="sender_account.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test1}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account1.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test2}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account2.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account2.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test3}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account3.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account3.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account4.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test4}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account4.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account4.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account5.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test5}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account5.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account5.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account6.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test6}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account6.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account6.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account7.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test7}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account7.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account7.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account8.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptAfter">${sieve_test8}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account8.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account8.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account9.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptAfter">${sieve_test9}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account9.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account9.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${reciever_account10.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_test10}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="reciever_account10.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="reciever_account10.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
		</t:test>
	</t:test_case>
 
	<t:test_case testcaseid="ZCS-842_Filter1" type="smoke"
		bugids="ZCS-842">
		<t:objective> First wildcard non-greedy example
			Send a mail with subject as 'sample abc test 123 test ABC test'.
			${1}should contain 'abc'.
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*" {
			    tag "${1}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account1.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="abc" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="ZCS-842_Filter2" type="smoke"
		bugids="ZCS-842">
		<t:objective> Only one wildcard greedy example
			Send a mail with subject as 'sample abc test 123 test ABC test'.
			${1}should contain 'abc test 123 test ABC'.
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test" {
			    tag "${1}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account2.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="abc test 123 test ABC" />
			</t:response>
		</t:test>
	</t:test_case>



	<t:test_case testcaseid="ZCS-842_Filter3" type="smoke"
		bugids="ZCS-842">
		<t:objective> Multiple wildcards last greedy example
			Send a mail with subject as 'sample abc test 123 test ABC test'.
			${1}should contain 'abc', ${2} should contain '123 test ABC' and not just '123'.
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*test" {
			    tag "${1}-${2}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account3.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account3.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="abc - 123 test ABC" />
			</t:response>
		</t:test>
	</t:test_case>


	<t:test_case testcaseid="ZCS-842_Filter4" type="smoke"
		bugids="ZCS-842">
		<t:objective> wildcard first variable example
		    Send a mail with subject as 'sample abc test 123 test ABC test'.
			${0} should contain 'sample abc test 123 test ABC test'.
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test" {
			    tag "${0}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account4.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account4.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="sample abc test 123 test ABC test" />
			</t:response>
		</t:test>
	</t:test_case>


	<t:test_case testcaseid="ZCS-842_Filter5" type="smoke"
		bugids="ZCS-842">
		<t:objective> wildcard last greedy example
			Send a mail with subject as 'sample abc test 123 test ABC test'.
			${1} should contain 'abc test 123 test ABC test'
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*" {
			    tag "${1}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account5.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account5.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="abc test 123 test ABC test" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="ZCS-842_Filter6" type="smoke"
		bugids="ZCS-842">
		<t:objective> wildcard first non-greedy example
			Send a mail with subject as 'sample test 123 test ABC test'. 
			${1} should contain ' '.
			${2} should contain '123 test ABC test'.
			
			Sieve test:
			if header :matches :comparator "i;ascii-casemap" "Subject" "sample*test*" {
			    tag "space.${1}.tag.${2}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account6.name}" />
						<su>sample test 123 test ABC test</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account6.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:sample test 123 test ABC test</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="space. .tag. 123 test ABC test" />
			</t:response>
		</t:test>
	</t:test_case>
  
	<t:test_case testcaseid="ZCS-842_Filter7" type="smoke"
		bugids="ZCS-842">
		<t:objective> address test - wildcard greedy example
			Send a mail with From as 'sender123@domain.com'. ${0001} should contain 'sender123',
			${000} should contain 'sender123@domain.com'

			Sieve test:
			if address :matches :comparator "i;ascii-casemap" "From" "*@${defaultdomain.name}" {
			    tag "${000}-${0001}@${defaultdomain.name}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account7.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account7.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="${sender_account.name}-${sender_account.name}" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="ZCS-842_Filter8" type="smoke"
		bugids="ZCS-842">
		<t:objective> replaceheader test - multiple wildcard example
			Send a mail with subject as 'sample abc test 123 test ABC test' .
			${1} should contain 'abc', ${2} should contain '123 test ABC test'

			Sieve test:
			replaceheader :newvalue "[Spam] ${1},${2}" :comparator "i;ascii-casemap" :matches
			"subject" "sample*test*";
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account8.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account8.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />

			</t:response>
		</t:test>

		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="Subject" contains='[Spam]  abc , 123 test ABC test' />

			</t:restServletResponse>
		</t:resttest>
	</t:test_case>

	<t:test_case testcaseid="ZCS-842_Filter9" type="smoke"
		bugids="ZCS-842">
		<t:objective> deleteheader test - wildcard greedy example
			Delete header if the value matches with variable value of header test
			
			Sieve test:
			addheader "X-New-Header1" "This is a new header1";
			addheader "X-New-Header2" "This is a new header2";
			if header :matches "X-New-Header1" "This*"
			{
			    deleteheader :comparator "i;ascii-casemap" :matches "X-New-Header1" "${0}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account9.name}" />
						<su>${subject}</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account9.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />

			</t:response>
		</t:test>

		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-New-Header1" emptyset="1" />
				<t:select attr="X-New-Header2" emptyset="0" />

			</t:restServletResponse>
		</t:resttest>
	</t:test_case>

	<t:test_case testcaseid="ZCS-842_Filter10" type="smoke"
		bugids="ZCS-842">
		<t:objective> header test - wildcard greedy example
			Send a message with subject as 'sieve_test new zimbra test sample sample'. 
			result: tag 'zimbra test sample'

			Sieve test:
			set "var_one" "sieve_test new";
			if header :matches "Subject" "sieve_test new*sample"
			{
			    tag "${1}";
			}
		</t:objective>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${sender_account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${reciever_account10.name}" />
						<su>sieve_test new zimbra test sample sample</su>
						<mp ct="text/plain">
							<content>Content</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="message0.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${reciever_account10.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="zimbra test sample" />
			</t:response>
		</t:test>
	</t:test_case>

    <t:finally type="always">
        <t:objective>reset cosconfig to default </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally>	
</t:tests>
