<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="notify1.name"	value="notify1.${TIME}.${COUNTER}@${defaultdomain.name}" />		
	<t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="notify2.name"	value="notify2.${TIME}.${COUNTER}@${defaultdomain.name}" />		
	<t:property name="test_account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="notify3.name"	value="notify3.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account4.name" value="test4.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="notify4.name"	value="notify4.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account5.name" value="test5.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account6.name" value="test6.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account7.name" value="test7.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account8.name" value="test8.${TIME}.${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account9.name" value="test9.${TIME}.${COUNTER}@${defaultdomain.name}" />
	
	<t:property name="variable_from" value="$\{from}"></t:property>
	<t:property name="variable_subject" value="$\{subject}"></t:property>
	<t:property name="variable_body_text" value="$\{body}"></t:property>
	<t:property name="variable_tag" value="$\{tag}"></t:property>
	<t:property name="variable_name_dollar_one" value="$\{1}"></t:property>
	
	<t:property name="mail_subject_1" value="mail_subject"></t:property>
	<t:property name="mail_content" value="Hi,\\rYou have got a mail!\\r."></t:property>
	<t:property name="msg01.file" value="${testMailRaw.root}/zcs-1287/mime1.txt" />
	<t:property name="msg02.file" value="${testMailRaw.root}/zcs-1287/blank_mime.txt" />
	<t:property name="msg03.file" value="${testMailRaw.root}/zcs-1287/tag_mime.txt" />
	
	<t:property name="sieve_rule1" value='require ["enotify", "variables"];
		set "from" "abc@abc.com";
		set "subject" "Notify subject";
		set "body" "Hi, You have got a mail!";
		notify :from "${variable_from}" :message "${variable_subject}" "mailto:${notify1.name}?Importance=High&#038;X-Priority=1&#038;body=${variable_body_text}";'></t:property>

	<t:property name="sieve_rule2" value='require ["enotify", "variables"];
		notify :from "${variable_from}" :message "${variable_subject}" "mailto:${notify2.name}?Importance=High&#038;X-Priority=1&#038;body=${variable_body_text}";'></t:property>

	<t:property name="sieve_rule3" value='require ["enotify", "variables"];
	notify :from "${variable_from}" :message "${variable_subject}" "mailto:${notify3.name}?Importance=High&#038;X-Priority=1&#038;body=${variable_body_text}";'></t:property>

	<t:property name="sieve_rule4" value='require ["enotify", "variables"];
		set "from" "ABC";
		set "subject" "Notify subject";
		set "body" "Hi, You have got a mail!";
		notify :from "${variable_from}" :message "${variable_subject}" "mailto:${notify4.name}?Importance=High&#038;X-Priority=1&#038;body=${variable_body_text}";'></t:property>

	<t:property name="sieve_rule5" value='require ["tag", "variables"];
		set "tag" "tag1";
		if header :contains "subject" "mail_subject"
		{
			tag "${variable_tag}";
		}'></t:property>
	
	<t:property name="sieve_rule6"
		value='require ["tag", "variables"];
		if header :contains "subject" "mail_subject"
		{
			tag "${variable_tag}";
		}'></t:property>

	<t:property name="sieve_rule7"
		value='require ["tag", "variables"];
		if header :matches "subject" "${variable_subject}*"
		{
			tag "${variable_name_dollar_one}test";
		}'></t:property>
			    
    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

	<t:test_case testcaseid="acctSetup1" type="always">
		<t:objective>create test account</t:objective>

		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

	     <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveNotifyActionRFCCompliant">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test> 
	    
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule1}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account1.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${notify1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct2.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${notify2.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" />
			</t:response>
		</t:test>
				
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule3}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account3.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct3.server" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${notify3.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account4.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule4}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account4.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${notify4.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account5.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptAfter">${sieve_rule5}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account5.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account6.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule5}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account6.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct6.server" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account7.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule6}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account7.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct7.server" />
			</t:response>
		</t:test> 

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account8.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule6}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account8.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct8.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${test_account9.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraMailSieveScript">${sieve_rule7}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="test_account9.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="test_acct9.server" />
			</t:response>
		</t:test>
																		
	</t:test_case>
 
 	<t:test_case testcaseid="zcs-1287_rule1" type="smoke" bugids="zcs-1287">
		<t:objective>Verify variables are replaced from the sieve rule in notification email </t:objective>
		<t:steps>
            1. Set sieve rule1
            2. Send email to the user and verify variables are replaced with the values defined in sieve rule
    	</t:steps>		
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${test_account1.name}" />
						<su>${mail_subject_1}</su>
						<mp ct="text/plain">
							<content>${mail_content}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id"></t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${notify1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="Notify subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="fr" match="Hi, You have got a mail!" />
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="abc@abc.com" />
			</t:response>
		</t:test>

	</t:test_case> 

 	<t:test_case testcaseid="zcs-1287_rule2" type="smoke" bugids="zcs-1287">
		<t:objective>Verify variables are replaced from the mime in notification email</t:objective>
		<t:steps>
            1. Set sieve rule2
            2. Send email to the user and verify variables are replaced with mime values
    	</t:steps>	
    	
		<t:objective>Test notify action with variable
		</t:objective>
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account2.name}</to>
                <from>${admin.user}</from>
                <server>${test_acct2.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${notify2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="Mime Subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="fr" match="Mime Body" />
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="mime@mime.com" />
			</t:response>
		</t:test>

	</t:test_case>

 	<t:test_case testcaseid="zcs-1287_rule3" type="smoke" bugids="zcs-1287">
		<t:objective>Verify variables are set as blank if value not present in rule and mime in notification email</t:objective>
		<t:steps>
            1. Set sieve rule3
            2. Inject email to the user and verify variables are set as blank
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg02.file}</filename>
                <to>${test_account3.name}</to>
                <from>${admin.user}</from>
                <server>${test_acct3.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${notify3.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="" />
				<t:select path="//mail:SearchResponse/mail:m" attr="fr" emptyset="1" />
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${test_account3.name}" />
			</t:response>
		</t:test> 

	</t:test_case>	
	
 	<t:test_case testcaseid="zcs-1287_rule4" type="smoke" bugids="zcs-1287">
		<t:objective>Verify notify email id is set to the recipient if invalid :from is set in rule</t:objective>
		<t:steps>
            1. Set sieve rule4
            2. Send email to the user and verify from is set to the recipient id.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${test_account4.name}" />
						<su>${mail_subject_1}</su>
						<mp ct="text/plain">
							<content>${mail_content}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id"></t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${notify4.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="Notify subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="fr" match="Hi, You have got a mail!" />
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${test_account4.name}" />
			</t:response>
		</t:test>

	</t:test_case>  

 	<t:test_case testcaseid="zcs-1287_rule5_1" type="smoke" bugids="zcs-1287">
		<t:objective>Verify tag is set using the variable value</t:objective>
		<t:steps>
            1. Set sieve rule5
            2. Send email to the user and verify tag is set using variable value.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${test_account5.name}" />
						<su>${mail_subject_1}</su>
						<mp ct="text/plain">
							<content>${mail_content}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id"></t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account5.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="mail_subject" />
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${admin.user}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn" match="tag1" />
			</t:response>
		</t:test>

	</t:test_case>
	
 	<t:test_case testcaseid="zcs-1287_rule5_2" type="smoke" bugids="zcs-1287">
		<t:objective>Verify precedence is given to sieve variable value for tag</t:objective>
		<t:steps>
            1. Set sieve rule5
            2. Inject mime to the user which has tag header in it and verify tag is set using variable value.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg03.file}</filename>
                <to>${test_account6.name}</to>
                <from>${admin.user}</from>
                <server>${test_acct6.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account6.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="mail_subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn" match="tag1" />
			</t:response>
		</t:test>

	</t:test_case>	

 	<t:test_case testcaseid="zcs-1287_rule6_1" type="smoke" bugids="zcs-1287">
		<t:objective>Verify mime value is used for tag</t:objective>
		<t:steps>
            1. Set sieve rule6
            2. Inject mime to the user which has tag header in it and verify tag is set using mime value.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg03.file}</filename>
                <to>${test_account7.name}</to>
                <from>${admin.user}</from>
                <server>${test_acct7.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account7.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="mail_subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn" match="mimetag" />
			</t:response>
		</t:test>

	</t:test_case>	

	<t:test_case testcaseid="zcs-1287_rule6_2" type="smoke" bugids="zcs-1287">
		<t:objective>Verify message is not tagged if tag header is not present in rule and mime</t:objective>
		<t:steps>
            1. Set sieve rule6
            2. Inject mime to the user which has no tag header in it and verify tag is not set.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account8.name}</to>
                <from>${admin.user}</from>
                <server>${test_acct8.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account8.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="Mime Subject" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn" emptyset="1" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="zcs-1287_rule7" type="smoke" bugids="zcs-1287">
		<t:objective>Verify message is tagged with :matches value only</t:objective>
		<t:steps>
            1. Set sieve rule7
            2. Send email to the user and verify * does not assign any value to $1.
    	</t:steps>
    	
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${test_account9.name}" />
						<su>${mail_subject_1}</su>
						<mp ct="text/plain">
							<content>${mail_content}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id"></t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${test_account9.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su" match="${mail_subject_1}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn" match="test" />
			</t:response>
		</t:test>

	</t:test_case>
				 		
     <t:finally type="always">
        <t:objective>reset cosconfig </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveNotifyActionRFCCompliant">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally> 
    		
</t:tests>