<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="account1.name"
		value="keep1.${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="account2.name"
		value="keep2.${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="account3.name"
		value="keep3.${TIME}${COUNTER}@${defaultdomain.name}" />


	<t:property name="folder1.name" value="folder1.${TIME}${COUNTER}" />
	<t:property name="folder2.name" value="folder2.${TIME}${COUNTER}" />
	<t:property name="subject1" value="High priority mail" />
	<t:property name="subject2" value="sub2.${TIME}${COUNTER}" />
	<t:property name="subject3" value="spam mail" />
	<t:property name="subject4" value="sub4.${TIME}${COUNTER}" />
	<t:property name="subject5" value="sub5.${TIME}${COUNTER}" />
	<t:property name="subject6" value="sub6.${TIME}${COUNTER}" />
	<t:property name="subject7" value="sub7.${TIME}${COUNTER}" />
	<t:property name="subject8" value="outgoing mail" />
	<t:property name="subject9" value="sub9.${TIME}${COUNTER}" />
	<t:property name="subject10" value="sub10.${TIME}${COUNTER}" />
	<t:property name="subject11" value="sub11.${TIME}${COUNTER}" />
	<t:property name="subject12" value="discard user script" />
	<t:property name="subject13" value="sub13.${TIME}${COUNTER}" />


	<t:property name="test_account1.password" value="test123" />



	<t:property name="admin_script_value_before_1"
		value='require ["fileinto", "tag", "flag"];
if header :contains "subject" "priority"
{ 
	log "priority mail forward to user";
}
else 
{
   discard;
   stop;
}
' />

	<t:property name="user_script_value_1"
		value='require ["fileinto", "log"];
if header :contains "subject" "priority"
{
 	log "received priority response in inbox";
 	fileinto "Sent";
}
' />

	<t:property name="admin_script_value_after_1"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "from" "admin@${defaultdomain.name}"
{ 
  log "Redirect to third account"; 
  redirect "${account2.name}";
 }
' />


	<t:property name="admin_script_value_before_2"
		value='require ["fileinto", "tag", "flag"];
if header :contains "X-Spam-Score" "1"
{
 	log "Low spam mail, hence filtered";
}
else
{
	discard;
	stop;
}
' />

	<t:property name="user_script_value_2"
		value='require ["fileinto", "log"];
if header :contains ["subject"] ["spam"]
{
 	log "Spam mail sent to junk";
    fileinto "Junk";
}
' />

	<t:property name="admin_script_value_after_2"
		value='require ["fileinto", "tag", "flag"];
if header :contains ["subject"] ["spam"]
{ 
	log "Should not reach on admin again";   
	redirect "${account2.name}";
 }
' />


	<t:property name="admin_script_value_before_3"
		value='require ["fileinto", "log"];        
if address :is :all "from" "${account2.name}"
{
 	log "account 2 mail. Admin succeeded";
 	redirect "${account3.name}";
 	keep;
}
' />

	<t:property name="user_script_value_3"
		value='require ["log","fileinto"];
if header :contains "subject" "Skip User Script"
{
 	log "This script should be skipped ";
 	fileinto "Junk";
}
' />

	<t:property name="admin_script_value_after_3"
		value='require ["fileinto", "tag", "flag"];
if address :is "to" ["${account1.name}", "admin@${defaultdomain.name}"]
{ 
	log "Should get executed as after admin";
	fileinto "Sent";  
 }
' />


	<t:property name="admin_script_value_before_4"
		value='require ["fileinto", "tag", "flag"];
if size :over 2500k
{ 
	log "Size exceeded hence rejected";
	discard; 
	stop;  
 }
 else
 {
 	log "File is less than 2500k. But put in trash instead";
 }
' />

	<t:property name="user_script_value_4"
		value='require ["fileinto"];
if address :is "from" "admin@${defaultdomain.name}"
{ 
	log "User filter succeeded";
	fileinto "Trash";  
 }
' />

	<t:property name="admin_script_value_after_4"
		value='require ["fileinto", "tag", "flag"];
if size :over 1k
{ 
     redirect "${account2.name}"; 
     stop;
 }
' />


	<t:property name="admin_script_value_before_Outgoing_5"
		value='require ["fileinto", "log"];
if header :contains "subject" "outgoing"
{ 
	log "Outgoing before filter from admin ";
}
else
{
 	discard;
 	stop;
}
' />

	<t:property name="user_script_value_Outgoing_5"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "to" "${account2.name}"
{ 
	log "user outgoing";
	redirect "${account3.name}";  
 }
' />

	<t:property name="admin_script_value_after_Outgoing_5"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "to" "${account1.name}"
{ 
     log "admin after outgoing ";
     discard;
 }
' />



	<t:property name="admin_script_value_before_Outgoing_6"
		value='require ["fileinto", "tag", "flag"];
if size :over 2500k
	{ 
		log "Size exceeded hence rejected";
		discard; 
		stop; 
	 }
 else
 {
 	log "File is less than 2500k. But put in trash instead";
 }
 ' />

	<t:property name="user_script_value_Outgoing_6"
		value='require ["fileinto","log"];
if address :is :all "to" "${account2.name}"
{ 
	log "user outgoing";
	redirect "${account3.name}";  
 }
' />

	<t:property name="admin_script_value_after_Outgoing_6"
		value='require ["fileinto", "log"];
if address :all :is "to" "${account2.name}"
{ 
	log "After outgoing admin filter getting executed";
    fileinto "${folder1.name}";
 }
' />



	<t:property name="admin_script_value_before_7"
		value='require ["fileinto", "tag", "flag"];
if header :contains "subject" "discard user script"
{
	log "Admin before reached";
}
' />

	<t:property name="admin_script_user_value_7"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "from" "admin@${defaultdomain.name}"
{
  	log "In user script. Discard here";
  	fileinto "${folder1.name}";
  	discard;
  	stop;
}
' />


	<t:property name="admin_script_value_after_7"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "from" "admin@${defaultdomain.name}"
{
  	log "Should not reach upto here";
  	fileinto "Junk";
}
' />

	<t:property name="admin_script_value_before_8"
		value='require ["fileinto", "tag", "flag"];
if header :contains "subject" "${subject13}"
{
	log "Admin before reached test 8";
	fileinto "${folder2.name}";       
	discard;
}
' />

	<t:property name="admin_script_user_value_8"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "from" "admin@${defaultdomain.name}"
{
  	log "In user script for test 8";
  	redirect "${account3.name}";
  	stop;
}
' />

	<t:property name="admin_script_value_after_8"
		value='require ["fileinto", "tag", "flag"];
if address :is :all "from" "admin@${defaultdomain.name}"
{
  	log "Should not reach upto here";
  	fileinto "${folder1.name}";
}
' />



	<t:test_case testcaseid="AcctSetup1_filters_actions_discard_basic"
		type="smoke">
		<t:objective> Create test account and login to first account
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>
    
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account1.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account1.server" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account2.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account2.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account2.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account2.server" />
			</t:response>
		</t:test>


		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account3.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account3.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account3.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account3.server" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyConfigRequest xmlns="urn:zimbraAdmin">
					<a n="zimbraCustomMimeHeaderNameAllowed">X-Spam-Score</a>
					<a n="zimbraCustomMimeHeaderNameAllowed">X-Spam-Flag</a>
				</ModifyConfigRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyConfigResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder1.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id1" />
			</t:response>
		</t:test>


	</t:test_case>



	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_1"
		type="smoke">
		<t:objective>Create sieve filters for incoming admin before, user and
			admin after and verify them</t:objective>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyaccountrequest">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_1}</a>
					<a n="zimbraMailSieveScript">${user_script_value_1}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_1}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>

		</t:test>

		<!-- Send a mail with subject containing priority. Should execute admin before, user and after script -->

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject1}</su>
						<mp ct="text/plain">
							<content>content1</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>




		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Sent</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject1}" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject1}" />
			</t:response>
		</t:test>



		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send mail with no "priority" word in subject line. should discard at first step -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="?">
						<e t="t" a="${account1.name}" />
						<su>${subject2}</su>
						<mp ct="text/plain">
							<content>content2</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Sent</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject2}" emptyset="1" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject2}" emptyset="1" />
			</t:response>
		</t:test>

	</t:test_case>




	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_2"
		type="smoke">
		<t:objective> Modify account and send mail to check sieve filter
		</t:objective>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test id="modifyaccountrequest_2">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_2}</a>
					<a n="zimbraMailSieveScript">${user_script_value_2}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_2}</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<!-- Send mail with Spam score as low. Should be executed by all filters -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<header name="X-Spam-Score">1</header>
						<e t="t" a="${account1.name}" />
						<su>${subject3}</su>
						<mp ct="text/plain">
							<content>content3</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Junk</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject3}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject3}" />
			</t:response>
		</t:test>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send mail with spam score as high. Should be discarded by admin before filter -->

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<header name="X-Spam-Score">4</header>
						<e t="t" a="${account1.name}" />
						<su>${subject4}</su>
						<mp ct="text/plain">
							<content>content4</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Junk</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject4}" emptyset="1" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject4}" emptyset="1" />
			</t:response>
		</t:test>



	</t:test_case>





	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_3"
		type="smoke">

		<t:objective> Modify account and send mail to check sieve filter.
			Purpose of this test is that user script should be skipped, if user
			sieve filter is not executed
		</t:objective>



		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test id="modifyaccountrequest">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_3}</a>
					<a n="zimbraMailSieveScript">${user_script_value_3}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_3}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send mail with subject different from user script filter. User filter should be skipped and only Admin before and after are executed -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject5}</su>
						<mp ct="text/plain">
							<content>content5</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject5}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject5}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Sent</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject5}" />
			</t:response>
		</t:test>

			<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Junk</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject5}" emptyset="1" />
			</t:response>
		</t:test>



	</t:test_case>


	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_4"
		type="smoke">
		<t:objective> Modify account and send mail to check seive filter
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyaccountrequest_4">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_4}</a>
					<a n="zimbraMailSieveScript">${user_script_value_4}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_4}</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<!-- Send mail with size greater than 2500K. It should be rejected -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject6}</su>
						<mp ct="text/html">
							<content>More text with content greater than 1k. Seive Test 4 and
								the content should be more than 1k and it should be rejected.
								Sieve is a programming language that can be used for email
								filtering.
								It owes its creation to the CMU Cyrus Project, creators of Cyrus
								IMAP server.
								The language is not tied to any particular operating system or mail
								architecture. It requires the use
								of RFC 2822-compliant messages, but otherwise should generalize to
								other systems that meet these criteria.
								The current version of Sieve's base specification is outlined
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Trash</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject6}" emptyset="1" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject6}" emptyset="1" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send mail with size less than 2500K. It should be accepted by filters -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject7}</su>
						<mp ct="text/plain">
							<content>Content7
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Trash</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject7}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject7}" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_5"
		type="smoke">
		<t:objective> Modify account and send mail to check sieve Outgoing
			filter</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Set incoming filters of account 1 as null as it would conflict with 
			Outgoing filters test -->
		<t:test id="modifyaccountrequest_5">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminOutgoingSieveScriptBefore">${admin_script_value_before_Outgoing_5}</a>
					<a n="zimbraMailOutgoingSieveScript">${user_script_value_Outgoing_5}</a>
					<a n="zimbraAdminOutgoingSieveScriptAfter">${admin_script_value_after_Outgoing_5}</a>
					<a n="zimbraAdminSieveScriptBefore">""</a>
					<a n="zimbraMailSieveScript">""</a>
					<a n="zimbraAdminSieveScriptAfter">""</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send a mail with subject containing "outgoing" word. It should be executed by all filters else rejected -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account2.name}" />
						<su>${subject8}</su>
						<mp ct="text/plain">
							<content>Content8
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" emptyset="0" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject8}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject8}" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account2.name}" />
						<su>${subject9}</su>
						<mp ct="text/plain">
							<content>Rejected by admin
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" emptyset="1"/>
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>



		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject9}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject9}" emptyset="1" />
			</t:response>
		</t:test>
	</t:test_case>	

	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_6"
		type="smoke">
		<t:objective> Modify account and send mail to check seive filter for
			outgoing mails</t:objective>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test id="modifyaccountrequest_6">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminOutgoingSieveScriptBefore">${admin_script_value_before_Outgoing_6}</a>
					<a n="zimbraMailOutgoingSieveScript">${user_script_value_Outgoing_6}</a>
					<a n="zimbraAdminOutgoingSieveScriptAfter">${admin_script_value_after_Outgoing_6}</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<!-- Send a mail with size greater than 2500K. The admin before outgoing filter should discard the message -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account2.name}" />
						<su>${subject10}</su>
						<mp ct="text/plain">
							<content>More text with content greater than 1k. Seive Test 4 and
								the content should be more than 1k and it should be rejected.
								Sieve is a programming language that can be used for email
								filtering.
								It owes its creation to the CMU Cyrus Project, creators of Cyrus
								IMAP server.
								The language is not tied to any particular operating system or mail
								architecture. It requires the use
								of RFC 2822-compliant messages, but otherwise should generalize to
								other systems that meet these criteria.
								The current version of Sieve's base specification is outlined.The
								language is not tied to any particular operating system or mail
								architecture. It requires the use
								of RFC 2822-compliant messages, but otherwise should generalize to
								other systems that meet these criteria.
								The current version of Sieve's base specification is outlined. The
								language is not tied to any particular operating system or mail
								architecture. It requires the use
								of RFC 2822-compliant messages, but otherwise should generalize to
								other systems that meet these criteria.
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c/mail:su"
					match="${subject10}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>


		<!-- Send a mail with size less than 2500K. The admin outgoing filter should succeed and rest filters should be executed. -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account2.name}" />
						<su>${subject11}</su>
						<mp ct="text/html">
							<content>accepted as small mail
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject11}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:${folder1.name}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject11}" />
			</t:response>
		</t:test>


	</t:test_case>




	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_7"
		type="smoke">
		<t:objective> Modify account and send mail to check sieve filter for
			incoming mail</t:objective>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test id="modifyaccountrequest_6">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_7}</a>
					<a n="zimbraMailSieveScript">${admin_script_user_value_7}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_7}</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>


		<!-- Send a mail. The filter should stop after user script execution. The admin after should not get executed -->

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject12}</su>
						<mp ct="text/plain">
							<content>Should discard user script
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:${folder1.name}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject12}" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:Junk</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject12}" emptyset="1" />
			</t:response>
		</t:test>


	</t:test_case>



	<t:test_case testcaseid="SendMail_And_checkFilter_Execution_8"
		type="smoke">
		<t:objective> Modify account and send mail to check seive filter for
			incoming mail</t:objective>


		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>


		<t:test id="modifyaccountrequest_8">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraAdminSieveScriptBefore">${admin_script_value_before_8}</a>
					<a n="zimbraMailSieveScript">${admin_script_user_value_8}</a>
					<a n="zimbraAdminSieveScriptAfter">${admin_script_value_after_8}</a>
				</ModifyAccountRequest>
			</t:request>

			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<!-- Send mail. The admin before should discard the message. However the rest filters should also get executed as "Stop" command is not fired in Admin before command -->

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject13}</su>
						<mp ct="text/plain">
							<content>This mail should stop after user script
							</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:${folder2.name}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject13}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:${folder1.name}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject13}" emptyset="1" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${test_account1.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail">
					<query>in:inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:c" attr="su"
					match="${subject13}" />
			</t:response>
		</t:test>



	</t:test_case>


</t:tests>	