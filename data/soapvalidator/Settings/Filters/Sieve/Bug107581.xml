<t:tests xmlns:t="urn:zimbraTestHarness">
    <!-- Test accounts declaration -->
    <t:property name="address_partial" value=".${TIME}${COUNTER}" />
    <t:property name="test_account1.name" value='"test1$xyz${address_partial}"@${defaultdomain.name}'/>
    <t:property name="test_account2.name" value="test2.${TIME}${COUNTER}@${defaultdomain.name}"/>
    <t:property name="test_account3.name" value="test2.${TIME}${COUNTER}@${defaultdomain.name}"/>

    <!-- Variables declaration -->
    <t:property name="folder_inbox" value="Inbox" />
    <t:property name="subject" value="Test message"/>
    <t:property name="backslash" value="\\\\" />
    <t:property name="v_dollar" value="$\{dollar}" />
    <t:property name="v_val" value="$\{val}" />
    <t:property name="v_plain" value="$\{plain}" />
    <t:property name="v_open" value="$\{open}" />
    <t:property name="v_close" value="$\{close}" />
    <t:property name="c_open" value="{" />
    <t:property name="c_close" value="}" />

    <t:property name="msg01.file" value="${testMailRaw.root}/bug107581/mime.txt"/>

    <!-- Sieve rules declaration -->
    <!-- Test Address cannot match a double quotation (bug107617)
         A double-quotation in Envelope From is removed during lmtpinject (bug107618, bug107619) -->
    <t:property name="sieve_rule1" value='require ["tag", "variables", "relational", "envelope"];
set "dollar" "$";
set "val" "xyz";
set "open" "${c_open}";
set "close" "${c_close}";
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}xyz" {
  tag "h0-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "*${v_dollar}xyz*" {
  tag "h0-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}${v_val}" {
  tag "h0-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "*${v_dollar}${v_val}*" {
  tag "h0-matches-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "$xyz" {
  tag "h0-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "*$xyz*" {
  tag "h0-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "$${v_val}" {
  tag "h0-matches-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header0" "*$${v_val}*" {
  tag "h0-matches-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}xyz" {
  tag "h0-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}${v_val}" {
  tag "h0-is-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header0" "$xyz" {
  tag "h0-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header0" "$${v_val}" {
  tag "h0-is-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}xyz" {
  tag "h0-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header0" "${v_dollar}${v_val}" {
  tag "h0-contains-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header0" "$xyz" {
  tag "h0-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header0" "$${v_val}" {
  tag "h0-contains-4";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 ${v_dollar}xyz 456" {
  tag "h1-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "*${v_dollar}xyz*" {
  tag "h1-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 ${v_dollar}${v_val} 456" {
  tag "h1-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "*${v_dollar}${v_val}*" {
  tag "h1-matches-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 $xyz 456" {
  tag "h1-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "*$xyz*" {
  tag "h1-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 $${v_val} 456" {
  tag "h1-matches-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header1" "*$${v_val}*" {
  tag "h1-matches-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 ${v_dollar}xyz 456" {
  tag "h1-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 ${v_dollar}${v_val} 456" {
  tag "h1-is-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 $xyz 456" {
  tag "h1-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header1" "123 $${v_val} 456" {
  tag "h1-is-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header1" "${v_dollar}xyz" {
  tag "h1-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header1" "${v_dollar}${v_val}" {
  tag "h1-contains-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header1" "$xyz" {
  tag "h1-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header1" "$${v_val}" {
  tag "h1-contains-4";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header2" "${v_dollar}" {
  tag "h2-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header2" "*${v_dollar}*" {
  tag "h2-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header2" "$" {
  tag "h2-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header2" "$*" {
  tag "h2-matches-4";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header2" "${v_dollar}" {
  tag "h2-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header2" "$" {
  tag "h2-is-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header2" "${v_dollar}" {
  tag "h2-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header2" "$" {
  tag "h2-contains-2";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${c_open}" {
  tag "h3-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "*${v_dollar}${c_open}*" {
  tag "h3-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${v_open}" {
  tag "h3-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "*${v_dollar}${v_open}*" {
  tag "h3-matches-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${c_open}" {
  tag "h3-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "*$${c_open}*" {
  tag "h3-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${v_open}" {
  tag "h3-matches-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header3" "*$${v_open}*" {
  tag "h3-matches-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${c_open}" {
  tag "h3-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${v_open}" {
  tag "h3-is-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${c_open}" {
  tag "h3-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${v_open}" {
  tag "h3-is-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${c_open}" {
  tag "h3-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header3" "${v_dollar}${v_open}" {
  tag "h3-contains-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${c_open}" {
  tag "h3-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header3" "$${v_open}" {
  tag "h3-contains-4";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${c_close}" {
  tag "h4-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "*${v_dollar}${c_close}*" {
  tag "h4-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${v_close}" {
  tag "h4-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "*${v_dollar}${v_close}*" {
  tag "h4-matches-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${c_close}" {
  tag "h4-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "*$${c_close}*" {
  tag "h4-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${v_close}" {
  tag "h4-matches-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header4" "*$${v_close}*" {
  tag "h4-matches-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${c_close}" {
  tag "h4-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${v_close}" {
  tag "h4-is-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${c_close}" {
  tag "h4-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${v_close}" {
  tag "h4-is-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${c_close}" {
  tag "h4-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header4" "${v_dollar}${v_close}" {
  tag "h4-contains-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${c_close}" {
  tag "h4-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header4" "$${v_close}" {
  tag "h4-contains-4";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${c_open}${c_close}" {
  tag "h5-matches-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "*${v_dollar}${c_open}${c_close}*" {
  tag "h5-matches-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${v_open}${v_close}" {
  tag "h5-matches-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "*${v_dollar}${v_open}${v_close}*" {
  tag "h5-matches-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${c_open}${c_close}" {
  tag "h5-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "*$${c_open}${c_close}*" {
  tag "h5-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${v_open}${v_close}" {
  tag "h5-matches-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header5" "*$${v_open}${v_close}*" {
  tag "h5-matches-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${c_open}${c_close}" {
  tag "h5-is-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${v_open}${v_close}" {
  tag "h5-is-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${c_open}${c_close}" {
  tag "h5-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${v_open}${v_close}" {
  tag "h5-is-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${c_open}${c_close}" {
  tag "h5-contains-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header5" "${v_dollar}${v_open}${v_close}" {
  tag "h5-contains-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${c_open}${c_close}" {
  tag "h5-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header5" "$${v_open}${v_close}" {
  tag "h5-contains-4";
}

if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${c_open}undefined${c_close}" {
  tag "h6-matches-should-not-be-added-should-not-be-added-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "*${v_dollar}${c_open}undefined${c_close}*" {
  tag "h6-matches-should-not-be-added-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${v_open}undefined${v_close}" {
  tag "h6-matches-should-not-be-added-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "*${v_dollar}${v_open}undefined${v_close}*" {
  tag "h6-matches-should-not-be-added-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${c_open}undefined${c_close}" {
  tag "h6-matches-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "*$${c_open}undefined${c_close}*" {
  tag "h6-matches-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${v_open}undefined${v_close}" {
  tag "h6-matches-should-not-be-added-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header6" "*$${v_open}undefined${v_close}*" {
  tag "h6-matches-should-not-be-added-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${c_open}undefined${c_close}" {
  tag "h6-is-should-not-be-added-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${v_open}undefined${v_close}" {
  tag "h6-is-should-not-be-added-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${c_open}undefined${c_close}" {
  tag "h6-is-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${v_open}undefined${v_close}" {
  tag "h6-is-should-not-be-added-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${c_open}undefined${c_close}" {
  tag "h6-contains-should-not-be-added-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header6" "${v_dollar}${v_open}undefined${v_close}" {
  tag "h6-contains-should-not-be-added-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${c_open}undefined${c_close}" {
  tag "h6-contains-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header6" "$${v_open}undefined${v_close}" {
  tag "h6-contains-should-not-be-added-4";
}

if address :matches :comparator "i;ascii-casemap" "From" "test1${v_dollar}xyz${address_partial}@${defaultdomain.name}" {
  tag "address-matches-1";
}
if address :matches :comparator "i;ascii-casemap" "From" "*${v_dollar}xyz*" {
  tag "address-matches-2";
}
if address :matches :comparator "i;ascii-casemap" "From" "test1${v_dollar}${v_val}${address_partial}@${defaultdomain.name}" {
  tag "address-matches-3";
}
if address :matches :comparator "i;ascii-casemap" "From" "*${v_dollar}${v_val}*" {
  tag "address-matches-4";
}
if address :matches :comparator "i;ascii-casemap" "From" "test1$xyz${address_partial}@${defaultdomain.name}" {
  tag "address-matches-5";
}
if address :matches :comparator "i;ascii-casemap" "From" "*$xyz${address_partial}*" {
  tag "address-matches-6";
}
if address :matches :comparator "i;ascii-casemap" "From" "test1$${v_val}${address_partial}@${defaultdomain.name}" {
  tag "address-matches-7";
}
if address :matches :comparator "i;ascii-casemap" "From" "*$${v_val}*" {
  tag "address-matches-8";
}
if address :is :comparator "i;ascii-casemap" "From" "test1${v_dollar}xyz${address_partial}@${defaultdomain.name}" {
  tag "address-is-1";
}
if address :is :comparator "i;ascii-casemap" "From" "test1${v_dollar}${v_val}${address_partial}@${defaultdomain.name}" {
  tag "address-is-2";
}
if address :is :comparator "i;ascii-casemap" "From" "test1$xyz${address_partial}@${defaultdomain.name}" {
  tag "address-is-3";
}
if address :is :comparator "i;ascii-casemap" "From" "test1$${v_val}${address_partial}@${defaultdomain.name}" {
  tag "address-is-4";
}
if address :contains :comparator "i;ascii-casemap" "From" "${v_dollar}xyz" {
  tag "address-contains-1";
}
if address :contains :comparator "i;ascii-casemap" "From" "${v_dollar}${v_val}" {
  tag "address-contains-2";
}
if address :contains :comparator "i;ascii-casemap" "From" "$xyz" {
  tag "address-contains-3";
}
if address :contains :comparator "i;ascii-casemap" "From" "$${v_val}" {
  tag "address-contains-4";
}

if envelope :matches :comparator "i;ascii-casemap" "From" "test1${v_dollar}xyz${address_partial}@${defaultdomain.name}" {
  tag "envelope-matches-1";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "*${v_dollar}xyz*" {
  tag "envelope-matches-2";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "test1${v_dollar}${v_val}${address_partial}@${defaultdomain.name}" {
  tag "envelope-matches-3";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "*${v_dollar}${v_val}*" {
  tag "envelope-matches-4";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "test1$xyz${address_partial}@${defaultdomain.name}" {
  tag "envelope-matches-5";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "*$xyz${address_partial}*" {
  tag "envelope-matches-6";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "test1$${v_val}${address_partial}@${defaultdomain.name}" {
  tag "envelope-matches-7";
}
if envelope :matches :comparator "i;ascii-casemap" "From" "*$${v_val}*" {
  tag "envelope-matches-8";
}
if envelope :is :comparator "i;ascii-casemap" "From" "test1${v_dollar}xyz${address_partial}@${defaultdomain.name}" {
  tag "envelope-is-1";
}
if envelope :is :comparator "i;ascii-casemap" "From" "test1${v_dollar}${v_val}${address_partial}@${defaultdomain.name}" {
  tag "envelope-is-2";
}
if envelope :is :comparator "i;ascii-casemap" "From" "test1$xyz${address_partial}@${defaultdomain.name}" {
  tag "envelope-is-3";
}
if envelope :is :comparator "i;ascii-casemap" "From" "test1$${v_val}${address_partial}@${defaultdomain.name}" {
  tag "envelope-is-4";
}
if envelope :contains :comparator "i;ascii-casemap" "From" "${v_dollar}xyz" {
  tag "envelope-contains-1";
}
if envelope :contains :comparator "i;ascii-casemap" "From" "${v_dollar}${v_val}" {
  tag "envelope-contains-2";
}
if envelope :contains :comparator "i;ascii-casemap" "From" "$xyz" {
  tag "envelope-contains-3";
}
if envelope :contains :comparator "i;ascii-casemap" "From" "$${v_val}" {
  tag "envelope-contains-4";
}
'/>
    <!-- the header does not have '$' -->
    <t:property name="sieve_rule2" value='require ["tag", "variables"];
set "dollar" "$";
set "plain" "PlainText";
set "open" "${c_open}";
set "close" "${c_close}";
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}PlainText" {
  tag "plain-matches-should-not-be-added-1";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*${v_dollar}PlainText*" {
  tag "plain-matches-should-not-be-added-2";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}${v_plain}" {
  tag "plain-matches-should-not-be-added-3";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*${v_dollar}${v_plain}*" {
  tag "plain-matches-should-not-be-added-4";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$PlainText" {
  tag "plain-matches-should-not-be-added-5";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*$PlainText*" {
  tag "plain-matches-should-not-be-added-6";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_plain}" {
  tag "plain-matches-should-not-be-added-7";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*$${v_plain}*" {
  tag "plain-matches-should-not-be-added-8";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*$${c_open}PlainText${c_open}*" {
  tag "plain-matches-should-not-be-added-9";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*$${c_open}${v_plain}${c_open}*" {
  tag "plain-matches-should-not-be-added-10";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_open}PlainText${v_open}" {
  tag "plain-matches-should-not-be-added-11";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "*$${v_open}${v_plain}${v_open}*" {
  tag "plain-matches-should-not-be-added-12";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "PlainText" {
  tag "plain-matches-13";
}
if header :matches :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_plain}" {
  tag "plain-matches-14";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}PlainText" {
  tag "plain-is-should-not-be-added-1";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}${v_plain}" {
  tag "plain-is-should-not-be-added-2";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$PlainText" {
  tag "plain-is-should-not-be-added-3";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_plain}" {
  tag "plain-is-should-not-be-added-4";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${c_open}PlainText${c_open}" {
  tag "plain-is-should-not-be-added-5";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${c_open}${v_plain}${c_open}" {
  tag "plain-is-should-not-be-added-6";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_open}PlainText${v_open}" {
  tag "plain-is-should-not-be-added-7";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_open}${v_plain}${v_open}" {
  tag "plain-is-should-not-be-added-8";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "PlainText" {
  tag "plain-is-9";
}
if header :is :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_plain}" {
  tag "plain-is-10";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}PlainText" {
  tag "plain-contains-should-not-be-added-1";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_dollar}${v_plain}" {
  tag "plain-contains-should-not-be-added-2";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$PlainText" {
  tag "plain-contains-should-not-be-added-3";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_plain}" {
  tag "plain-contains-should-not-be-added-4";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${c_open}PlainText${c_open}" {
  tag "plain-contains-should-not-be-added-5";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${c_open}${v_plain}${c_open}" {
  tag "plain-contains-should-not-be-added-6";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_open}PlainText${v_open}" {
  tag "plain-contains-should-not-be-added-7";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "$${v_open}${v_plain}${v_open}" {
  tag "plain-contains-should-not-be-added-8";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "PlainText" {
  tag "plain-contains-9";
}
if header :contains :comparator "i;ascii-casemap" "X-Sieve-Header-Plain" "${v_plain}" {
  tag "plain-contains-10";
}
'/>


    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup1" type="always" >
        <t:objective>create test accounts</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account1.id" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account2.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account2.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="test_account3.id" />
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account3.server" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107581_rule1" type="smoke" bugids="bug107581">
        <t:objective>Verify that the '$' in the 'if' test address/header/envelope does not throw any exception</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account2.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <from>${test_account1.name}</from>
                <to>${test_account2.name}</to>
                <server>${test_account2.server}</server>
                <modify>
                    <header a="From">${test_account1.name}</header>
                    <header a="To">${test_account2.name}</header>
                    <header a="Subject">${subject}</header>
                </modify>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
            </t:response>
        </t:test>

        <t:test >
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <!-- "^(?=.*h0-matches-1)(?=.*h1-matches-2).*" is also acceptable format, but
                     the following format can show a "match not found" log per tag -->
                <t:select path="//mail:SearchResponse">
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h0-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h1-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h2-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h3-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h4-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h5-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-3.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-7.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-matches-should-not-be-added-8.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-is-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-is-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-is-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-contains-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-contains-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*h6-contains-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*address-contains-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-5.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-6.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-7.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-matches-8.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-is-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-is-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-is-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-is-4.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-contains-1.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-contains-2.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-contains-3.*" />
                    <t:select path="//mail:m" attr="tn" match=".*envelope-contains-4.*" />
                </t:select>
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="bug107581_rule2" type="smoke" bugids="bug107581">
        <t:objective>Verify that the '$' in the 'if' test header does not throw any exception when the header does not have '$'</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${test_account3.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <from>${test_account1.name}</from>
                <to>${test_account3.name}</to>
                <server>${test_account3.server}</server>
                <modify>
                    <header a="From">${test_account1.name}</header>
                    <header a="To">${test_account3.name}</header>
                    <header a="Subject">${subject}</header>
                </modify>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
            </t:response>
        </t:test>

        <t:test >
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse">
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-3.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-5.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-6.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-7.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-8.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-9.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-10.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-11.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-should-not-be-added-12.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-13.*" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-matches-14.*" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-3.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-5.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-6.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-7.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-should-not-be-added-8.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-9.*" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-is-10.*" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-1.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-2.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-3.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-4.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-5.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-6.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-7.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-should-not-be-added-8.*" emptyset="1" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-9.*" />
                    <t:select path="//mail:m" attr="tn" match=".*plain-contains-10.*" />
                </t:select>
            </t:response>
        </t:test>
    </t:test_case>
</t:tests>
