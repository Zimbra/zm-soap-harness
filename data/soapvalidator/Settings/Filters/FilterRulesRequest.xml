<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="FilterRulesRequests_AccountSetup" type="sanity" >
    <t:objective>Account setup for all filterrules requests sanity test</t:objective>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraCalendarReminderDeviceEmail">"foo@foo.com"}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
             
</t:test_case>


<t:test_case testcaseid="ModifyFilterRulesRequest_01" type="sanity" >
    <t:objective>Sanity test for ModifyFilterRulesRequest</t:objective>    
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>

	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="GetFilterRulesRequest_01" type="sanity" >
    <t:objective>Sanity test for GetFilterRulesRequest</t:objective>
 
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>

	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter2.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFilterRulesRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFilterRulesResponse">
            	<t:select path="//mail:filterRules">
            		<t:select path="//mail:filterRule[@name='${filter2.name}']" />            	
            	</t:select>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ApplyFilterRulesRequestBasic_01" type="sanity" >
    <t:objective>Sanity test for ApplyFilterRulesRequest</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:property name="filter3.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter3.subject" value="filter${TIME}${COUNTER}"/>

	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter3.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter3.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<ApplyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter3.name}"/>                                  
				</filterRules>
				<query>in:inbox</query>
            </ApplyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ApplyFilterRulesResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="OutgoingFilterRulesRequest_01" type="sanity">
    <t:objective>Sanity test for ModifyOutgoingFilterRulesRequest and GetOutgoingFilterRulesRequest</t:objective>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:property name="filter4.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter4.subject" value="filter${TIME}${COUNTER}"/>	

    <t:test id="filters_basic01a">
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter4.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter4.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetOutgoingFilterRulesRequest  xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule[@name='${filter4.name}']"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="ApplyOutgoingFilterRulesRequest_01" type="sanity">
    <t:objective>Sanity test for ApplyOutgoingFilterRulesRequest </t:objective>
     
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <t:property name="filter5.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter5.subject" value="filter${TIME}${COUNTER}"/>	

    <t:test id="filters_basic01a">
        <t:request>
            <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
                	<filterRule name="${filter5.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter5.subject}" />
						</filterTests>
						<filterActions>
							<actionFlag flagName="flagged" />
							<actionStop />
						</filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyOutgoingFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ApplyOutgoingFilterRulesRequest  xmlns="urn:zimbraMail">
            	<filterRules>
					<filterRule name="${filter5.name}"/>                                  
				</filterRules>
				<query>in:sent</query>
			</ApplyOutgoingFilterRulesRequest>
	 </t:request>
	 <t:response>
            <t:select path="//mail:ApplyOutgoingFilterRulesResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>

</t:tests>

