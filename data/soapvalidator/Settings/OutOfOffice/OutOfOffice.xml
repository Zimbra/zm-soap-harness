<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="account1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.reply" value="reply content"/>
<t:property name="OOO.reply" value="I'M out of Office"/>

<t:property name="account2.name" value="account2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="account4.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="account4.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="alias.name" value="Alias.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<!-- authentication -->
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<!-- Login as the admin to get an auth token -->
<t:test_case testcaseid="acct1_setup" type="always" >
    <t:objective>create test account</t:objective>
	<t:steps>1. Login to admin.
			2. Create a test account.
	</t:steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>

    <t:test  required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddAccountAliasRequest xmlns="urn:zimbraAdmin">
                <id>${account3.id}</id>
                <alias>${alias.name}</alias>
            </AddAccountAliasRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddAccountAliasResponse"/>
        </t:response>
    </t:test>  

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


    <t:test >
        <t:request>
            <ModifyPrefsRequest xmlns="urn:zimbraAccount">
                <pref name="zimbraPrefOutOfOfficeReplyEnabled">TRUE</pref>
                <pref name="zimbraPrefOutOfOfficeReply">${account1.reply}</pref>
            </ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>


</t:test_case>



<t:test_case testcaseid="OutOfOffice01" type="sanity" bugids="15975">
    <t:objective>Verify that an out of office reply contains the correct encoding for the subject</t:objective>
    <t:steps>
	1. Login to Account2.
	2. Send mail from Account2 to Account1, with subject using utf-8.
	3. Verify that the OOO reply is received at Account2, with utf-8 subject
    </t:steps>


	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="message1.subject" value="subjectÄêñsubject"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account1.name}"/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>Message Content</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<!-- Wait for a minute while the OOO reply is received -->
	<t:delay sec="60"/>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="message1.id"/>
				<t:select path="//mail:su" match=".*${message1.subject}.*"/>
			</t:select>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse">
				<t:select path="//mail:su" match=".*${message1.subject}.*"/>
			</t:select>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="OutOfOffice02" type="bhr" bugids="30548">
    <t:objective>Verify that an out of office reply works if mail is sent to alias </t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <ModifyPrefsRequest xmlns="urn:zimbraAccount">
                <pref name="zimbraPrefOutOfOfficeReplyEnabled">TRUE</pref>
                <pref name="zimbraPrefOutOfOfficeReply">${OOO.reply}</pref>
            </ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>



	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	<t:property name="message1.subject" value="subjectÄêñsubject"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="message2.subject" value="Test OOO Mail"/>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account3.name}"/>
					<su>${message2.subject}</su>
					<mp ct="text/plain">
						<content>Message Content</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<!-- Wait for a minute while the OOO reply is received -->
	<t:delay sec="60"/>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>content: ${OOO.reply}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:su" match=".*${message2.subject}.*"/>
			</t:select>
		</t:response>
	</t:test>

		
</t:test_case>

<t:test_case testcaseid="OutOfOffice03" type="bhr" bugids="84788">
    <t:objective>Verify that an out of office reply works if mail has empty subject </t:objective>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="message.content" value="content${TIME}${COUNTER}"/>

	<!-- Send message without subject -->
	<t:test required="true" >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account1.name}"/>
					<mp ct="text/plain">
						<content>${message.content}</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<!-- Wait for a minute while the OOO reply is received -->
	<t:delay sec="60"/>

	<t:test required="true" >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>content:(${account1.reply})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse//mail:m" attr="id" set="message1.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse"/>
        </t:response>
    </t:test>
		
</t:test_case>

<t:test_case testcaseid="OutOfOffice04" type="bhr" bugids="84788">
    <t:objective>Verify that an out of office reply works if mail has no subject header </t:objective>


	<t:property name="message1.file" value="${testMailRaw.root}/Bugs/84788/Msg01.txt"/>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message1.file}</filename>
			<to>${account1.name}</to>
			<from>${account4.name}</from>
			<server>${account1.server}</server>
			<modify>
				<header a="To">${account1.name}</header>
				<header a="From">${account4.name}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<!-- Wait for a minute while the OOO reply is received -->
	<t:delay sec="60"/>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test required="true" >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>content:(${account1.reply})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse//mail:m" attr="id" set="message1.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:GetMsgResponse"/>
        </t:response>
    </t:test>
		
</t:test_case>

<t:test_case testcaseid="OutOfOffice05" type="sanity" bugids="57009">
    <t:objective>Verify that an out of office reply is not sent for BCC messages </t:objective>


	<t:property name="server.zimbraAccount" value="${account5.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="message.content" value="content${TIME}${COUNTER}"/>

	<!-- Send message without subject -->
	<t:test required="true" >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account4.name}"/>
					<e t="b" a="${account1.name}"/>
					<mp ct="text/plain">
						<content>${message.content}</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<!-- Wait for a minute while the OOO reply is received -->
	<t:delay sec="60"/>

<!-- 
Per http://bugzilla.zimbra.com/show_bug.cgi?id=57009 ... no OOO response should be found 
Since the bug (enhancement) is currently open, make this test case fail by looking for the OOO response
-->

	<t:test required="true" >
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>content:(${account1.reply})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse//mail:m"/>
		</t:response>
	</t:test>

		
		
</t:test_case>



</t:tests>
