<t:tests xmlns:t="urn:zimbraTestHarness">



<t:property name="password.invalid" value="betelgeuse"/>


<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account6.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account7.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account8.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account9.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>




<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="LockoutPassword_AccountSetup" type="always">
	<t:objective>Create Test Accounts</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">2</a>
				<a n="zimbraPasswordLockoutFailureLifetime">90s</a>
				<a n="zimbraPasswordLockoutDuration">90s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account1.server"/>
			<t:select path="//admin:CreateAccountResponse/admin:account">
				<t:select path="//admin:a[@n='zimbraPasswordLockoutEnabled']" match="${globals.true}"/>			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutMaxFailures']" match="^2$"/>			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureLifetime']" match="^90s$"/>			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutDuration']" match="^90s$"/>			
			</t:select>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.false}</a>
				<a n="zimbraPasswordLockoutMaxFailures">2</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account2.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account3.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">5</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account3.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account4.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">2</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account4.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account5.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">2</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">0</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account5.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account6.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">0</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account6.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account6.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account7.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">5</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account7.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account7.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account8.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">5</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account8.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account8.server"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account9.name}</name>
				<password>${defaultpassword.value}</password>
				<a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
				<a n="zimbraPasswordLockoutMaxFailures">2</a>
				<a n="zimbraPasswordLockoutFailureLifetime">60s</a>
				<a n="zimbraPasswordLockoutDuration">60s</a>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account9.id"/>
			<t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']" set="account9.server"/>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="LockoutPassword_01" type="bhr">
	<t:objective>Verify that an account status is changed to locked out if too many failed logins</t:objective>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:delay sec="60"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account1.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse">
				<t:select path="//admin:a[@n='zimbraAccountStatus']" match="lockout"/>			
			</t:select>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="LockoutPassword_02" type="bhr">
	<t:objective>Verify other lockout attributes on the account</t:objective>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account1.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse">
				<t:select path="//admin:a[@n='zimbraAccountStatus']" match="lockout"/>
				<t:select path="//admin:a[@n='zimbraPasswordLockoutLockedTime']" match="^\d+(\.\d+)?Z$"/>			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime']" match="^\d+(\.\d+)?Z$"/>			
			</t:select>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="LockoutPassword_03" type="bhr" bugids="11514" >
	<t:objective>Verify mail client AuthRequest returns AUTH_FAILED when account is locked out</t:objective>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<!--
				Per bug 11514, when account is locked out, AUTH_FAILED is returned.
			-->
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="LockoutPassword_04" type="bhr">
	<t:objective>Verify mail client AuthRequest succeeds after the lockout expires</t:objective>
	<t:steps>
	1. Send invalid Auth twice to lockout the account
	2. Wait for 60 + 10 seconds for the lockout to expire
	3. The next AuthRequest should be successful
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:delay sec="70"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>


<t:test_case testcaseid="LockoutPassword_05" type="bhr">
	<t:objective>Verify an account with zimbraPasswordLockoutEnabled = false does not lockout</t:objective>
	<t:steps>
	1. Send invalid Auth twice to lockout the account
	2. The next, immediate AuthRequest should be successful
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>


<t:test_case testcaseid="LockoutPassword_06" type="bhr">
	<t:objective>If zimbraPasswordLockoutMaxFailures = 5, then 4 fails, 1 success, does not lockout</t:objective>
	<t:steps>
	1. Send 4 invalid Auths 
	2. Then valid AuthRequest successfully (which should reset the count)
	3. Send 4 invalid Auths
	4. The next valid AuthRequest should still be successful.
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account3.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="LockoutPassword_07" type="bhr">
	<t:objective>If zimbraPasswordLockoutFailureLifetime = 60, then invalid authentications will expire correctly</t:objective>
	<t:steps>
	1. Send 1 invalid Authentication
	2. Wait for 60 + 10 seconds
	3. Send 1 invalid Authentication
	4. The next, immediate valid AuthRequest should be successful
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account4.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account4.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:delay sec="70"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account4.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account4.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>


<t:test_case testcaseid="LockoutPassword_08" type="bhr">
	<t:objective>Verify that an admin can unlockout an account</t:objective>
	<t:steps>
	1. Send 2 invalid Authentication (account status is lockout)
	2. Admin changes the status to active
	4. The next, immediate valid AuthRequest should be successful
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account5.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account5.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account5.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account5.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse">
				<t:select path="//admin:a[@n='zimbraAccountStatus']" match="lockout"/>			
			</t:select>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account5.id}</id>
				<a n="zimbraAccountStatus">active</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account5.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>



<t:test_case testcaseid="LockoutPassword_09" type="bhr">
	<t:objective>Verify that if zimbraPasswordLockoutMaxFailures = 0, then a series of invalid authentications will not lockout the account</t:objective>
	<t:steps>
	1. Send 100 invalid Authentication
	2. The next, immediate valid AuthRequest should be successful
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account6.server}"/>
	
    <t:test_loop count="100">
    
		<t:test >
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account6.name}</account>
					<password>${password.invalid}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
			</t:response>
		</t:test>
		
    </t:test_loop>


	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account6.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="LockoutPassword_10" type="bhr">
	<t:objective>Verify that if zimbraPasswordLockoutMaxFailures = 5, then at least 4 failed auths are kept in zimbraPasswordLockoutFailureTime</t:objective>
	<t:steps>
	1. Send 4 invalid Authentication (delay 2 seconds between auths so that the elements are not overwritten)
	2. Verify that 4 are saved
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account7.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account7.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account7.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account7.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account7.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account7.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse">
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][1]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][2]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][3]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][4]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][5]" emptyset="1"/>			
			</t:select>
		</t:response>
	</t:test>



</t:test_case>

<t:test_case testcaseid="LockoutPassword_11" type="bhr">
	<t:objective>Verify that if zimbraPasswordLockoutMaxFailures = 5, then at least 4 failed auths are kept in zimbraPasswordLockoutFailureTime</t:objective>
	<t:steps>
	1. Send 4 invalid Authentication (delay 2 seconds between auths so that the elements are not overwritten)
	2. Wait for 70 seconds
	3. Send 2 invalid Authentication
	4. Verify that 2 are saved
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account8.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		

	<t:delay sec="70"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="id">${account8.id}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse">
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][1]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][2]" />			
				<t:select path="//admin:a[@n='zimbraPasswordLockoutFailureTime'][3]" emptyset="1"/>			
			</t:select>
		</t:response>
	</t:test>



</t:test_case>


<t:test_case testcaseid="LockoutPassword_12" type="bhr" bugids="14166">
	<t:objective>Verify that if an account is in lockout state, it can still receive messages</t:objective>
	<t:steps>
	1. Send invalid Authentication so that the account is locked out
	2. Send a message to the account from an external source (LMTP)
	3. Wait for 70 seconds so that the LOCKOUT expires
	4. Login as the account
	5. Verify that the message is received
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account9.server}"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account9.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account9.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:delay sec="2"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account9.name}</account>
				<password>${password.invalid}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>
		
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt"/>
	<t:property name="msg01.subject" value="email01A"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account9.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account9.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
		

	<t:delay sec="70"/>
	
    <t:test >
        <t:request>
            <AuthRequest xmlns = "urn:zimbraAccount">
                <account by="name">${account9.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${msg01.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m">
				<t:select path="//mail:su" match="${msg01.subject}"/>
			</t:select>
		</t:response>
	</t:test>


</t:test_case>

</t:tests>
