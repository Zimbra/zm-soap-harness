<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="compose.subject" value="Subject of the message is testing"/>
<t:property name="compose.content" value="Content in the message is contents..."/>
<t:property name="draft.subject" value="Subject of the message is testing"/>
<t:property name="draft.content" value="Content in the message is contents..."/>
<t:property name="task1.subject" value="Subject of  task${TIME}.${COUNTER}"/>
<t:property name="account2.wiki1.pagename" value="wiki.${TIME}.${COUNTER}"/>

<t:property name="appointment.subject" value="Subject of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.location" value="Location of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>
<t:property name="time.20071201120000.gmt" value="1196510400000"/>

<t:property name = "op.delete" value = "delete"/>

<t:property name="destination.name" value="acct1.${COUNTER}.${TIME}@${defaultdomain.name}"/>

<t:property name="account1.name" value="acct1.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account1.password" value="${defaultpassword.value}"/>
<t:property name="account1.usage" value="^496.*"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>

<t:property name="account2.name" value="acct2.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account2.password" value="${defaultpassword.value}"/>
<t:property name="account2.quota" value="1000"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="account3.name" value="acct3.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account3.password" value="${defaultpassword.value}"/>
<t:property name="account3.quota" value="1000"/>
<t:property name="test_acct3.server" value="NOT_DEFINED"/>

<t:property name="account4.name" value="acct4.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account4.password" value="${defaultpassword.value}"/>
<t:property name="account4.quota" value="1000"/>
<t:property name="test_acct4.server" value="NOT_DEFINED"/>

<t:property name="account5.name" value="acct5.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account5.password" value="${defaultpassword.value}"/>
<t:property name="account5.quota" value="600000000"/>
<t:property name="test_acct5.server" value="NOT_DEFINED"/>

<t:property name="account6.name" value="acct6.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account6.password" value="${defaultpassword.value}"/>
<t:property name="account6.quota" value="600000000"/>
<t:property name="test_acct6.server" value="NOT_DEFINED"/>

<t:property name="account7.name" value="acct7.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account7.password" value="${defaultpassword.value}"/>
<t:property name="account7.quota" value="600000000"/>
<t:property name="test_acct7.server" value="NOT_DEFINED"/>

<t:property name="account8.name" value="acct8.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account8.password" value="${defaultpassword.value}"/>
<t:property name="account8.quota" value="1979626"/>  <!-- 3 times the size of limit01/limit01E.txt -->
<t:property name="test_acct8.server" value="NOT_DEFINED"/>

<t:property name="account9.name" value="acct9.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account9.password" value="${defaultpassword.value}"/>
<t:property name="account9.quota" value="2048000"/>  <!-- 3 times the size of limit01/limit01E.txt -->
<t:property name="test_acct9.server" value="NOT_DEFINED"/>

<t:property name="account10.name" value="acct10.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account10.password" value="${defaultpassword.value}"/>
<t:property name="account10.quota" value="1979626"/>  <!-- 3 times the size of limit01/limit01E.txt -->
<t:property name="test_acct10.server" value="NOT_DEFINED"/>

<t:property name="account11.name" value="acct11.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account11.password" value="${defaultpassword.value}"/>
<t:property name="account11.quota" value="1979626"/>  <!-- 3 times the size of limit01/limit01E.txt -->
<t:property name="test_acct11.server" value="NOT_DEFINED"/>

<t:property name="account12.name" value="acct12.${COUNTER}.${TIME}@${defaultdomain.name}"/>
<t:property name="account12.password" value="${defaultpassword.value}"/>
<t:property name="account12.quota" value="1000"/>
<t:property name="test_acct12.server" value="NOT_DEFINED"/>

<t:property name="folder.name" value="folder.${TIME}.${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

	<t:test id="ping" required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="create_test_account_destination" type="always" >
    <t:objective>login as the admin</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account_destination" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${destination.name}</name>
                <password>${defaultpassword.value}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="destination.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="destination.server"/>
        </t:response>
    </t:test>


</t:test_case>




<t:test_case testcaseid="mailbox_limit1" type="sanity">
	<t:objective>Verify that the mailbox usage is returned by GetInfoRequest correctly</t:objective>
	<t:steps>
		1. Login as the end user
		2. verify that the set amount of used mailbox is returned
	</t:steps>
	

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${account1.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>


    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		 <t:requestContext>
		   <authToken>${authToken}</authToken>
		 </t:requestContext>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
				<t:select path="//acct:GetInfoResponse/acct:used" match="${account1.usage}"/>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="mailbox_limit2" type="sanity" bugids="31345">
	<t:objective>
		Verify that a message cannot be added to the mailbox, if his mailbox is over his limit. Additionally verify full quota doesn't allow saving anything </t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit lower than current usage
		3. Login as the user
		4. Issue AddMsg to add a message to the mailbox
		5. Try to save a draft message (should fail)
		6. Try to create a contact (should fail)
		7. Try creating task (should fail)
		8. Try creating wiki pages (should fail)
		9. Try uploading documents to briefcase (should fail)
		10. Try creating appointment (should fail)
	</t:steps>
	

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${account2.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account2.id}</id>
				<a n="zimbraMailQuota">${account2.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account2.name}</account>
				<password>${account2.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<AddMsgRequest xmlns="urn:zimbraMail">
				<m l="1">
				<content>Subject: hello

do it
				</content></m>
			</AddMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
		</t:response>
	</t:test>

    <t:test>
        <t:request>
            <SaveDraftRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <su> ${draft.subject} </su>
                    <mp ct="text/plain">
                        <content> ${draft.content}</content>
                    </mp>
                </m>
            </SaveDraftRequest>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn>
                    <a n="firstName">First.${TIME}.${COUNTER}</a>
                    <a n="lastName">Last.${TIME}.${COUNTER}</a>
                    <a n="email">email.${TIME}.${COUNTER}@domain.com</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:CreateContactResponse"/>
		</t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.tasks}']" attr="id" set="account2.task.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account2.briefcase.id"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
	        <CreateTaskRequest xmlns="urn:zimbraMail">
				<m l="${account2.task.id}">
					<inv/>
					<su>${task1.subject}</su>
				</m>
	        </CreateTaskRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:CreateTaskResponse"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc name="${account2.wiki1.pagename}" ct="application/x-zimbra-doc" l="${account2.briefcase.id}" descEnabled="true" desc="1">
			  	<content>
					&lt;html&gt;&lt;body&gt;Now is the time for all good men to come to the aid of their country&lt;/body&gt;&lt;/html&gt;
				</content>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
		</t:response>
    </t:test>

	<t:property name="uploadServletServer" value="${test_acct2.server}"/>
	<t:property name="server.restServlet" value="${test_acct2.server}"/>
	<t:property name="account2.filename" value="${testMailRaw.root}/contacts.csv"/>
	<!-- file '6750.pst' is 110 MB in size -->

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${account2.filename}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="account2.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test >
        <t:request>
			<SaveDocumentRequest xmlns="urn:zimbraMail">
			  <doc l="${account2.briefcase.id}">
			    <upload id="${account2.aid}"/>
			  </doc>
			</SaveDocumentRequest>
        </t:request>
        <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
		</t:response>
    </t:test>
   
    <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <inv > 
                    	<comp method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment.subject}" >
	                        <s d="${ICALTIME[${time.20071201120000.gmt}]}"/>  
	                        <e d="${ICALTIME(+1h)[${time.20071201120000.gmt}]}"/>  
	                        <or a="${account1.name}"/>
                        </comp>
                    </inv>
                    <mp content-type="text/plain">
                        <content>${appointment.content}</content>
                    </mp>
                    <su>${appointment.subject}</su>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
			<t:select path="//mail:CreateAppointmentResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="mailbox_limit3" type="sanity">
	<t:objective>
		Verify that the account cannot send a message if his mailbox is over his limit
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit lower than current usage
		3. Login as the user
		4. Issue SendMsg to send a message from the mailbox
	</t:steps>
	

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${account3.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct3.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account3.id}</id>
				<a n="zimbraMailQuota">${account3.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
	<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${account3.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a='${destination.name}'/>
					<su> ${compose.subject} </su>
					<mp ct="text/plain">
						<content> ${compose.content} </content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="mailbox_limit4" type="sanity">
	<t:objective>
		Verify that the account cannot receive a message if his mailbox is over his limit
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit lower than current usage
		3. Execute an lmtpinject request to add a message to the mailbox (Should FAIL)
	</t:steps>
	

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${account4.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct4.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account4.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct4.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account4.id}</id>
				<a n="zimbraMailQuota">${account4.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account4.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct4.server}</server>
        </t:lmtpInjectRequest>
        <t:lmtpInjectResponse>
        	<code>452</code>
        </t:lmtpInjectResponse>
    </t:mailinjecttest>
    

</t:test_case>


<t:test_case testcaseid="mailbox_limit5" type="sanity">
	<t:objective>Verify that the account can receive a message if his mailbox is under his limit</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit above than current usage;
		3. Login as the user
		4. Issue AddMsg to receive a message from the mailbox
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account6.name}</name>
                <password>${account6.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account6.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct6.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account6.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct6.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account6.id}</id>
				<a n="zimbraMailQuota">${account6.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
<t:property name="server.zimbraAccount" value="${test_acct6.server}"/>
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account6.name}</account>
				<password>${account6.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<AddMsgRequest xmlns="urn:zimbraMail">
				<m l="1">
				<content>Subject: hello

do it
				</content></m>
			</AddMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:AddMsgResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="mailbox_limit6" type="sanity">
	<t:objective>Verify that the account can send a message if his mailbox is under his limit</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit above than current usage;
		3. Login as the user
		4. Issue SendMsg to send a message from the mailbox
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${account5.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct5.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account5.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct5.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account5.id}</id>
				<a n="zimbraMailQuota">${account5.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
<t:property name="server.zimbraAccount" value="${test_acct5.server}"/>
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account5.name}</account>
				<password>${account5.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a='${destination.name}'/>
					<su> ${compose.subject} </su>
					<mp ct="text/plain">
						<content> ${compose.content} </content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="mailbox_limit7" type="sanity">
	<t:objective>Verify that the account can send a message if his mailbox is under his limit</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit above than current usage;
		3. Login as the user
		4. Issue lmtpinject to simulate receiving a message into the mailbox
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account7.name}</name>
                <password>${account7.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account7.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct7.server"/>
        </t:response>
    </t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account7.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct7.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account7.id}</id>
				<a n="zimbraMailQuota">${account7.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account7.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct7.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    

</t:test_case>



<t:test_case testcaseid="mailbox_limit8" type="sanity" bugids="5728">
	<t:objective>
		Verify that an account can continue to receive mails until the quota is reached
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit at 3 times the size of the injected message
		3. Use lmtpinject to add the same message 3 times (inject is succesful)
		4. Use lmtpinject to add the same message a 4th time (inject is unsuccessful)
		4. Use SendMsgRequest to add the same message a 4th time (QUOTA_EXCEEDED should be returned)
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account8.name}</name>
                <password>${account8.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account8.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct8.server"/>
        </t:response>
    </t:test>


	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account8.id}</id>
				<a n="zimbraMailQuota">${account8.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account8.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct8.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account8.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct8.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account8.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct8.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account8.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct8.server}</server>
        </t:lmtpInjectRequest>
        <t:lmtpInjectResponse>
        	<code>452</code>
        </t:lmtpInjectResponse>
    </t:mailinjecttest>
    
<t:property name="server.zimbraAccount" value="${test_acct8.server}"/>
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account8.name}</account>
				<password>${account8.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    
	<t:property name="uploadServletServer" value="${test_acct8.server}"/>
	<t:property name="uploadFile.name" value="${testMailRaw.root}/limit01/limit01E.txt"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message8.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message8.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
	   </t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="mailbox_limit9" type="sanity" bugids="6579">
	<t:objective>
		Verify that an account can continue to send (SendMsgRequest) mails until the quota is reached
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit at 3 times the size of the injected message
		3. Use SendMsgRequest to send the same message 3 times (inject is succesful)
		4. Use SendMsgRequest to send the same message a 4th time (QUOTA_EXCEEDED should occur)
		5. Use zmLmtpInject to send the same message a 4th time (inject is unsuccessful)
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account9.name}</name>
                <password>${account9.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account9.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct9.server"/>
        </t:response>
    </t:test>

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account9.id}</id>
				<a n="zimbraMailQuota">${account9.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
<t:property name="server.zimbraAccount" value="${test_acct9.server}"/>
	<t:test delay="${postfixdelay.msec}">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account9.name}</account>
				<password>${account9.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    
	<t:property name="uploadServletServer" value="${test_acct9.server}"/>
	<t:property name="uploadFile.name" value="${testMailRaw.root}/limit01/limit01E.txt"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message9.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message9.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message9.id"/>
	   </t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message9.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message9.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message9.id"/>
	   </t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message9.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message9.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
			<t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message9.id"/>
	   </t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message9.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message9.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
	   </t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account9.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct9.server}</server>
        </t:lmtpInjectRequest>
        <t:lmtpInjectResponse>
        	<code>452</code>
        </t:lmtpInjectResponse>
    </t:mailinjecttest>
</t:test_case>


<t:test_case testcaseid="mailbox_limit10" type="sanity" bugids="6579">
	<t:objective>
		Verify that an account can delete mails to free up mailbox limit space
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit at 3 times the size of the injected message
		3. Use SendMsgRequest to send the same message 3 times (send is succesful)
		4. Use SendMsgRequest to send the same message a 4th time (QUOTA_EXCEEDED should occur)
		5. Delete a message
		6. Use SendMsgRequest to send the same message (send is succesful)
		
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account10.name}</name>
                <password>${account10.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account10.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct10.server"/>
        </t:response>
    </t:test>


	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account10.id}</id>
				<a n="zimbraMailQuota">${account10.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
<t:property name="server.zimbraAccount" value="${test_acct10.server}"/>
	<t:test delay="${postfixdelay.msec}">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account10.name}</account>
				<password>${account10.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.trash}']" attr="id" set="account10.trash.id"/>
		</t:response>
	</t:test>
    
	<t:property name="uploadServletServer" value="${test_acct10.server}"/>
	<t:property name="uploadFile.name" value="${testMailRaw.root}/limit01/limit01E.txt"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message10.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message10.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message10.id"/>
	   </t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message10.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message10.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message10.id"/>
	   </t:response>
	</t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message10.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message10.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
			<t:select path="//zimbra:Code" match="^mail.QUOTA_EXCEEDED$"/>
	   </t:response>
	</t:test>

    <t:test id = "MsgActionRequest10a">
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${message10.id}" op = "${op.delete}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.delete}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message10.id}"/>
        </t:response>
    </t:test>

	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="empty" id="${account10.trash.id}"/>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action">
            <t:select attr="op" match="empty"/>        
            </t:select>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse/acct:name"/> 
		</t:response>
	</t:test>


	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${uploadFile.name}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message10.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
	  <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
	      <m>
			<e t="t" a="${destination.name}"/>
			<su> ${compose.subject} </su>
			<mp ct="text/plain">
			    <content> ${compose.content} </content>
			</mp>
		    <attach aid="${message10.aid}"/>
	     </m>
	    </SendMsgRequest>
	  </t:request>
	  <t:response>
	         <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message10.id"/>
	   </t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="mailbox_limit11" type="sanity">
	<t:objective>
		Verify that an account can delete mails to free up mailbox limit space (incoming messages)
	</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit at 3 times the size of the injected message
		3. Use zmLmtpInject to send the same message 3 times (send is succesful)
		4. Use zmLmtpInject to send the same message a 4th time (QUOTA_EXCEEDED should occur)
		5. Delete a message
		6. Use zmLmtpInject to send the same message (send is succesful)
		
	</t:steps>
	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account11.name}</name>
                <password>${account11.password}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account11.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct11.server"/>
        </t:response>
    </t:test>

	<t:test >
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account11.id}</id>
				<a n="zimbraMailQuota">${account11.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account11.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct11.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account11.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct11.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account11.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct11.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account11.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct11.server}</server>
        </t:lmtpInjectRequest>
        <t:lmtpInjectResponse>
        	<code>452</code>
        </t:lmtpInjectResponse>
    </t:mailinjecttest>

<t:property name="server.zimbraAccount" value="${test_acct11.server}"/>
	<t:test>
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account11.name}</account>
				<password>${account11.password}</password>
   			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
	
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse/acct:name"/> 
		</t:response>
	</t:test>


	<t:test>
	 <t:request>
	   <SearchRequest xmlns="urn:zimbraMail" types="message">
	   <query>in:inbox</query>
	   </SearchRequest>
	 </t:request>
	  <t:response>
		<t:select path="//mail:SearchResponse/mail:m[1]" attr="id" set="message11.id"/>
		<t:select path="//mail:SearchResponse/mail:m[2]" attr="id" set="message11A.id"/>
	 </t:response>
	</t:test>

    <t:test id = "MsgActionRequest10a">
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${message11.id}" op = "${op.delete}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.delete}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message11.id}"/>
        </t:response>
    </t:test>
    <t:test >
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${message11A.id}" op="${op.delete}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.delete}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message11A.id}"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse/acct:name"/> 
		</t:response>
	</t:test>


    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/limit01/limit01E.txt</filename>
			<to>${account11.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct11.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
     
</t:test_case>


<t:test_case testcaseid="mailbox_limit12" type="sanity">
	<t:objective>
		Verify that contacts/folders can be added to the mailbox, even if his mailbox is over his limit</t:objective>
	<t:steps>
		1. Login as the admin
		2. modify the account to have a limit lower than current usage
		3. Login as the user
		4. Issue CreateContactRequest to add a contact
              5. GetFolderRequest to set folder's id
              6. CreateFolderRequest to create a new folder.
	</t:steps>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test id="admin_login" required="true" depends="ping">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test id="create_test_account1" required="false" depends="admin_login">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account12.name}</name>
				<password>${account12.password}</password>               
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account12.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct12.server"/>
		</t:response>
	</t:test>

	<t:mailinjecttest>
		<t:lmtpInjectRequest>
			<foldername>${testMailRaw.root}/limit01</foldername>
			<to>${account12.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct12.server}</server>
		</t:lmtpInjectRequest>
	</t:mailinjecttest>

	<t:test>
		<t:request>
			<ModifyAccountRequest xmlns="urn:zimbraAdmin">
				<id>${account12.id}</id>
				<a n="zimbraMailQuota">${account12.quota}</a>
			</ModifyAccountRequest>
		</t:request>
		<t:response>
			<t:select path = "//admin:ModifyAccountResponse/admin:account"/>
		</t:response>
	</t:test>
    
<t:property name="server.zimbraAccount" value="${test_acct12.server}"/>
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account12.name}</account>
				<password>${account12.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test >
		<t:request>
			<CreateContactRequest xmlns="urn:zimbraMail">
				<cn>
				<a n="firstName">First.${TIME}.${COUNTER}</a>
				<a n="lastName">Last.${TIME}.${COUNTER}</a>
				<a n="email">email.${TIME}.${COUNTER}@domain.com</a>
				</cn>     
			</CreateContactRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:CreateContactResponse/mail:cn">
			<t:select attr="id" set="contact.id"/>
			</t:select>	
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder" attr="id" match="1"/>
			<t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<CreateFolderRequest xmlns="urn:zimbraMail">
				<folder name="${folder.name}" l="${folder.inbox}"/>
			</CreateFolderRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:CreateFolderResponse"/>
		</t:response>
	</t:test>

</t:test_case>



</t:tests>
