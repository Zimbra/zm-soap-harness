<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="string.long" value="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"/>

<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="account.longname" value="${string.long}@example.com"/>
<t:property name="account.longdname" value="foo@${string.long}.com"/>


<t:property name="root" value="${soapxml.root}/MailClient/Misc/ScriptKiddie/Mime"/>

<t:property name="msg01.subject" value="email01A"/>    
<t:property name="msg01.attachment.name" value="${string.long}.doc"/>    
<t:property name="msg02.subject" value="email01B"/>    
<t:property name="msg03.subject" value="email01C"/>    
<t:property name="msg04.content" value="email01E"/>    


    
<t:test_case testcaseid="Ping" type="always">
    <t:objective>Basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="acctSetup1_script_kiddie" type="always">
    <t:objective>Create test account</t:objective>
    <t:steps>1. Login to admin
             2. Create a test account        
    </t:steps>
    
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    

    <t:test id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

	<t:mailinjecttest>
        <t:lmtpInjectRequest>
            <foldername>${root}</foldername>
            <to>${account1.name}</to>
            <from>${nonZimbraUser.name}</from>
            <server>${test_acct1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    
</t:test_case> 
    
    
<t:test_case testcaseid="script_kiddie01" type="bhr">
    <t:objective>Verify a message a mime message with an attachment whose filename is longer than 256 characters can be injected.</t:objective>
    <t:steps>1. Upload a message              
             2. Search the message        
             3. Get the message
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="script_kiddie01_1a" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${msg01.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id"/>
        </t:response>
    </t:test>

    <t:test depends="script_kiddie01_1a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
            	<t:select path="//mail:m[@id='${msg1.id}']">
            		<t:select path="//mail:mp[@cd='attachment']" attr="filename" match="${msg01.attachment.name}"/>
            	</t:select>
            </t:select>            	
        </t:response>
    </t:test>

</t:test_case>
    

<t:test_case testcaseid="script_kiddie02" type="sanity">
    <t:objective>Verify a message with very long name in "To", "Cc" and "From" field can be received </t:objective>
    <t:steps>1. Upload a message              
             2. Search the message        
             3. Get the message
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="script_kiddie02_2a" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${msg02.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg2.id"/>
        </t:response>
    </t:test>

    <t:test depends="script_kiddie02_2a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg2.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
            	<t:select path="//mail:m[@id='${msg2.id}']">
            		<t:select path="//mail:e[@t='f']" attr="a" match="${account.longname}"/>
            		<t:select path="//mail:e[@t='t']" attr="a" match="${account.longname}"/>
            		<t:select path="//mail:e[@t='c']" attr="a" match="${account.longname}"/>
            	</t:select>
            </t:select>            	
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="script_kiddie03" type="sanity">
    <t:objective>Verify a message with very long domain in "To", "Cc" and "From" field can be received </t:objective>
    <t:steps>1. Upload a message              
             2. Search the message        
             3. Get the message
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="script_kiddie02_2a" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${msg03.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg3.id"/>
        </t:response>
    </t:test>

    <t:test depends="script_kiddie02_2a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg3.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
            	<t:select path="//mail:m[@id='${msg3.id}']">
            		<t:select path="//mail:e[@t='f']" attr="a" match="${account.longdname}"/>
            		<t:select path="//mail:e[@t='t']" attr="a" match="${account.longdname}"/>
            		<t:select path="//mail:e[@t='c']" attr="a" match="${account.longdname}"/>
            	</t:select>
            </t:select>            	
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="script_kiddie04" type="sanity">
    <t:objective>Verify a message with very long name in "To", "Cc" and "Bcc" field can be sent </t:objective>
    <t:steps>1. Send a msg to a user with very long name.
             2. Search the message        
             3. Get the message
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test >
		 <t:request>
			   <SendMsgRequest xmlns="urn:zimbraMail">
				<m>
				  <e t="t" a="${account2.name}"/>
				  <e t="t" a="${account.longname}"/>
				  <e t="c" a="${account.longname}"/>
				  <e t="b" a="${account.longname}"/>
				  <su> ${TIME}${COUNTER} </su>
				  <mp ct="text/plain">
					  <content>content</content>
				  </mp>
				</m>
			   </SendMsgRequest>
		 </t:request>
		 <t:response>
				<t:select path="//mail:SendMsgResponse|//zimbra:Code"/>
		 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="script_kiddie05" type="sanity">
    <t:objective>Verify a message with very long domain name in "To", "Cc" and "Bcc" field can be sent </t:objective>
    <t:steps>1. Send a msg to a user with very long domain name.              
             2. Search the message        
             3. Get the message
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>


	<t:test>
		 <t:request>
			   <SendMsgRequest xmlns="urn:zimbraMail">
				<m>
				  <e t="t" a="${account2.name}"/>
				  <e t="t" a="${account.longdname}"/>
				  <e t="c" a="${account.longdname}"/>
				  <e t="b" a="${account.longdname}"/>
				  <su> ${TIME}${COUNTER} </su>
				  <mp ct="text/plain">
					  <content>content</content>
				  </mp>
				</m>
			   </SendMsgRequest>
		 </t:request>
		 <t:response>
				<t:select path="//mail:SendMsgResponse|//zimbra:Code"/>
		 </t:response>
	</t:test>


</t:test_case>


</t:tests>