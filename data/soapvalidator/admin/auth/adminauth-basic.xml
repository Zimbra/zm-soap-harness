<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="accented.password" value="t�st���"/>

<t:property name="admin.account1.name" value="accented.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="admin.account2.name" value="admin.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="admin.account3.without_domain_name" value="admin.${TIME}.${COUNTER}"/>
<t:property name="admin.account4.without_domain_name" value="admin.${TIME}.${COUNTER}"/>
<t:property name="account.foreignPrincipal" value="test:${TIME}.${COUNTER}"/>
<t:property name="only.name" value="admin"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:test_case testcaseid="Ping" type="always" >
	<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin"/>
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse"/>
			</t:response>
		</t:test>

</t:test_case>


<t:test_case testcaseid="AdminAuth_basic_01" type="bhr">
	<t:objective>Login to the Admin using complete name and valid password</t:objective>

		<t:test required="true" >
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" />
			</t:response>
		</t:test>

</t:test_case>

<t:test_case testcaseid="AdminAuth_basic_02" type="bhr" bugids="2141">
	<t:objective>Login to the Admin using only name and valid password</t:objective>

		<t:test required="true" >
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" />
			</t:response>
		</t:test>

</t:test_case>

<t:test_case testcaseid="AdminAuth_basic_03" type="bhr" bugids="11387">
	<t:objective>Login to the Admin having accented password</t:objective>
	<t:steps>
	1. Login as admin
	2. Create a new admin account with accented characters in the password field
	3. Authenticate as that admin user
	</t:steps>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin.account1.name}</name>
                <password>${accented.password}</password>
                <a n="zimbraIsAdminAccount">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account"/>
        </t:response>
    </t:test>  

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.account1.name}</name>
				<password>${accented.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" />
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="AdminAuth_basic_04" type="bhr" bugids="32581">
	<t:objective> Verify admin AuthRequest support "account by" syntax. Check for "name/id/foriegn principal" </t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="name">${admin.user}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin.account2.name}</name>
                <password>${admin.password}</password>
                <a n="zimbraIsAdminAccount">${globals.true}</a>
				<a n="zimbraForeignPrincipal">${account.foreignPrincipal}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="admin.Id"/>
        </t:response>
    </t:test>  

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="id">${admin.Id}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="foreignPrincipal">${account.foreignPrincipal}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AdminAuth_basic_05" type="bhr" bugids="82139">
	<t:objective> Verify admin AuthRequest support "account by" syntax and without default domain name </t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="name">${admin.user}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin.account3.without_domain_name}@${defaultdomain.name}</name>
                <password>${admin.password}</password>
                <a n="zimbraIsAdminAccount">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="admin.Id"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="name">${admin.account3.without_domain_name}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
        <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${admin.account4.without_domain_name}@${defaultdomain.name}</name>
                <password>${admin.password}</password>
                <a n="zimbraIsDelegatedAdminAccount">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="admin.Id"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
			<account by="name">${admin.account4.without_domain_name}</account>
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="AdminAuth_basic_06" type="sanity">
	<t:objective> check the case when neither "name" or "account" is specified and throw service.AUTH_REQUIRED for that. </t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
            <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.AUTH_REQUIRED"/>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>
