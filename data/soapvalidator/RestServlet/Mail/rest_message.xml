<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.password" value="${defaultpassword.value}"/>

<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.password" value="${defaultpassword.value}"/>
<t:property name="account3.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.password" value="${defaultpassword.value}"/>
<t:property name="account4.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.password" value="${defaultpassword.value}"/>

<t:property name="message1.content" value="content${TIME}.${COUNTER}"/>
<t:property name="message1.subject" value="subject${TIME}.${COUNTER}"/>

<t:property name="root"				value="${soapxml.root}/MailClient/Mail/lmtp/MimeBasic/"/>
<t:property name="message2.file"	value="${root}/lmtp_basic01.txt"/>
<t:property name="message2.subject"	value="subject${TIME}.${COUNTER}"/>


<t:test_case testcaseid="RestServlet_Message_Account_Setup" type="always" >
	<t:objective>setup accounts</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	
	<t:test required="true">
		<t:request>
			<PingRequest xmlns="urn:zimbraAdmin"/>
		</t:request>
		<t:response>
			<t:select path="//admin:PingResponse"/>
		</t:response>
	</t:test>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${account1.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                     <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account2.name}</name>
				<password>${account2.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                     <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account3.name}</name>
				<password>${account3.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
                     <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account4.name}</name>
				<password>${account4.password}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
                     <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct4.server"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a='${account2.name}'/>
					<e t="c" a='${account3.name}'/>
					<e t="b" a='${account4.name}'/>
					<su> ${message1.subject} </su>
					<mp ct="text/plain">
						<content> ${message1.content} </content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a='${account2.name}'/>
					<e t="c" a='${account3.name}'/>
					<e t="b" a='${account4.name}'/>
					<su> ${message1.subject} </su>
					<mp ct="text/plain">
						<content> ${message1.content} </content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="RestServlet_GetMessageByID_01" type="smoke" >
	<t:objective>Basic verification of Rest Servlet - get a message by id</t:objective>
	<t:steps>
	1. Use the rest servlet to download the message contents using the ID
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<id>${message1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="To" match="${account2.name}"/>
			<t:select attr="Cc" match="${account3.name}"/>
			<t:select attr="Bcc" match="${account4.name}"/>
			<t:select attr="Subject" match="${message1.subject}"/>
		</t:restServletResponse>
	</t:resttest>

	<!-- TODO:  Need to verify the content servlet for
				account2, account3, account4, too.
				
				Bcc: should not appear
				What appears for account4?
	 -->

</t:test_case>


<t:test_case testcaseid="RestServlet_GetMessageByID_02" type="smoke" >
	<t:objective>Basic verification of Rest Servlet - get a message (externally sent) by id</t:objective>
	<t:steps>
	1. Inject a message into account1
	2. Login as account1
	3. Use the rest servlet to download the message contents using the ID
	</t:steps>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message2.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
            <modify>
                <header a="To">${account1.name}</header>
                <header a="From">${nonZimbraUser.name}</header>
                <header a="Subject">${message2.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${message2.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="message2.id"/>
		</t:response>
	</t:test>

	<t:property name="server.restServlet" value="${account1.server}"/>

	<t:resttest>
		<t:restServletRequest>
			<id>${message2.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="To" match="${account1.name}"/>
			<t:select attr="From" match="${nonZimbraUser.name}"/>
			<t:select attr="Subject" match="${message2.subject}"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>


<t:test_case testcaseid="RestServlet_GetMessageByID_03" type="smoke" >
	<t:objective>Basic Rest Servlet Test - Verify the http 200 response</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>${message1.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>
			<t:select attr="Message-ID" emptyset="0"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>


<t:test_case testcaseid="RestServlet_GetMessageByID_04" type="smoke" bugids="4003">
	<t:objective>Basic Content Servlet Test - Verify the http response is 404 when an invalid ID is sent</t:objective>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${account1.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:resttest>
		<t:restServletRequest>
			<id>252525</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="404"/>
		</t:restServletResponse>
	</t:resttest>

</t:test_case>



</t:tests>
