<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.user" value="user${TIME}${COUNTER}"/>
<t:property name="account2.user" value="user${TIME}${COUNTER}"/>
<t:property name="account1.name" value="${account1.user}@${defaultdomain.name}"/>
<t:property name="account.password" value="${defaultpassword.value}"/>
<t:property name="account2.name" value="${account2.user}@${defaultdomain.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>


<t:property name="account1.wrongpassword" value="hello123"/>
<t:property name="account1.blankpassword" value=""/>
<t:property name="account1.upperpassword" value="TEST123"/>
    
<t:property name="test_acct1.server" value="NOT_DEFINED"/>    
<t:property name="test_acct2.server" value="NOT_DEFINED"/>    

    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/> 

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
	 <t:request>
	   <PingRequest xmlns="urn:zimbraAdmin"/>
	 </t:request>
	  <t:response>
		<t:select path="//admin:PingResponse"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_auth_expired" type="always">
    <t:objective>Create test accounts</t:objective>
    <t:steps>1. Login to admin account
             2. Create accounts        
    </t:steps>  

	<t:test required="true" >
	     <t:request>
	        <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
	     </t:request>
	     <t:response>
	        <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	     </t:response>
	</t:test>

    <t:test required="true">
	    <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${account.password}</password>                
                <a n="zimbraAuthTokenLifetime">5s</a>
            </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                  <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
	    </t:response>

	</t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${account.password}</password>                
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
<t:property name="authToken" value=""/>



<t:test_case testcaseid="auth_expired1" type="smoke">
    <t:objective>Test that the Authtoken remains valid within the duration set for expiration</t:objective>
    <t:steps>1. Login to account1
             2. Send GetInfoRequest before the authentication has expired.                     
    </t:steps>

	<t:test id="auth_expired1a">
	     <t:request>
	          <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${account.password}</password>	                
	          </AuthRequest>
	     </t:request>
	     <t:response>
		    <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
		    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

	     </t:response>
	</t:test>

    <t:test delay="3000" depends="auth_expired1a">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetInfoResponse/acct:name"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="authToken" value=""/>


<t:test_case testcaseid="auth_expired2" type="bhr">
    <t:objective>Test the authtoken expiration (Next request is sent after expiration duration)</t:objective>
    <t:steps>1. Login to account1
             2. Send search request after the authentication has expired.        
    </t:steps>   

	<t:test id="auth_expired2a">
	     <t:request>
	          <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${account.password}</password>	                
	          </AuthRequest>
	     </t:request>
	     <t:response>
		    <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
		    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

	     </t:response>
	</t:test>   

    <t:test delay="6000" depends="auth_expired2a">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="authToken" value=""/>

    
<t:test_case testcaseid="auth_expired3" type="bhr">
    <t:objective>Test  theauthtoken expiration (Two requests is sent- first before expiration and second after expiration)</t:objective>
    <t:steps>1. Login to account1
             2. Send search request before the authentication has expired.
             3. Send search request after the authentication has expired.
    </t:steps>   

	<t:test id="auth_expired3a">
	     <t:request>
	          <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${account.password}</password>	                
	          </AuthRequest>
	     </t:request>
	     <t:response>
		    <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
		    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

	     </t:response>
	</t:test>

    <t:test delay="3000" depends="auth_expired3a">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetInfoResponse/acct:name"/>
        </t:response>
    </t:test>

    <t:test delay="3000" depends="auth_expired3a">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="authToken" value=""/>

    
<t:test_case testcaseid="auth_expired4" type="sanity">
    <t:objective>Relogin after expiration of authtoken (with previous authtoken)</t:objective>
    <t:steps>1. Login to account
             2. Relogin with old authtoken
    </t:steps>

	<t:test id="auth_expired4a">
	     <t:request>
	          <AuthRequest xmlns="urn:zimbraAccount">
	                <account by="name">${account1.name}</account>
	                <password>${account.password}</password>	                
	          </AuthRequest>
	     </t:request>
	     <t:response>
		    <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
		    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

	     </t:response>
	</t:test>

    <t:test depends="auth_expired4a" delay="6000">
        <t:requestContext>
            <authToken>${authToken}</authToken>

        </t:requestContext>
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>
    
</t:test_case>    

    
<!--
	Not sure what this test case is trying to verify.  Deprecating
-->    
<t:test_case testcaseid="auth_expired5" type="deprecated">
    <t:objective>Relogin without password </t:objective>

    <t:test depends="auth_expired4a">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>


<!--
	Not sure what this test case is trying to verify.  Deprecating
-->    
<t:test_case testcaseid="auth_expired6" type="deprecated">
    <t:objective>Relogin with wrong password </t:objective>

    <t:test depends="auth_expired4a">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.wrongpassword}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>


<!--
	Not sure what this test case is trying to verify.  Deprecating
-->    
<t:test_case testcaseid="auth_expired7" type="deprecated">
    <t:objective>Relogin with right password in upper case</t:objective>

    <t:test depends="auth_expired4a">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.upperpassword}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>
    
    
<!--
	Not sure what this test case is trying to verify.  Deprecating
-->    
<t:test_case testcaseid="auth_expired8" type="deprecated">
    <t:objective>Relogin with blank password</t:objective>

    <t:test depends="auth_expired4a">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.blankpassword}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
    
<!--
	Not sure what this test case is trying to verify.  Deprecating
-->    
<t:test_case testcaseid="auth_expired9" type="deprecated">
    <t:objective>Login to another account with expired authtoken </t:objective>

    <t:test depends="auth_expired4a">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.AUTH_EXPIRED$"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>
