<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain1.name" value="preauth.${TIME}.${COUNTER}.com"/>
<t:property name="domain1.preauthkey" value="7c9d4c4372457f2e9df0a681e31559e691199762171b832ec042861bc9b610ba"/>

<t:property name="account1.name" value="preauth${TIME}${COUNTER}@${domain1.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>

	<t:test required="true">
	 <t:request>
	   <PingRequest xmlns="urn:zimbraAdmin"/>
	 </t:request>
	  <t:response>
		<t:select path="//admin:PingResponse"/>
	 </t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="acct1_setup" type="always" >
 <t:objective>create test account</t:objective>

	<t:test required="true" >
	 <t:request>
	  <AuthRequest xmlns="urn:zimbraAdmin">
	    <name>${admin.user}</name>
	    <password>${admin.password}</password>
	  </AuthRequest>
	 </t:request>
	 <t:response>
	    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	 </t:response>
	</t:test>

    <t:test id="CreateDomainRequest0a">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain1.name}</name>
                <a n="zimbraPreAuthKey">${domain1.preauthkey}</a>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse">
	            <t:select path="//admin:domain" attr="id" set="domain1.id"/>
	            <t:select path="//admin:a[@n='zimbraPreAuthKey']" match="${domain1.preauthkey}"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <a n="zimbraPasswordLockoutDuration">60s</a>
                <a n="zimbraPasswordLockoutEnabled">${globals.true}</a>
                <a n="zimbraPasswordLockoutFailureLifetime">60s</a>
                <a n="zimbraPasswordLockoutMaxFailures">5</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>  

</t:test_case>


<t:test_case testcaseid="PreauthRequest_LockoutPassword_01" type="bhr" bugids="35265" >
	<t:objective>Preauth request - verify account is put into lockout status</t:objective>
	<t:steps>
		1. Create account with lockout settings
		2. Attempt to login with invalid password 5 times.
		3. Attempt to login again with valid password.  Verify lockout status
		4. Wait until lockout period completes
		5. Attempt to login again with valid password -- successful auth.
	</t:steps>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:property name="authToken" value=""/>

	
	<t:property name="account1.timestamp" value="${TIME}"/>
	<t:property name="account1.expires" value="0"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">invalid1</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^account.AUTH_FAILED$"/>
		</t:response>
	</t:test>

	<t:delay sec="3"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">invalid2</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^account.AUTH_FAILED$"/>
		</t:response>
	</t:test>

	<t:delay sec="3"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">invalid3</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^account.AUTH_FAILED$"/>
		</t:response>
	</t:test>

	<t:delay sec="3"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">invalid4</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^account.AUTH_FAILED$"/>
		</t:response>
	</t:test>

	<t:delay sec="3"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">invalid5</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="^account.AUTH_FAILED$"/>
		</t:response>
	</t:test>

	<t:delay sec="3"/>

	<t:property name="account1.timestamp" value="${TIME}"/>
	<t:preauth
		account="${account1.name}"
		by="name"
		timestamp="${account1.timestamp}"
		expires="${account1.expires}"
		key="${domain1.preauthkey}"
		set="account1.preauthkey"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">${account1.preauthkey}</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//zimbra:Code" match="account.AUTH_FAILED"/>
		</t:response>
	</t:test>

	<t:delay sec="90"/>

	<t:property name="account1.timestamp" value="${TIME}"/>
	<t:preauth
		account="${account1.name}"
		by="name"
		timestamp="${account1.timestamp}"
		expires="${account1.expires}"
		key="${domain1.preauthkey}"
		set="account1.preauthkey"/>
	
	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<preauth timestamp="${account1.timestamp}" expires="${account1.expires}">${account1.preauthkey}</preauth>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
		</t:response>
	</t:test>


</t:test_case>



</t:tests>
