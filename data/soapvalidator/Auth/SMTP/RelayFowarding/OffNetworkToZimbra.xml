<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="smtp1${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="smtp2${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="accented.password" value="${defaultpassword.value}ï¿½"/>

<t:property name="message1.file" value="${testMailRaw.root}/email01/Msg01.txt"/>
<t:property name="message1.subject" value="email01A"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

	

<t:test_case testcaseid="smtp_RelayForwarding_AccountSetup" type="always">
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account
            2. Create a account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
       
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${zimbraServer.name}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="mta.server"/>
		</t:response>
    </t:test>
    
    
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
        	
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
     <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${account2.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="account2.mta.server"/>
		</t:response>
    </t:test>
    
        	
	<!-- find the IP address of the zimbra server>
	<t:staftask required="true">
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START COMMAND ifconfig WORKDIR / RETURNSTDOUT RETURNSTDERR WAIT 30000</params>
		</t:request>
		<t:response>
			<t:select file="stdout" regex="(?s).*inet addr:(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b).*" group="1" set="server.ip"/>
		</t:response>
	</t:staftask-->
	
</t:test_case>


<t:finally areas="noncluster">

    <!-- After all tests have run, reset the mynetworks setting to the default -->
    
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMyNetworks"></a>
                <a n="zimbraMtaTlsSecurityLevel">none</a>
                <a n="zimbraMtaSaslAuthEnable">no</a>
                <a n="zimbraMtaTlsAuthOnly">${globals.false}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>
    
   
	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT 600000</params>
		</t:request>
	</t:staftask>

     <t:delay msec="5000" />
    <t:test >
        <t:request>
            <GetAllConfigRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAllConfigResponse"/>
        </t:response>
    </t:test>

	
</t:finally>



<t:test_case testcaseid="smtp_RelayForwarding_Network_01" type="bhr"  areas="smtp, noncluster" >
    <t:objective>Verify zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=TRUE/zimbraMtaTlsAuthOnly=TRUE settings</t:objective>
    <t:steps>
    1. Login as the admin
	2. Set zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=TRUE/zimbraMtaTlsAuthOnly=TRUE 
	3. Restart the MTA (zmmtactl reload)
	4. Send message from offnet to onnet using SMTP with SSL and TLS
    5. Verify message is accepted (2.0.0 ok)
    </t:steps>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMyNetworks">127.0.0.0/8</a>
                <a n="zimbraMtaTlsSecurityLevel">may</a>
                <a n="zimbraMtaSaslAuthEnable">yes</a>
                <a n="zimbraMtaTlsAuthOnly">${globals.true}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT 600000</params>
		</t:request>
	</t:staftask>
 
   <t:delay msec="5000" />
         
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <tls/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   

</t:test_case>

<t:test_case testcaseid="smtp_RelayForwarding_Network_02" type="bhr"  areas="smtp, noncluster" >
    <t:objective>Verify zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=TRUE/zimbraMtaTlsAuthOnly=FALSE settings</t:objective>
    <t:steps>
    1. Login as the admin
	2. Set zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=TRUE/zimbraMtaTlsAuthOnly=FALSE 
	3. Restart the MTA (zmmtactl reload)
	4. Send message from offnet to onnet using SMTP with SSL and TLS
    5. Verify message is accepted (2.0.0 ok)
    </t:steps>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMyNetworks">127.0.0.0/8</a>
                <a n="zimbraMtaTlsSecurityLevel">may</a>
                <a n="zimbraMtaSaslAuthEnable">yes</a>
                <a n="zimbraMtaTlsAuthOnly">${globals.false}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT 600000</params>
		</t:request>
	</t:staftask>

   <t:delay msec="5000" />

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <tls/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   

</t:test_case>

<t:test_case testcaseid="smtp_RelayForwarding_Network_03" type="bhr"  areas="smtp, noncluster" >
    <t:objective>Verify zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=FALSE/zimbraMtaTlsAuthOnly=FALSE settings</t:objective>
    <t:steps>
    1. Login as the admin
	2. Set zimbraMtaTlsSecurityLevel=may/zimbraMtaSaslAuthEnable=FALSE/zimbraMtaTlsAuthOnly=FALSE 
	3. Restart the MTA (zmmtactl reload)
	4. Send message from offnet to onnet using SMTP with SSL and TLS
    5. Verify message is accepted (2.0.0 ok)
    </t:steps>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMyNetworks">127.0.0.0/8</a>
                <a n="zimbraMtaTlsSecurityLevel">may</a>
                <a n="zimbraMtaSaslAuthEnable">no</a>
                <a n="zimbraMtaTlsAuthOnly">${globals.false}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT 600000</params>
		</t:request>
	</t:staftask>

    <t:delay msec="5000" />

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <tls/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   

</t:test_case>

<t:test_case testcaseid="smtp_RelayForwarding_Network_04" type="bhr"  areas="smtp, noncluster" >
    <t:objective>Verify zimbraMtaTlsSecurityLevel=none/zimbraMtaSaslAuthEnable=FALSE/zimbraMtaTlsAuthOnly=FALSE settings</t:objective>
    <t:steps>
    1. Login as the admin
	2. Set zimbraMtaTlsSecurityLevel=none/zimbraMtaSaslAuthEnable=FALSE/zimbraMtaTlsAuthOnly=FALSE 
	3. Restart the MTA (zmmtactl reload)
	4. Send message from offnet to onnet using SMTP with SSL and TLS
    5. Verify message is accepted (2.0.0 ok)
    </t:steps>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMyNetworks">127.0.0.0/8</a>
                <a n="zimbraMtaTlsSecurityLevel">none</a>
                <a n="zimbraMtaSaslAuthEnable">no</a>
                <a n="zimbraMtaTlsAuthOnly">${globals.false}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT 600000</params>
		</t:request>
	</t:staftask>

    <t:delay msec="5000" />

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <tls/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
            <auth/>
            <user>${account2.name}</user>
            <password>${defaultpassword.value}</password>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   
    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <recipient>${account1.name}</recipient>
            <filename>${message1.file}</filename>
        </t:smtpInjectRequest>
        <t:smtpInjectResponse>
        	<t:select match="${smtpServer.response.ok}"/>
        </t:smtpInjectResponse>
    </t:smtpinjecttest>
   

</t:test_case>



</t:tests>


