<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="message.body" value="TestBody${TIME}${COUNTER}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
</t:test_case>


<t:test_case testcaseid="im_acct_setup" type="deprecated" >
    <t:objective>Create test accounts</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraFeatureIMEnabled">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraFeatureIMEnabled">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraFeatureIMEnabled">${globals.true}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="im_roster_01" type="deprecated">
    <t:objective>Send Basic IM Get Roster request</t:objective>
	<t:steps>
		1. Login with user1
		2. Send a IMGetRosterRequest
		3. Check whether self status is shown as ONLINE after logging in.
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	 <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<!-- Establish a session for this account -->
	<t:test required="true">
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <session/>
        </t:requestContext>
        <t:request>
            <NoOpRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:NoOpResponse"/>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMGetRosterRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGetRosterResponse/im:presence" attr="show" match="ONLINE"/>
		</t:response>
	</t:test>


</t:test_case>

<t:test_case testcaseid="im_roster_02" type="deprecated">
    <t:objective>Verify IMGetRosterRequest returns the current presence</t:objective>
	<t:steps>
		1. Login with user1
		2. Set self presence to away
		3. Verify self presense shows away
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:property name="account1.presence" value="AWAY"/>

	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<!-- Establish a session for this account -->
	<t:test required="true">
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <session/>
        </t:requestContext>
        <t:request>
            <NoOpRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:NoOpResponse"/>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMSetPresenceRequest xmlns="urn:zimbraIM">
				<presence show="${account1.presence}"/>
			</IMSetPresenceRequest>
		</t:request>
		<t:response>
            <t:select path="//im:IMSetPresenceResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMGetRosterRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGetRosterResponse">
            	<t:select path="//im:presence" attr="show" match="${account1.presence}"/>
            </t:select>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="im_roster_03" type="deprecated">
    <t:objective>Verify IMGetRosterRequest returns a chat</t:objective>
	<t:steps>
		1. As  account1 send message to account2
		2. Verify that one chat window exists after chat is initiated
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	
	<!-- Establish a session for this account -->
	<t:test required="true">
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <session/>
        </t:requestContext>
        <t:request>
            <NoOpRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:NoOpResponse"/>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMSendMessageRequest xmlns="urn:zimbraIM">
				<message addr="${account2.name}">
					<body> ${message.body} </body>
				</message>
			</IMSendMessageRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSendMessageResponse"/>
			<t:header path="//zimbra:im">
				<t:header path="//zimbra:n" attr="thread" set="account1.chat1.thread"/>
			</t:header>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMGetRosterRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGetRosterResponse">
            	<t:select path="//im:chats[@thread='${account1.chat1.thread}']">
            		<t:select path="//im:pcps">
            			<t:select path="//im:p" attr="addr" match="${account2.name}"/>
            		</t:select>
            	</t:select>
            </t:select>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="im_roster_04" type="deprecated">
    <t:objective>Verify IMGetRosterRequest returns two chats</t:objective>
	<t:steps>
		1. Login with user1
		2. Set presence to away
		3. Send a IMGetRosterRequest, verify presense shows away
	</t:steps>
	
	
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>
	
	<t:test>
		<t:request>
			<IMSendMessageRequest xmlns="urn:zimbraIM">
				<message addr="${account3.name}">
					<body> ${message.body} </body>
				</message>
			</IMSendMessageRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSendMessageResponse"/>
			<t:header path="//zimbra:im">
				<t:header path="//zimbra:n" attr="thread" set="account1.chat2.thread"/>
			</t:header>
		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<IMGetRosterRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGetRosterResponse">
            	<t:select path="//im:chats[@thread='${account1.chat1.thread}']">
            		<t:select path="//im:pcps">
            			<t:select path="//im:p" attr="addr" match="${account2.name}"/>
            		</t:select>
            	</t:select>
            	<t:select path="//im:chats[@thread='${account1.chat2.thread}']">
            		<t:select path="//im:pcps">
            			<t:select path="//im:p" attr="addr" match="${account3.name}"/>
            		</t:select>
            	</t:select>
            </t:select>
		</t:response>
	</t:test>

</t:test_case>

</t:tests>