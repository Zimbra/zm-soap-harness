<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.password" value="test123"/>
<t:property name="account2.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.password" value="test123"/>
<t:property name="account3.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.password" value="test123"/>

<t:property name="account4.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.password" value="test123"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>
<t:property name="acl1.name" value="distlist.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<!-- <t:property name="account2.folder.shared.name" value="share.${TIME}.${COUNTER}"/>  -->
<t:property name="account2.folder.calendar.id" value="calshare.${TIME}"></t:property>
<t:property name="account2.folder.Briefcase.id" value="Briefcaseshare.${TIME}"></t:property>
<t:property name="account2.folder.inbox.id" value="Inboxshare.${TIME}"></t:property>
<t:property name="account3.folder.Task.id" value="Taskshare.${TIME}"></t:property>
<t:property name="account1.folder.document.id" value="act1DocShare.${TIME}"></t:property>

<t:property name="COS.name1" value="cos${TIME}${COUNTER}"/>

<t:property name="op.grant"			value="grant"/>
<t:property name="op.ngrant"		value="!grant"/>

<t:property name="grant.usr"			value="usr"/>
<t:property name="grant.grp"			value="grp"/>
<t:property name="grant.dom"			value="dom"/>
<t:property name="grant.cos"			value="cos"/>
<t:property name="grant.all"			value="all"/>
<t:property name="grant.pub"			value="pub"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="view.conversation"	value="conversation"/>
<t:property name="view.message"			value="message"/>
<t:property name="view.tasks"			value="task"/>
<t:property name="view.contact"			value="contact"/>
<t:property name="view.appointment"		value="appointment"/>


<!--  <t:property name="account2.folder.shared.name" value="share.${TIME}.${COUNTER}"/> -->

<t:property name="account2.Sharedfolder.inbox.name" value="inboxshare.${TIME}.${COUNTER}"/>
<t:property name="account2.Sharedfolder.Briefcase.name" value="briefcaseshare.${TIME}.${COUNTER}"/>
<t:property name="account2.Sharedfolder.Calendar.name" value="calshare.${TIME}.${COUNTER}"/>
<t:property name="account3.Sharedfolder.Task.name" value="task.${TIME}.${COUNTER}"/>
<t:property name="account2.Sharedfolder.Contacts.name" value="contacts.${TIME}.${COUNTER}"/>

<t:test_case testcaseid="acct_setup_bug47673" type="always">
    <t:objective>create test accounts</t:objective>

<!-- Login as the admin to get an auth token -->
   <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

  	<t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraSharingUpdatePublishInterval">100ms</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
        <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test> 
    
    <t:staftask>
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmailboxdctl restart \'" RETURNSTDOUT RETURNSTDERR WAIT 1200000</params>
		</t:request>
	</t:staftask>
	
	<!-- Sleep for 5 minutes to wait for mbox to come up -->
	<t:delay sec="300"/>
	
	
    <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account1.name}</name>
            <password>${account1.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account2" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account2.name}</name>
            <password>${account2.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

 	<t:test  id="create_test_account3" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account3.name}</name>
            <password>${account3.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

 	<!--  Create DistributionList -->
	<t:test>
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin">
                <name>${acl1.name}</name>
                <a n="description">A Distribution List containing 3 users</a>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id" set="acl1.id"/>
        </t:response>
    </t:test>

	<!-- Add all Member to DL -->
    <t:test >
        <t:request>
            <AddDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${acl1.id}</id>
                <dlm>${account3.name}</dlm>
                <dlm>${account2.name}</dlm>
                <dlm>${account1.name}</dlm>                
            </AddDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddDistributionListMemberResponse"/>
        </t:response>
    </t:test>
    
     <t:test id = "CreateCosRequest1a">
        <t:request>
            <CreateCosRequest xmlns="urn:zimbraAdmin">
                <name xmlns="">${COS.name1}</name>        
            </CreateCosRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateCosResponse/admin:cos" attr="name" match="${COS.name1}"/>
            <t:select path="//admin:CreateCosResponse/admin:cos" attr="id" set="Cos.id"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
	        <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="zimbraCOSId">${Cos.id}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>
    
<t:property name="server.zimbraAccount" value="${account2.server}"/>

<t:test id="auth_acct2" required="true" depends="create_test_account2">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
			
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account2.folder.calendar.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account2.folder.Briefcase.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.contacts}']" attr="id" set="account2.folder.contact.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.sent}']" attr="id" set="account2.folder.sent.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.drafts}']" attr="id" set="account2.folder.drafts.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='Junk']" attr="id" set="account2.folder.junk.id"/>		
				
		</t:response>
	</t:test>

</t:test_case> 


<t:finally >

    <!-- After all tests have run, reset the zimbraSharingUpdatePublishInterval setting to the default(15m) -->
    
    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

  	<t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraSharingUpdatePublishInterval">15m</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
        <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test> 
    
    <t:staftask>
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmcontrol restart \'" RETURNSTDOUT RETURNSTDERR WAIT 1200000</params>
		</t:request>
	</t:staftask>
	
	<!-- Sleep for 5 minutes to wait for mbox to come up -->
	<t:delay sec="300"/>
	
	
</t:finally>
  
<t:test_case testcaseid="SharedAllFolderWithMe_01" type="smoke" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account2 shares folders to account1</t:objective>
     <t:steps>
	     1.Login to Account2 
	     2.Account2 shares few folders (Inbox, and Calendar) with Account1  
	     3.Accept 1 accepts Inbox folder (ie. create mountpoint)
	     4.Now check if GetShareInfoRequest gets Inbox  in "Folders shared with me that I have accepted" and Calendar in "Folders that have been shared with me but not yet accepted" if I search with Account2's username 
	   
     </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

	<t:test id="auth_acct2" required="true" depends="create_test_account2">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
			
	
	<!--  Share the Inbox folder with Account1 -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.inbox.id}">
					<grant gt="${grant.usr}" d="${account1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

    <!--  Share the Calendar  folder with Account1 -->
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.calendar.id}">
					<grant gt="${grant.usr}" d="${account1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
        
    
  <t:property name="server.zimbraAccount" value="${account1.server}"/>      
    <!-- Login to Account1 -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	
	<!--  Account1 accepts Inbox and Briefcase from Account2 (Mounting it) -->
    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='USER_ROOT']" attr="id" set="account1.root.id"/>
		</t:response>
	</t:test>
	
    <t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                 <link l="${account1.root.id}" name="${account2.Sharedfolder.inbox.name}" zid="${account2.id}" rid="${account2.folder.inbox.id}" view="${view.message}"/>				
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.inbox.id"/>
        </t:response>
    </t:test>
    
    <t:delay sec="1"/>
        
    <!-- Do GetShareInfoRequest -->    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">            	
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">
              		<!--<t:select path="acct:share" attr="ownerId" match="${account2.id}" /> -->
					<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.inbox.id}" />
					<t:select path="acct:share" attr="folderPath" match="/Calendar" />						
              </t:select>          	
        </t:response>
    </t:test>
        
</t:test_case>

<t:test_case testcaseid="SharedAllFolderWithMe_02" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account shares folder with public</t:objective>
     <t:steps>
	     1.Login to Account2 
	     2.account2 shares contact folder with pub  
	     3.account1 checks GetShareInfoRequest gets folderPath of the shared contacts 
	     4.account1 accepts shared request and mount the shared contacts folder 
		 5 account1 checks that GetShareInfoResponse has moint id of the shared folder  
     </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
	<t:test id="auth_acct2" required="true" depends="create_test_account2">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
		
	<!--  Share the Inbox folder with Account1 -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.contact.id}">
					<grant gt="${grant.pub}"  perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<t:delay sec="1"/>
   
    <!-- Login to Account1 -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	 <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">            	
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">              		
					<t:select path="acct:share" attr="folderPath" match="/Contacts" />									
              </t:select>          	
        </t:response>
    </t:test>
	
    <t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                 <link l="${account1.root.id}" name="${account2.Sharedfolder.Contacts.name}" zid="${account2.id}" rid="${account2.folder.contact.id}" view="${view.contact}"/>				
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.contact.id"/>
        </t:response>
    </t:test>
       
    <t:delay sec="3"/> 
    
    <!-- Do GetShareInfoRequest -->    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">            	
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">              		
					<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.contact.id}" />							
              </t:select>          	
        </t:response>
    </t:test>	
        
</t:test_case>

<t:test_case testcaseid="SharedAllFolderWithMe_03" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account revokes shared permission</t:objective>
     <t:steps>
	     1.Login to Account2     
		 2.Revoke the Inbox permission which was shared with account1.
		 3.Login to account1  
		 4.Check GetShareInfoResponse does not have any more mount id for account2's shared inbox folder
     </t:steps>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
	 <!--  login as account2 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<!-- Revoke the permission of inbox -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.ngrant}" id="${account2.folder.inbox.id}" zid="${account1.id}" />					                
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account1.server}"/>
	
    <!--  Login to account 1  -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/>
    
	<!-- Mounting the calendar folder which was first shared by account2 -->
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='${globals.root}']" attr="id" set="account1.root.id"/>						
		</t:response>
	</t:test> 
	
	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account1.root.id}" name="${account2.Sharedfolder.Calendar.name}" zid="${account2.id}" rid="${account2.folder.calendar.id}" view="${view.appointment}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.calendar.id"/>
        </t:response>
    </t:test>		
	
	<t:delay sec="3"/>
	
	<!-- to check if you are able to see only Briefcase and Calendar ids in GetShareInfoResponse -->
	<t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">            	
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">
              		<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.calendar.id}" /> 
					<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.inbox.id}" emptyset="1"/>					
              </t:select>          	
        </t:response>
    </t:test>	
        
</t:test_case>


<t:test_case testcaseid="SharedAllFolderWithMe_04" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account shares folder with DL</t:objective>
     <t:steps>     
	     1.Login to account3 and share the Task folder with a distribution list (which has account1,2 and 3 as its members)
		 2.Login to account2 and do GetShareInfoRequest to check if the Task folder is visible
		 3.account2 accepts shared request and mount the shared Task folder 
		 4.account2 checks that GetShareInfoResponse has mount-id of the shared folder  
     </t:steps>
     
     <t:property name="server.zimbraAccount" value="${account3.server}"/>

    <!--  Login to account 3 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${account3.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>    
    
    <!--  Share the Task folder with the group "acl1" with view rights to all its members -->
    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='Tasks']" attr="id" set="account3.folder.Task.id"/>						
		</t:response>
	</t:test>
    
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account3.folder.Task.id}">
					<grant gt="${grant.grp}" d="${acl1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <!--  login as account2 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/>
    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">              	   
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">     
               	<t:select path="acct:share" attr="ownerId" match="${account3.id}" />              		
              </t:select>          	
        </t:response>
    </t:test>	
    
	<!-- Get Folder Requests -->
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='USER_ROOT']" attr="id" set="account2.root.id"/>
		</t:response>
	</t:test>
	
		
	<!-- Create Mountpoint for the Task Folder shared by account3 -->
	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
				<link l="${account2.root.id}" name="${account3.Sharedfolder.Task.name}" zid="${account3.id}" rid="${account3.folder.Task.id}" view="${view.tasks}"/>				                
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.Task.id"/>
        </t:response>
    </t:test> 
	
	<t:delay sec="3"/>
	
    <!--  Check if the GetShareInfoResponse also displays the one shared by the group (i.e. the Task folder) -->		
	<t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">            
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">
              		  <t:select path="acct:share" attr="ownerId" match="${account3.id}" />               		  
					  <t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.Task.id}" />               		  
              </t:select>          	
        </t:response>
    </t:test>  
	        
</t:test_case>

<t:test_case testcaseid="SharedAllFolderWithMe_05" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account share folder with DL and revokes permision from a user of that DL</t:objective>
     <t:steps>     
	     1.Login to account2 and share the Task folder with a distribution list (which has account1,2 and 3 as its members)
		 2.Revokes permission from account1
		 3.Login to account1 and check inherited account2's task folder is visible
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <!--  Login to account 2 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>    
    
    <!--  Share the Task folder with the group "acl1" with view rights to all its members -->
    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='Tasks']" attr="id" set="account2.folder.Task.id"/>						
		</t:response>
	</t:test>
    
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.Task.id}">
					<grant gt="${grant.grp}" d="${acl1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
            
	
	<!-- Revoke the permission of task -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.ngrant}" id="${account2.folder.Task.id}" zid="${account1.id}" />					                
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>		
	
	<t:delay sec="3"/>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <!--  login as account1 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">              	   
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse/acct:share[@ownerId='${account2.id}']" attr="folderId" match="${account2.folder.Task.id}">  		
              </t:select>          	
        </t:response>
    </t:test>	
    	        
</t:test_case>


<t:test_case testcaseid="SharedAllFolderWithMe_06" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account shares folder with all</t:objective>
     <t:steps>     
	     1.Login to account2 and share the Briefcase folder with all
		 2.Login to account1 and do GetShareInfoRequest to check if the Briefcase folder is visible
     </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <!--  Login to account 2 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>       
     
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.Briefcase.id}">
					<grant gt="${grant.all}" perm="${rights.manager}" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/>      
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <!--  login as account2 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">              	   
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
            <t:select path='//acct:GetShareInfoResponse/acct:share[@ownerId="${account2.id}"]' attr="folderId" match="${account2.folder.Briefcase.id}" />        
                        	
        </t:response>
    </t:test>	
    	        
</t:test_case>


<t:test_case testcaseid="SharedAllFolderWithMe_07" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account shares folder with a domain</t:objective>
     <t:steps>     
	     1.Login to account2 and share the drafts folder with default domain
		 2.Login to account1 and do GetShareInfoRequest to check if the drafts folder is visible
     </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <!--  Login to account 2 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>       
     
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.drafts.id}">
					<grant gt="${grant.dom}" perm="${rights.manager}" d="${defaultdomain.name}" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/> 
    
    <t:property name="server.zimbraAccount" value="${account1.server}"/>
		 
    <!--  login as account2 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">              	   
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
             <t:select path='//acct:GetShareInfoResponse/acct:share[@ownerId="${account2.id}"]' attr="folderId" match="${account2.folder.drafts.id}" />                                   	
        </t:response>
    </t:test>	
    	        
</t:test_case>

<t:test_case testcaseid="SharedAllFolderWithMe_08" type="bhr" bugids="47673">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses when account shares folder with a cos</t:objective>
     <t:steps>     
	     1.Login to account2 and share the drafts folder with a cos
		 2.Login to account4(belong to that cos) and do GetShareInfoRequest to check if the drafts folder is visible
     </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <!--  Login to account 2 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>       
     
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.drafts.id}">
					<grant gt="${grant.cos}" perm="${rights.manager}" d="${COS.name1}" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
    <t:delay sec="3"/>      
	
	<t:property name="server.zimbraAccount" value="${account4.server}"/>	 
	
    <!--  login as account4 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${account1.password}</password>                
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail">              	   
            </GetFolderRequest>            
        </t:request>
        <t:response>
             <t:select path="//mail:GetFolderResponse" />                                   	
        </t:response>
    </t:test>	
    
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">              	   
            </GetShareInfoRequest>            
        </t:request>
        <t:response>
             <t:select path='//acct:GetShareInfoResponse/acct:share[@ownerId="${account2.id}"]' attr="folderId" match="${account2.folder.drafts.id}" />                                   	
        </t:response>
    </t:test>	
    	        
</t:test_case>
    
</t:tests>
