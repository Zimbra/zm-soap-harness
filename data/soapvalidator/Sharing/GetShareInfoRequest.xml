<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.password" value="test123"/>
<t:property name="account2.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.password" value="test123"/>
<t:property name="account3.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.password" value="test123"/>
<t:property name="account4.name" value="ramtest.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.password" value="test123"/>

<t:property name="validpref.name" value="zimbraPrefSaveToSent"/>
<t:property name="validpref.value" value="TRUE"/>
<t:property name="validpref.value2" value="FALSE"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>
<t:property name="acl1.name" value="distlist.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<!-- <t:property name="account2.folder.shared.name" value="share.${TIME}.${COUNTER}"/>  -->
<t:property name="account2.folder.calendar.id" value="calshare.${TIME}"></t:property>
<t:property name="account2.folder.Briefcase.id" value="Briefcaseshare.${TIME}"></t:property>
<t:property name="account2.folder.inbox.id" value="Inboxshare.${TIME}"></t:property>
<t:property name="account3.folder.Task.id" value="Taskshare.${TIME}"></t:property>
<t:property name="account1.folder.document.id" value="act1DocShare.${TIME}"></t:property>

<t:property name="op.grant" value="grant"/>
<t:property name="op.ngrant" value="!grant"/>
<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>
<t:property name="op.delete" value="delete"/>

<t:property name="grant.usr" value="usr"/>
<t:property name="grant.grp" value="grp"/>
<t:property name="grant.dom" value="dom"/>
<t:property name="grant.cos" value="cos"/>
<t:property name="grant.all" value="all"/>
<t:property name="grant.pub" value="pub"/>
<t:property name="grant.guest" value="guest"/>

<t:property name="rights.none" value=""/>
<t:property name="rights.read" value="r"/>
<t:property name="rights.write" value="w"/>
<t:property name="rights.insert" value="i"/>
<t:property name="rights.delete" value="d"/>
<t:property name="rights.administer" value="a"/>
<t:property name="rights.workflow" value="x"/>
<t:property name="rights.manager" value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="view.conversation" value="conversation"/>
<t:property name="view.message" value="message"/>
<t:property name="view.tasks" value="task"/>
<t:property name="view.contact" value="contact"/>
<t:property name="view.appointment" value="appointment"/>
<t:property name="view.note" value="note"/>
<t:property name="view.document" value="document"/>
<t:property name="view.wiki" value="wiki"/>

<!--  <t:property name="account2.folder.shared.name" value="share.${TIME}.${COUNTER}"/> -->

<t:property name="account2.Sharedfolder.inbox.name" value="inboxshare.${TIME}.${COUNTER}"/>
<t:property name="account2.Sharedfolder.Briefcase.name" value="briefcaseshare.${TIME}.${COUNTER}"/>
<t:property name="account2.Sharedfolder.Calendar.name" value="calshare.${TIME}.${COUNTER}"/>
<t:property name="account3.Sharedfolder.Task.name" value="task.${TIME}.${COUNTER}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
</t:test_case>


<t:test_case testcaseid="acct_setup" type="always">
    <t:objective>create test accounts</t:objective>

<!-- Login as the admin to get an auth token -->
   <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

        <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account1.name}</name>
            <password>${account1.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account2" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account2.name}</name>
            <password>${account2.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

 	<t:test  id="create_test_account3" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account3.name}</name>
            <password>${account3.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

 	<t:test  id="create_test_account4" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account4.name}</name>
            <password>${account4.password}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>

	<!--  Create DistributionList -->
	<t:test>
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin">
                <name>${acl1.name}</name>
                <a n="description">A Distribution List containing 3 users</a>
            </CreateDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDistributionListResponse/admin:dl" attr="id" set="acl1.id"/>
        </t:response>
    </t:test>

	<!-- Add all Member to DL -->
    <t:test >
        <t:request>
            <AddDistributionListMemberRequest xmlns="urn:zimbraAdmin">
                <id>${acl1.id}</id>
                <dlm>${account3.name}</dlm>
                <dlm>${account2.name}</dlm>
                <dlm>${account1.name}</dlm>
            </AddDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddDistributionListMemberResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${account1.server}"/>

<!--  <t:test_case testcaseid="acct_login" type="always" >
    <t:objective>login as test account</t:objective>

    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

</t:test_case> -->


<t:test_case testcaseid="GetShareInfoRequestTests" type="bhr">
    <t:objective>Verify that GetShareInfoRequest receives appropriate responses (default request)</t:objective>
     <t:steps>
     1.Login to Account2
     2.Account2 shares few folders (Inbox, Briefcase and Calendar) with Account1 and Account1 shares his Document folder with Account2
     3.Accept 1 accepts Inbox and Briefcase folder (ie. create mountpoints)
     4.Now check if GetShareInfoRequest gets Inbox and Briefcase in "Folders shared with me that I have accepted" and Calendar in "Folders that have been shared with me but not yet accepted" if I search with Account2's username
     5.Login to account3 and share the Task folder with a distribution list (which has account1,2 and 3 as its members)
	 6.Login to account2 and do GetShareInfoRequest to check if the Task folder is visible when queried for ""
	 7.Check if Document folder has been shared with account 2 listed in "Folders shared by me"
	 8.Revoke the Inbox permission which was shared with account1.
	 9.Login to account1, mount the calendar and check if calendar and Briefcase is visible in "Folders Shared with me" when searched with account2
     </t:steps>

	<t:test id="auth_acct2" required="true" depends="create_test_account2">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>


	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account2.folder.calendar.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account2.folder.Briefcase.id"/>
		</t:response>
	</t:test>

	<!--  Share the Inbox folder with Account1 -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.inbox.id}">
					<grant gt="${grant.usr}" d="${account1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

    <!--  Share the Calendar  folder with Account1 -->
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.calendar.id}">
					<grant gt="${grant.usr}" d="${account1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>



    <!--  Share the Briefcase folder with Account1 -->
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.folder.Briefcase.id}">
					<grant gt="${grant.usr}" d="${account1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>


    <!-- Login to Account1 -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- Share "Documents" with Account2 -->
	<!--  t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='Notebook']" attr="id" set="account1.folder.document.id"/>
		</t:response>
	</t:test>

	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account1.folder.document.id}">
					<grant gt="${grant.usr}" d="${account2.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test-->

	<!--  Account1 accepts Inbox and Briefcase from Account2 (Mounting it) -->
    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='USER_ROOT']" attr="id" set="account1.root.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account1.briefcase.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.calendar.inbox.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                 <link l="${account1.root.id}" name="${account2.Sharedfolder.inbox.name}" zid="${account2.id}" rid="${account2.folder.inbox.id}" view="${view.message}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.inbox.id"/>
        </t:response>
    </t:test>

     <t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
               <link l="${account1.root.id}" name="${account2.Sharedfolder.Briefcase.name}" zid="${account2.id}" rid="${account2.folder.Briefcase.id}" view="${view.document}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.Briefcase.id"/>
        </t:response>
    </t:test>

    <!-- Do GetShareInfoRequest -->
    <t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">
                <grantee type="usr" />
                <owner by="name">${account2.name}</owner>
            </GetShareInfoRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:GetShareInfoResponse">
                <!--<t:select path="acct:share" attr="ownerId" match="${account2.id}" /> -->
                <t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.inbox.id}" />
                <t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.Briefcase.id}" />
                <t:select path="acct:share" attr="folderPath" match="/Calendar" />
            </t:select>
        </t:response>
    </t:test>


    <!--  Login to account 3 -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${account3.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <!--  Share the Task folder with the group "acl1" with view rights to all its members -->
    <t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='Tasks']" attr="id" set="account3.folder.Task.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account3.folder.Task.id}">
					<grant gt="${grant.grp}" d="${acl1.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

	<!-- Login to Admin Account -->
	<t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- GetShareInfo -->
	<t:test >
        <t:request>
        	<GetShareInfoRequest xmlns="urn:zimbraAdmin">
				<grantee id="${acl1.id}"></grantee>
				<owner by="name">${account3.name}</owner>
			</GetShareInfoRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetShareInfoResponse/admin:share" attr="folderId" set="folderId.group.share" />
        </t:response>
    </t:test>

    <!--  login as account2 to check if the share is visible -->
    <t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${account2.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- Get Folder Requests -->
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='USER_ROOT']" attr="id" set="account2.root.id"/>
			<!-- <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.briefcase}']" attr="id" set="account1.briefcase.inbox.id"/>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="account1.calendar.inbox.id"/> -->
		</t:response>
	</t:test>


	<!-- Create Mountpoint for the Task Folder shared by account3 -->
	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
				<link l="${account2.root.id}" name="${account3.Sharedfolder.Task.name}" zid="${account3.id}" rid="${account3.folder.Task.id}" view="${view.tasks}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.Task.id"/>
        </t:response>
    </t:test>


    <!--  Check if the GetShareInfoResponse also displays the one shared by the group (i.e. the Task folder) -->
	<t:test>
	<t:request>
        <GetShareInfoRequest xmlns="urn:zimbraAccount">
 		 <owner by="name">${account3.name}</owner>
  			</GetShareInfoRequest>
  	</t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse/acct:share">

				  <t:select attr="ownerEmail" match="${account3.name}" />
				  <t:select attr="rights" match="${rights.manager}" />
				  <t:select attr="granteeType" match="${grant.grp}" />
				  <t:select attr="folderPath" match="/Tasks" />
				  <t:select attr="granteeName" match="${acl1.name}" />
              </t:select>
       </t:response>
    </t:test>

	<!--  Check if the GetShareInfoResponse also displays the one shared by the user "account1" (i.e. the Notebook folder) -->
	<!--  t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">
            		<grantee type="usr" />
                    <owner by="name">${account1.name}</owner>
            </GetShareInfoRequest>
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">
              		  <t:select path="acct:share" attr="ownerId" match="${account1.id}" />
              </t:select>
        </t:response>
    </t:test-->

	<!-- Revoke the permission of inbox -->
	<t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.ngrant}" id="${account2.folder.inbox.id}" zid="${account1.id}" />
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>

    <!--  Login to account 1  -->
	<t:test id="auth_acct1" required="true" depends="create_test_account1">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<!-- Mounting the calendar folder which was first shared by account2 -->
	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder[@name='${globals.root}']" attr="id" set="account1.root.id"/>
		</t:response>
	</t:test>

	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account1.root.id}" name="${account2.Sharedfolder.Calendar.name}" zid="${account2.id}" rid="${account2.folder.calendar.id}" view="${view.appointment}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.Sharedfolder.calendar.id"/>
        </t:response>
    </t:test>



	<!-- to check if you are able to see only Briefcase and Calendar ids in GetShareInfoResponse -->
	<t:test>
        <t:request>
            <GetShareInfoRequest xmlns="urn:zimbraAccount">
            		<grantee type="usr" />
                    <owner by="name">${account2.name}</owner>
            </GetShareInfoRequest>
        </t:request>
        <t:response>
              <t:select path="//acct:GetShareInfoResponse">
              		<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.calendar.id}" />
					<t:select path="acct:share" attr="mid" match="${account2.Sharedfolder.Briefcase.id}" />
					<!-- <t:select path="acct:share" attr="folderPath" match="/Calendar" />						-->
              </t:select>
        </t:response>
    </t:test>

	<!--
		Also login to alias of account1 and see if he is able to see the same folders
	-->

</t:test_case>

</t:tests>
