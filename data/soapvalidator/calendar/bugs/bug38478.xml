<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="Resource.equipment" value="Equipment"/>
<t:property name="Resource.location" value="Location"/>

<t:property name="calendar.verb2" value="DECLINE"/>	

<t:property name="timezone5" value="(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana"/>

<t:property name="destination.name" value="destination.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="appointment.location" value="Location of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="rights.private"		value="p"/>
<t:property name="rights.managerwp" value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}${rights.private}"></t:property>
<t:property name="view.conversation"	value="conversation"/>
<t:property name="view.message"			value="message"/>
<t:property name="view.contact"			value="contact"/>
<t:property name="view.appointment"		value="appointment"/>
<t:property name="view.note"			value="note"/>

<t:property name="grant.usr"			value="usr"/>
<t:property name="op.grant"			value="grant"/>

<t:property name="account1.name" value="account1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="account2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account3.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="resource1.name" value="resource1.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="CurrentTime" value="${GENTIME}"/>
<t:property name="Time1" value="${ICALTIME(+30m)}"/>
<t:property name="Time2" value="${ICALTIME(+1h)}"/>
<t:property name="Time3" value="${ICALTIME(+1d)}"/>
<t:property name="Time4" value="${ICALTIME(+1d)}"/>

<t:property name="TimeRangeStart" value="${TIME(-1d)}"/>
<t:property name="TimeRangeFinish" value="${TIME(+2d)}"/>

<t:property name="location1.name" value="location1.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account2" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
     <t:test id="create_test_account3" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
			<CreateCalendarResourceRequest xmlns="urn:zimbraAdmin">
				<name>${resource1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraCalResType">${Resource.location}</a>
				<a n="displayName">${resource1.name}</a>
				<a n="zimbraCalResAutoAcceptDecline">FALSE</a>
				<a n="zimbraPrefCalendarForwardInvitesTo">${account1.name}</a>
			</CreateCalendarResourceRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateCalendarResourceResponse/admin:calresource" attr="id" set="resource1.id"/>
            <t:select path='//admin:CreateCalendarResourceResponse/admin:calresource/admin:a[@n="zimbraMailHost"]' set="resource1.server"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="bug38478_1" type="bhr" bugids="38478">
    <t:objective>When a resource is managed by a human, he gets to see details of even private-meetings</t:objective>
    <t:steps>
    1. Create resource res1 and user u1.
	2. res1 configure to forward calendar request to u1.
	3. Create share res1 calendar with u1 with manager right and view private meeting disabled.
	4. Login as u1 > accept share.
	5. Login as user2 > create private meeting select resource res1 with some subject and invitee.
	6. Verify user u1 get meeting request forwarded by res1. Subject of the meeting is (Subject withheld) .
	7. verify mail in user u1 account invitees not displayed in invitation mail.
    </t:steps>
    
    <t:property name="server.zimbraAccount" value="${resource1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${resource1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="resource1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="resource1.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${resource1.folder.calendar}" op="${op.grant}">
                    <grant d="${account1.name}" gt="${grant.usr}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>    

    <t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account1.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${resource1.folder.calendar}" zid="${folder.zid}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="account1.delegated.name"/>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:property name="appointment1.subject" value="Subj${TIME}.${COUNTER}"/>
    <t:property name="appointment1.content" value="content${TIME}.${COUNTER}"/>
    
	<t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <inv  class="PRI" method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment1.subject}" loc="${resource1.name}">
                        <at role="OPT" ptst="NE" rsvp="1" a="${account3.name}"/>
                        <at role="NON" ptst="NE" cutype="RES" rsvp="1" a="${resource1.name}"/>
                        <s d="${Time1}"/>  
                        <e d="${Time2}"/>  
                        <or a="${account2.name}"/>
                    </inv>
                    <e a="${account3.name}" t="t"/>
                    <e a="${resource1.name}" t="t"/>
                    <mp content-type="text/plain">
                        <content>${appointment1.content}</content>
                    </mp>
                    <su>${appointment1.subject}</su>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateAppointmentResponse"/>
        </t:response>
    </t:test>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
      	<t:test depends="sendInviteReplyRequesta">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>(Subject withheld)</query>
            </SearchRequest>
        </t:request>
        <t:response>   
            <t:select path="//mail:SearchResponse/mail:m/mail:inv/mail:comp/mail:at" attr="a" match="${account3.name}" emptyset="1"/>    
        </t:response>
    </t:test>
	
	
</t:test_case>

<t:test_case testcaseid="bug38478_2" type="bhr" bugids="38478">
    <t:objective>When a resource is managed by a human, he gets to see details of even private-meetings</t:objective>
    <t:steps>
   	1. Create resource res1 and user u1.
	2. res1 configure to forward calendar request to u1.
	3. Create share res1 calendar with u1 with manager right and view private meeting enabled.
	4. Login as u1 > accept share.
	5. Login as user2 > create private meeting select resource res1 with some subject and invitee.
	6. Verify user u1 get meeting request forwarded by res1.
    </t:steps>
    
    <t:property name="server.zimbraAccount" value="${resource1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${resource1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder/mail:folder[@name='${globals.calendar}']" attr="id" set="resource1.folder.calendar"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="resource1.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${resource1.folder.calendar}" op="${op.grant}">
                    <grant d="${account1.name}" gt="${grant.usr}" perm="${rights.managerwp}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="zid" set="folder.zid"/>
        </t:response>
    </t:test>    

    <t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="account1.folder.root"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account1.folder.root}" name="Calendar.${TIME}.${COUNTER}" view="appointment" rid="${resource1.folder.calendar}" zid="${folder.zid}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="account1.delegated.name"/>
        </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:property name="appointment1.subject" value="Subj${TIME}.${COUNTER}"/>
    <t:property name="appointment1.content" value="content${TIME}.${COUNTER}"/>
    
	<t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <inv  class="PRI" method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment1.subject}" loc="${resource1.name}">
                        <at role="OPT" ptst="NE" rsvp="1" a="${account3.name}"/>
                        <at role="NON" ptst="NE" cutype="RES" rsvp="1" a="${resource1.name}"/>
                        <s d="${Time1}"/>  
                        <e d="${Time2}"/>  
                        <or a="${account2.name}"/>
                    </inv>
                    <e a="${account3.name}" t="t"/>
                    <e a="${resource1.name}" t="t"/>
                    <mp content-type="text/plain">
                        <content>${appointment1.content}</content>
                    </mp>
                    <su>${appointment1.subject}</su>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:CreateAppointmentResponse"/>
        </t:response>
    </t:test>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
      	<t:test depends="sendInviteReplyRequesta">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>${appointment1.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m/mail:inv/mail:comp/mail:at" attr="a" match="${account3.name}"/>    
        </t:response>
    </t:test>
	
	
</t:test_case>

</t:tests>
