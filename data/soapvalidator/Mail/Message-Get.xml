<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>

<t:property name="message.spchar" value="//\\'^%"/>
<t:property name="message.space" value="           "/>
<t:property name="message.blank" value=""/>
<t:property name="message.sometext" value="some text"/>
<t:property name="message.number" value="123"/>
<t:property name="message.negative" value="-2"/>

<t:property name="tag.color" value="2"/>
<t:property name="tag1.name" value="tag${TIME}${COUNTER}"/>

<t:property name="message.subject1" value="Subject${TIME}.${COUNTER}"/>
<t:property name="message.content1" value="content of the message${TIME}.${COUNTER}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_get_message" type="always">
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account, 2. Create a mail account </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    <t:test id="create_test_account1"  required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>
                <!--
                <a n="zimbraMailHost">${LOCALHOST}</a> 
                <a n="zimbraMailStatus">enabled</a>
                <a n="zimbraPasswordMinAge">7</a>
                 Commenting out the optional attributes and sending the request with minimal requirement
                  -->
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

    <t:test id="auth" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="test_account1.inboxFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="test_account1.trashFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="test_account1.sentFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="test_account1.spamFolder.id"/> 
            <t:select path="//mail:folder[@name='${globals.drafts}']" attr="id" set="test_account1.draftsFolder.id"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest1" type="bhr">
    <t:objective>To get a mail with valid message id</t:objective>
    <t:steps>
        1. Send a mail and set the message id.
        2. Get the mail with this message id.
    </t:steps>

    <t:test id="MsgGetRequest1a" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1} </su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>
    <t:test id="MsgGetRequest1b" depends="MsgGetRequest1a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id1}" read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest2" type="functional" bugids="1797">
    <t:objective> Get message with valid message id with leading spaces </t:objective>
    
    <t:test id="MsgGetRequest2">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="        ${message.id1}" read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest3" type="functional" bugids="1797">
    <t:objective> Get message with valid message id with trailing spaces </t:objective>
    <t:test id="MsgGetRequest3">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id1}        " read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest4" type="functional" bugids="1797">
    <t:objective> Get message with valid message id with leading and trailing spaces </t:objective>
        <t:test id="MsgGetRequest4">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="       ${message.id1}        " read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest5" type="functional" >
    <t:objective> Get message with blank message id </t:objective>
    
    <t:test id="MsgGetRequest5">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="" read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
           <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest6" type="functional" >
    <t:objective> Get message with all spaces in message id </t:objective>
    
    <t:test id="MsgGetRequest6">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.space}" read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest7" type="functional" bugids="3843" >
    <t:objective> Get message with special character in message id </t:objective>
        
    <t:test id="MsgGetRequest7">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.spchar}" read="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest8" type="sanity">
    <t:objective> Get message with valid message id and read attribute and html attribute = 0 </t:objective>
    
    <t:test id="MsgGetRequest8">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id1}" read="0" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest9" type="functional">
    <t:objective> GetMsgRequest without specifying id </t:objective>
    
    <t:test id="MsgGetRequest9">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m  read="1" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest10" type="functional">
    <t:objective> Get message with non existing message id </t:objective>
    <t:steps> 
        1. Delete an existing message 
        2. Get message request with non existing (deleted) message id 
    </t:steps>

    <t:test id="MsgGetRequest10a" depends="MsgGetRequest1a">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message.id1}" op="delete"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="delete"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message.id1}"/>
        </t:response>
    </t:test>

    <t:test id="MsgGetRequest10b" depends="MsgGetRequest10a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m  id="${message.id1}" read="1" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_MSG$"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="MsgGetRequest11" type="functional">
    <t:objective> Get message with valid id and invalid read attribute (alpha/number/spchar/negative/blank) </t:objective>

    <t:test id="MsgGetRequest11a" >
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1} </su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id11"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="${message.sometext}" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="${message.number}" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="${message.spchar}" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="${message.negative}" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="${message.blank}" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest12" type="functional">
    <t:objective> Get message with valid id and invalid html attribute (alpha/number/spchar/negative/blank) </t:objective>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="0" html="${message.sometext}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="0" html="${message.number}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="0" html="${message.spchar}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="0" html="${message.negative}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

    <t:test depends="MsgGetRequest11a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id11}" read="0" html="${message.blank}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest13" type="sanity">
    <t:objective> GetMsgRequest for message which is tagged </t:objective>
    <t:steps> 1. Send a message
              2. Create a Tag
              3. Tag a message
              4. GetMsgRequest for tagged mail
    </t:steps>

    <t:test id="MsgGetRequest13a">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1} </su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id13"/>
        </t:response>
    </t:test>

    <t:test id="MsgGetRequest13b">
        <t:request>
            <CreateTagRequest xmlns="urn:zimbraMail">
                <tag name="${tag1.name}" color="${tag.color}"/>
            </CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag.id1">
            <t:select attr="name" set="tag1.name"/>
            <t:select attr="color" match="${tag.color}"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test id="MsgGetRequest13c" depends="MsgGetRequest13a,MsgGetRequest13b">
        <t:request>
            <MsgActionRequest  xmlns="urn:zimbraMail">
                <action id="${message.id13}" op="tag" tag="${tag.id1}"/>
            </MsgActionRequest >
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "tag"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message.id13}"/>
        </t:response>
    </t:test>
 
   <t:test depends="MsgGetRequest13c">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id13}" read="0" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id13}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest14" type="sanity">
    <t:objective> GetMsgRequest for message which is flagged </t:objective>
    <t:steps> 1. Send a message
              2. Flag a mail
              3. GetMsgRequest for flagged mail
    </t:steps>
    
    <t:test id="MsgGetRequest14a">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1} </su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id14"/>
        </t:response>
    </t:test>

    <t:test id="MsgGetRequest14b" depends="MsgGetRequest14a">
        <t:request>
            <MsgActionRequest  xmlns="urn:zimbraMail">
                <action id="${message.id14}" op="flag"/>
            </MsgActionRequest >
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "flag"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${message.id14}"/>
        </t:response>
    </t:test>
  
    <t:test id="MsgGetRequest14c" depends="MsgGetRequest14b">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id14}" read="0" html="0"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id14}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgGetRequest15" type="sanity" bugids="13436">
    <t:objective> TC to verify GetMsgRequest can access specific headers </t:objective>

   <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id14}">
				<header n="From" />
				<header n="To" />
				<header n="Cc" />
				</m>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id14}"/>
            <t:select path='//mail:GetMsgResponse/mail:m/mail:header[@n="To"]' match="${test_account1.name}"/>
            <t:select path='//mail:GetMsgResponse/mail:m//mail:header[@n="From"]' emptyset="0"/>
			<!-- Not sure if message doesn't have Cc field what should be return (header CC should be absent or header should be return with value as blank)
            <t:select path='//mail:GetMsgResponse/mail:m://mail:header[@n="From"]' attr="Cc" emptyset="0"/-->
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MsgGetRequest15" type="bhr" bugids="3470">
    <t:objective>Verify the "max" attribute for GetMsgRequest truncates the message body (basic)</t:objective>

    <!-- Add a mail to the inbox-->
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${test_account1.inboxFolder.id}">
                    <content>To: foo@example.com
From:bar@example.com
Subject: testing when you have an invalid skin - another upgrade test
Date: Mon, 22 Oct 2007 16:36:44 -0700 (PDT)
MIME-Version: 1.0
Content-Type: text/plain


The last two weeks have been tough for the No. 18 Cal football team. After sitting at No. 2 for a week, back-to-back losses have caused the Bears to plummet out of the top 10.

Cal will even be an underdog for the first time Saturday when it travels to Sun Devil Stadium to play No. 7 Arizona State at 7 p.m.

But even against the No. 4 team in the BCS, the Bears' goals have not changed one bit. 

"Even though you say, all the pressure should be on Arizona State because they're highly ranked and all that kind of stuff, there's still always the expectation to win for us," Cal coach Jeff Tedford said.


                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" max="10"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
				<t:select path="//mail:mp[@ct='text/plain']" attr="truncated" match="1"/>
				<t:select path="//mail:content" match="(?s).*The.*"/>
				<t:select path="//mail:content" match="(?s)After.*" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MsgGetRequest16" type="bhr">
    <t:objective>Verify if max is set to larger than the message size, the complete body is returned (text)</t:objective>

    <!-- Add a mail to the inbox-->
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${test_account1.inboxFolder.id}">
                    <content>To: foo@example.com
From: bar@example.com
Subject: testing when you have an invalid skin - another upgrade test
Date: Mon, 22 Oct 2007 16:36:44 -0700 (PDT)
MIME-Version: 1.0
Content-Type: text/plain


The last two weeks have been tough for the No. 18 Cal football team. After sitting at No. 2 for a week, back-to-back losses have caused the Bears to plummet out of the top 10.

Cal will even be an underdog for the first time Saturday when it travels to Sun Devil Stadium to play No. 7 Arizona State at 7 p.m.

But even against the No. 4 team in the BCS, the Bears' goals have not changed one bit. 

"Even though you say, all the pressure should be on Arizona State because they're highly ranked and all that kind of stuff, there's still always the expectation to win for us," Cal coach Jeff Tedford said.


                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" max="1000"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
				<t:select path="//mail:mp[@ct='text/plain']" attr="truncated" match="1" emptyset="1"/>
				<t:select path="//mail:content" match="(?s).*Cal coach Jeff Tedford said\..*"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MsgGetRequest17" type="bhr">
    <t:objective>Verify that max will truncate the message body (html)</t:objective>

    <!-- Add a mail to the inbox-->
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${test_account1.inboxFolder.id}">
                    <content>Date: Fri, 26 Oct 2007 16:19:02 -0700 (PDT)
From: foo@example.com
To: bar@example.com
Subject: the fourth quarter has belonged to anyone but Cal
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_233_76654086.1193440742742"
X-Originating-IP: [10.10.131.107]

------=_Part_233_76654086.1193440742742
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

As soon as the whistle sounds at the end of the third quarter, Cal fans lift up four fingers and chant "Fourth Quarter's Ours!" And with an offense that scores 35.1 points per game, why shouldn't it be? The Bears have outscored opponents 70-55 in the final stanza this season, including out-scoring No. 5 Oregon 21-7 in Eugene, Ore. 

But lately, the fourth quarter has belonged to anyone but Cal. In the Bears' back-to-back losses, they have been outscored down the stretch 21-14. Take away its last win over the Ducks, and Cal has been outscored 31-21 during the fourth quarter in Pac-10 play. 

For the third-highest scoring team in the conference, a team with some of the fastest receivers in the nation and a stable full of top-tier running backs, there is no reason that the Bears should be taking their feet off the gas when the points matter most. 




------=_Part_233_76654086.1193440742742
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

&lt;html&gt;&lt;head&gt;&lt;style type='text/css'&gt;body
 { font-family: 'Arial'; font-size: 10pt; color: #000000}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;As soon
 as the whistle sounds at the end of the third quarter, Cal
fans lift up four fingers and chant "Fourth Quarter's Ours!" And with
an offense that scores 35.1 points per game, why shouldn't it be? The
Bears have outscored opponents 70-55 in the final stanza this season,
including out-scoring No. 5 Oregon 21-7 in Eugene, Ore. &lt;p&gt;But lately, the fourth quarter has belonged
 to anyone but Cal.
In the Bears' back-to-back losses, they have been outscored down the
stretch 21-14. Take away its last win over the Ducks, and Cal has been
outscored 31-21 during the fourth quarter in Pac-10 play. &lt;/p&gt;&lt;p&gt;For the third-highest scoring
 team in the conference, a team
with some of the fastest receivers in the nation and a stable full of
top-tier running backs, there is no reason that the Bears should be
taking their feet off the gas when the points matter most. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
------=_Part_233_76654086.1193440742742--


					</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" html="1" max="10"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
				<t:select path="//mail:mp[@ct='text/html']" attr="truncated" match="1"/>
				<t:select path="//mail:content" match="(?s).*html.*"/>
				<t:select path="//mail:content" match="(?s).*As.*" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MsgGetRequest18" type="bhr">
    <t:objective>Verify if max is set to larger than the message size, the complete body is returned (text)</t:objective>

    <!-- Add a mail to the inbox-->
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${test_account1.inboxFolder.id}">
                    <content>Date: Fri, 26 Oct 2007 16:19:02 -0700 (PDT)
From: foo@example.com
To: bar@example.com
Subject: the fourth quarter has belonged to anyone but Cal
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_233_76654086.1193440742742"
X-Originating-IP: [10.10.131.107]

------=_Part_233_76654086.1193440742742
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

As soon as the whistle sounds at the end of the third quarter, Cal fans lift up four fingers and chant "Fourth Quarter's Ours!" And with an offense that scores 35.1 points per game, why shouldn't it be? The Bears have outscored opponents 70-55 in the final stanza this season, including out-scoring No. 5 Oregon 21-7 in Eugene, Ore. 

But lately, the fourth quarter has belonged to anyone but Cal. In the Bears' back-to-back losses, they have been outscored down the stretch 21-14. Take away its last win over the Ducks, and Cal has been outscored 31-21 during the fourth quarter in Pac-10 play. 

For the third-highest scoring team in the conference, a team with some of the fastest receivers in the nation and a stable full of top-tier running backs, there is no reason that the Bears should be taking their feet off the gas when the points matter most. 




------=_Part_233_76654086.1193440742742
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

&lt;html&gt;&lt;head&gt;&lt;style type='text/css'&gt;body
 { font-family: 'Arial'; font-size: 10pt; color: #000000}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;As soon
 as the whistle sounds at the end of the third quarter, Cal
fans lift up four fingers and chant "Fourth Quarter's Ours!" And with
an offense that scores 35.1 points per game, why shouldn't it be? The
Bears have outscored opponents 70-55 in the final stanza this season,
including out-scoring No. 5 Oregon 21-7 in Eugene, Ore. &lt;p&gt;But lately, the fourth quarter has belonged
 to anyone but Cal.
In the Bears' back-to-back losses, they have been outscored down the
stretch 21-14. Take away its last win over the Ducks, and Cal has been
outscored 31-21 during the fourth quarter in Pac-10 play. &lt;/p&gt;&lt;p&gt;For the third-highest scoring
 team in the conference, a team
with some of the fastest receivers in the nation and a stable full of
top-tier running backs, there is no reason that the Bears should be
taking their feet off the gas when the points matter most. &lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
------=_Part_233_76654086.1193440742742--


                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

   <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}" max="2000"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
				<t:select path="//mail:mp[@ct='text/html']" attr="truncated" match="1" emptyset="1"/>
				<t:select path="//mail:content" match="(?s).*when the points matter most\..*"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MsgGetRequest19" type="sanity" bugids="3470">
    <t:objective>Helper test to import all messages associated with bug 3470</t:objective>

	<t:property name="message.folder" value="${testMailRaw.root}/bugs/3470/"/>
	<t:property name="message1.path" value="${message.folder}/10523a.txt"/>
	<t:property name="message2.path" value="${message.folder}/10523b.txt"/>
	<t:property name="message3.path" value="${message.folder}/10921.txt"/>
	<t:property name="message4.path" value="${message.folder}/21037.txt"/>
	<t:property name="message5.path" value="${message.folder}/8513.txt"/>

	<t:property name="uploadServletServer" value="${test_acct.server}"/>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message1.path}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m  l="${test_account1.inboxFolder.id}" aid="${message1.aid}"/>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse"/>
        </t:response>
    </t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message2.path}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message2.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m  l="${test_account1.inboxFolder.id}" aid="${message2.aid}"/>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse"/>
        </t:response>
    </t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message3.path}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message3.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m  l="${test_account1.inboxFolder.id}" aid="${message3.aid}"/>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse"/>
        </t:response>
    </t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message4.path}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message4.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m  l="${test_account1.inboxFolder.id}" aid="${message4.aid}"/>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse"/>
        </t:response>
    </t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message5.path}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message5.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m  l="${test_account1.inboxFolder.id}" aid="${message5.aid}"/>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse"/>
        </t:response>
    </t:test>


</t:test_case>




<t:test_case testcaseid="MsgGetRequest20" type="sanity" bugids="32271">
    <t:objective>Verify stringindexoutofbounds error for bug 32271</t:objective>


    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${testMailRaw.root}/bugs/32271/mime.txt</filename>
			<to>${test_account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:property name="server.zimbraAccount" value="${test_acct.server}"/>
    
    <t:test id="auth" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test>
	 <t:request>
	   <SearchRequest xmlns="urn:zimbraMail" types="message">
	   <query>subject:(email01A)</query>
	   </SearchRequest>
	 </t:request>
	  <t:response>
		<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg01.id"/>
	 </t:response>
	</t:test>

    <t:test id="MsgGetRequest1b" depends="MsgGetRequest1a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg01.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:property name="msg01.file" value="${testMailRaw.root}/bug53779/msg-01.txt"/>
<t:property name="msg01.subject" value="msg01.subject"/>
<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

<t:test_case testcaseid="Bug #53779" type="sanity" bugids="53779">
    <t:objective>Inject a particular mime message for P4 messages using LMTP and verify the fragment part</t:objective>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct.server}</server>
            <modify>
                <header a="To">${test_account1.name}</header>
                <header a="From">${nonZimbraUser.name}</header>
                <header a="Subject">${msg01.subject}</header>
            </modify>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
    
    <t:test >
        <t:request>
            <AuthRequest xmlns = "urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<t:test>
		 <t:request>
		   <SearchRequest xmlns="urn:zimbraMail" types="message">
		   <query>subject:(${msg01.subject})</query>
		   </SearchRequest>
		 </t:request>
		  <t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg01.id"/>
		 </t:response>
	</t:test>
	
	<t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg01.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m/mail:fr" match=".* Affected files....*">            	
            </t:select>
        </t:response>
	</t:test>
	
</t:test_case>

</t:tests>


