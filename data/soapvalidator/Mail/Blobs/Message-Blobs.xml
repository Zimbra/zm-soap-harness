<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="account1.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="account2.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account3.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="account3.${TIME}${COUNTER}@${defaultdomain.name}"/>





<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Message_Blobs_AccountSetup" type="always">
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account, 2. Create a mail account </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${zimbraServer.name}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="mta.server"/>
		</t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <GetConfigRequest xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMaxMessageSize"/>
            </GetConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetConfigResponse">
            	<t:select path="//admin:a[@n='zimbraMtaMaxMessageSize']" set="zimbraMtaMaxMessageSize.original"/>
        	</t:select>
        </t:response>
    </t:test>
        
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>
    
   <t:test required="true">
        <t:request>
            <GetConfigRequest xmlns="urn:zimbraAdmin">
                <a n="zimbraMilterServerEnabled"/>
            </GetConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetConfigResponse">
            </t:select>
        </t:response>
    </t:test>
    
    <t:staftask>
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmcontrol restart \'" RETURNSTDOUT RETURNSTDERR WAIT 1200000</params>
		</t:request>
	</t:staftask>
	
	<!-- Sleep for 5 minutes to wait for mbox to come up -->
	<t:delay sec="300"/>
	

</t:test_case>


<t:test_case testcaseid="MessageBlobs_01" type="bhr">
    <t:objective>Verify that a message sent to 2 accounts can be viewed by both after one account deletes the message</t:objective>
    
	<t:property name="message1.subject" value="subject${TIME}${COUNTER}"/>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account1.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account2.name}"/>
					<e t="t" a="${account3.name}"/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>Antique store owners in lower Manhattan, ticket vendors at India's Taj Mahal and Brazilian business executives heading to China all have one thing in common these days: They don't want U.S. dollars.</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account2.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="delete"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse"/> 
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account3.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <GetMsgRequest xmlns="urn:zimbraMail" >
	            <m id="${message1.id}" fetch="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/> 
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="MessageBlobs_02" type="bhr" areas="noncluster">
    <t:objective>Verify that a message sent to 3 accounts can be viewed by both after one account deletes the message</t:objective>
    
	<t:property name="message1.subject" value="subject${TIME}${COUNTER}"/>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account1.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account2.name}"/>
					<e t="t" a="${account3.name}"/>
					<e t="t" a="${account4.name}"/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>Antique store owners in lower Manhattan, ticket vendors at India's Taj Mahal and Brazilian business executives heading to China all have one thing in common these days: They don't want U.S. dollars.</content>
					</mp>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account2.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="delete"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse"/> 
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account3.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="delete"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse"/> 
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account4.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <GetMsgRequest xmlns="urn:zimbraMail" >
	            <m id="${message1.id}" fetch="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/> 
        </t:response>
    </t:test>

</t:test_case>



<!--
	The next test case ups the mta message size to 4 GB.
	After all the tests run, make sure to set it back to the original amount.
-->
<t:finally areas="noncluster">

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMaxMessageSize">${zimbraMtaMaxMessageSize.original}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmtactl}</params>
		</t:request>
	</t:staftask>

    <t:test>
        <t:request>
            <GetConfigRequest xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMaxMessageSize"/>
            </GetConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetConfigResponse"/>
        </t:response>
    </t:test>
        
	
</t:finally>


<t:test_case testcaseid="MessageBlobs_03" type="bhr" bugids="25484" areas="noncluster">
    <t:objective>Verify that a message sent to 2 accounts can be viewed by both after one account deletes the message (large file)</t:objective>
    <t:steps>
    1. Login as admin.  Set max mta size to 3 GB
    2. Login as account1.  Send a large message to account2 and account3
    3. Login as account2.  Delete the received message
    4. Login as account3.  View the received message
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	<t:property name="MessageSize.4GB" value="4096000"/>
	<t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
                <a n="zimbraMtaMaxMessageSize">${MessageSize.4GB}</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmtactl reload\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmtactl}</params>
		</t:request>
	</t:staftask>

	<t:test required="true">
        <t:request>
            <GetConfigRequest xmlns="urn:zimbraAdmin">
                <a n="zimbraMilterServerEnabled"/>
            </GetConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetConfigResponse">
            </t:select>
        </t:response>
    </t:test>
    
    <t:staftask>
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmcontrol status \'" RETURNSTDOUT RETURNSTDERR WAIT 1200000</params>
		</t:request>
	</t:staftask>
	
	<t:staftask>
		<t:request>
			<server>${zimbraServer.name}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmmilterctl status \'" RETURNSTDOUT RETURNSTDERR WAIT 1200000</params>
		</t:request>
	</t:staftask>
	
	<t:property name="message1.file" value="${testMailRaw.root}/email07/email07E.txt"/>
	<t:property name="message1.subject" value="subject${TIME}${COUNTER}"/>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	<t:property name="uploadServletServer" value="${account1.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account1.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:uploadservlettest>
		<t:uploadServletRequest>
			<filename>${message1.file}</filename>
		</t:uploadServletRequest>
		<t:uploadServletResponse>
			<t:select attr="id" set="message1.aid"/>
		</t:uploadServletResponse>
	</t:uploadservlettest>

	<t:test >
		<t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m>
					<e t="t" a="${account2.name}"/>
					<e t="t" a="${account3.name}"/>
					<su>${message1.subject}</su>
					<mp ct="text/plain">
						<content>In this case, we're getting an Rpc exception.  If it's an ssl error, or a 
winhttp connection, invalid url, login failure, or secure failure, we'll go 
into offline mode and put up the error message.
</content>
					</mp>
					<attach aid="${message1.aid}"/>
				</m>
			</SendMsgRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SendMsgResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account2.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="delete"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse"/> 
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
	
    <t:test required="true">
        <t:request>
	        <AuthRequest xmlns="urn:zimbraAccount">
	            <account by="name">${account3.name}</account>
	            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <SearchRequest xmlns="urn:zimbraMail" types="message">
	            <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message1.id"/>
            </t:select> 
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
	        <GetMsgRequest xmlns="urn:zimbraMail" >
	            <m id="${message1.id}" fetch="1" html="1"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse"/> 
        </t:response>
    </t:test>

</t:test_case>




</t:tests>


