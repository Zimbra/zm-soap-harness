<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>

<t:property name="conv.spchar" value="//\\'^%"/>
<t:property name="conv.space" value="           "/>
<t:property name="conv.blank" value=""/>
<t:property name="conv.sometext" value="some text"/>

<t:property name="folder.inbox" value="2"/>
<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>
<t:property name="op.delete" value="delete"/>
<t:property name="op.spam" value="spam"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>


<t:property name="message.subject1" value="Subject${TIME}.${COUNTER}"/>
<t:property name="message.content1" value="content of the message${TIME}.${COUNTER}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create two test account</t:objective>
    <steps> 1. Login to admin account, 2. Create a test_account1 3. Create test_account2 </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>
                <!-- 
                <a n="zimbraMailHost">${LOCALHOST}</a> 
                <a n="zimbraMailStatus">enabled</a>
                <a n="zimbraMailDeliveryAddress">${test_account1.name}</a> 
                <a n="zimbraPasswordMinAge">7</a>
                 Commenting out the optional attributes and sending the request with minimal requirement
                 -->
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>
</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

<t:test_case testcaseid="acct_setup2" type="always" >
    <t:objective>login as the test account</t:objective>
    <t:steps> 
        1. Login to test_account1 
        2. Send a mail to test_account1        
    </t:steps>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    <t:test id="sendmail1" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>
	<t:test id="sendmail2" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message.id1}" rt="w">
                    <e t="t" a='${test_account1.name}'/>
                    <su> Fwd: ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> $ Forwarded content : {message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>

    <t:test id="searchConv">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv.id1"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest1" type="smoke">
    <t:objective>Mark it as read </t:objective>
    
    <t:test id="ConvActionRequest1">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.read}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest2" type="smoke">
    <t:objective>Mark a conversation as unread </t:objective>
    
    <t:test id="ConvActionRequest2">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest3" type="bhr">
    <t:objective>Mark a conversation as flagged</t:objective>
    
    <t:test id="ConvActionRequest3">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.flag}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.flag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest4" type="bhr">
    <t:objective>Mark a conversation as unflagged</t:objective>
    
    <t:test id="ConvActionRequest4">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.unflag}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unflag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
         </t:response>
</t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest5" type="bhr">
 <t:objective>Tag a conversation </t:objective>
    <t:steps>
        1. Create a TAG
        2. Tag a Mail
    </t:steps>

    <t:test id="ConvActionRequest5a">
        <t:request>
            <CreateTagRequest xmlns="urn:zimbraMail">
                <tag name="tag${TIME}${COUNTER}" color="0"/>
            </CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag.id1"/>
        </t:response>
    </t:test>
    <t:test id="ConvActionRequest5b" depends="ConvActionRequest5a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.tag}" tag="${tag.id1}"/>
            </ConvActionRequest>        
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.tag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest6" type="bhr">
    <t:objective>Untag a conversation</t:objective>

    <t:test id="ConvActionRequest6" depends="ConvActionRequest5a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.untag}" tag="${tag.id1}"/>
            </ConvActionRequest>

        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.untag}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest7" type="functional">
    <t:objective>Tag a conversation with invalid tagid. </t:objective>
    <t:steps>
        1. Delete the previously created tag
        2. Tag a Mail
    </t:steps>

    <t:test id="ConvActionRequest7a">
        <t:request>
            <TagActionRequest xmlns="urn:zimbraMail">
                <action op="delete" id="${tag.id1}"/>
            </TagActionRequest>   
        </t:request>
        <t:response>
            <t:select path="//mail:TagActionResponse/mail:action" attr="id" match="${tag.id1}"/>
        </t:response>
    </t:test>

    <t:test id="ConvActionRequest7b" depends="ConvActionRequest7a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.tag}" tag="${tag.id1}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_TAG$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest8" type="functional">
    <t:objective>Untag a conversation with invalid tagid</t:objective>

    <t:test id="ConvActionRequest8" depends="ConvActionRequest7a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.untag}" tag="${tag.id1}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_TAG$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest9" type="bhr" bugids="2379">
    <t:objective>Move a conversation to a valid folder.</t:objective>
    <t:steps>
        1. Create a folder
        2. Move a mail
    </t:steps>
    
    <t:test id="ConvActionRequest9a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="folder${TIME}${COUNTER}" l="1"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
           <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder.id1"/>
        </t:response>
    </t:test>
    <t:test id="ConvActionRequest9b" depends="ConvActionRequest9a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.move}" l="${folder.id1}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest10" type="functional">
    <t:objective>Move a conversation to a nonexisting folder.</t:objective>
    <t:steps>
        1. Move conversation to inbox
        2. Delete the folder.
        3. Move the conversation to the deleted folder.
    </t:steps>

    <t:test id="ConvActionRequest10a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.move}" l="${folder.inbox}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>
    <t:test id="ConvActionRequest10b" depends="ConvActionRequest10a">
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="delete" id="${folder.id1}"/>
            </FolderActionRequest>   
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action" attr="id" match="${folder.id1}"/>
         </t:response>
    </t:test>
    <t:test id="ConvActionRequest10c" depends="ConvActionRequest10b">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.move}" l="${folder.id1}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_FOLDER$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest11" type="functional">
    <t:objective>ConvActionRequest without Action tag </t:objective>
    
    <t:test id="ConvActionRequest11">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest12" type="functional">
    <t:objective>ConvActionRequest without conversation-id in Action tag </t:objective>
    
    <t:test id="ConvActionRequest12">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest13" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id without op attribute in action tag</t:objective>
        <t:test id="ConvActionRequest13">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest14" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id with leading spaces </t:objective>

    <t:test id="ConvActionRequest14">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="         ${conv.id1}" op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest15" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id with trailing spaces </t:objective>
    
    <t:test id="ConvActionRequest15">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}         " op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest16" type="functional">
    <t:objective>ConvActionRequest with spaces in place of conversation-id</t:objective>

    <t:test id="ConvActionRequest16">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.space}         " op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
<!--
	    5/25/05 Matt: INVALID_REQUEST is returned instead of NO_SUCH_CONV
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_CONV$"/>
-->
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest17" type="functional">
    <t:objective>ConvActionRequest with blank conversation-id</t:objective>
    
    <t:test id="ConvActionRequest17">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.blank}" op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
<!--
	    5/25/05 Matt: INVALID_REQUEST is returned instead of NO_SUCH_CONV
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_CONV$"/>
-->
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest18" type="functional">
    <t:objective>ConvActionRequest with invalid conversation-id</t:objective>
    
    <t:test id="ConvActionRequest18">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.sometext}" op="${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
<!--
	    5/25/05 Matt: INVALID_REQUEST is returned instead of NO_SUCH_CONV
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_CONV$"/>
-->
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest19" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and blank in the op attribute</t:objective>
    
    <t:test id="ConvActionRequest19">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${conv.blank}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest19" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and spaces in the op attribute</t:objective>
    
    <t:test id="ConvActionRequest19">
        <t:request>
        <ConvActionRequest xmlns="urn:zimbraMail">
            <action id="${conv.id1}" op="${conv.space}"/>
        </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest20" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and special character in the op attribute</t:objective>

    <t:test id="ConvActionRequest20">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${conv.spchar}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest21" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and sometext in the op attribute</t:objective>
    
    <t:test id="ConvActionRequest21">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${conv.sometext}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest22" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and valid op with leading spaces.</t:objective>
    
    <t:test id="ConvActionRequest22">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="       ${op.read}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest23" type="functional">
    <t:objective>ConvActionRequest with valid conversation-id and valid op with trailing spaces.</t:objective>
    
    <t:test id="ConvActionRequest23">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.read}    "/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest24" type="bhr" bugids="2379">
    <t:objective>Delete a conversation</t:objective>

    <t:test id="ConvActionRequest24">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.delete}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
</t:test>

</t:test_case>


<t:test_case testcaseid="ConvActionRequest25" type="functional">
    <t:objective>Delete a non existing conversation</t:objective>

    <t:test id="ConvActionRequest25">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="${op.delete}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>



<t:test_case testcaseid="ConvActionRequest26" type="sanity">
    <t:objective>login as the test account</t:objective>
    <t:steps>1. Create a conversation to test_account1
             2. Search the conversation. (should exist in sent folder)
             3. Mark it as Spam
             4. Seacrh the conversation again in spam folder (Should exist there)
             5. Search the conversation in sent folder (Should not exist there)       
    </t:steps>
    
    <!-- Login to test_account1-->
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
    <!-- Send a mail to test_account1 -->  
    <t:test >
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>

    <!-- Forward the mail to test_account1 -->  
    <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message.id1}" rt="w">
                    <e t="t" a='${test_account1.name}'/>
                    <su> Fwd: ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> $ Forwarded content : {message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>

    <!-- Search the mail in sent folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv.id2"/>
        </t:response>
    </t:test>
	
    <!--Mark a conversation as spam-->
    <t:test> 
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id2}" op="${op.spam}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id2}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in spam folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.spam}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" match="${conv.id2}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in sent folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" emptyset="1"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="ConvActionRequest27" type="sanity" bugids="3972">
    <t:objective>Move a conversation when the perference for SentFolder is set to /Inbox</t:objective>
    <t:steps>
	1. Create a conversation with:
		1 message in inbox
		1 in subfolderA
		1 in sent
		1 in Trash
	2. Change zimbraPrefSentMailFolder to /Inbox
	3. Move the entire conversation to a subfolderB (with tcon="-s")
	4. The conversation should have:
		1 message in subfolderB (from inbox)
		1 in subfolderB
		1 in subfolderB (from sent)
		1 in Trash (trash is still a special folder)
	</t:steps>

	<t:property name="acct2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
	<t:property name="message1.subject" value="subject.${TIME}.${COUNTER}"/>
	<t:property name="folder1.name" value="folder.${TIME}.${COUNTER}"/>
	<t:property name="folder2.name" value="folder.${TIME}.${COUNTER}"/>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${acct2.name}</name>
                <password>${defaultpassword.value}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="acct2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="acct2.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${acct2.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${acct2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="trashFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="sentFolder.id"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="spamFolder.id"/> 
            <t:select path="//mail:folder[@name='${globals.drafts}']" attr="id" set="draftsFolder.id"/>
        </t:response>
    </t:test>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${inboxFolder.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
	</t:test>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder2.name}" l="${inboxFolder.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder2.id"/>
        </t:response>
	</t:test>

    <!--
    	Build a conversation with:
    		1 message in inbox
    		1 message in sent
    		1 message in trash
	-->

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content>From: foo@example.com
To: ${acct2.name}
Subject: RE: ${message1.subject}
Date: Thu, 27 Oct 2005 13:42:40 -0700 (PDT)

Message 1!
</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder1.id}">
                    <content>From: foo@example.com
To: ${acct2.name}
Subject: RE: ${message1.subject}
Date: Thu, 27 Oct 2005 13:42:40 -0700 (PDT)

Message 2!
</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message2.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${sentFolder.id}">
                    <content>From: foo@example.com
To: ${acct2.name}
Subject: RE: ${message1.subject}
Date: Thu, 27 Oct 2005 13:42:40 -0700 (PDT)

Message 3!
</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message3.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${trashFolder.id}">
                    <content>From: foo@example.com
To: ${acct2.name}
Subject: RE: ${message1.subject}
Date: Thu, 27 Oct 2005 13:42:40 -0700 (PDT)

Message 4!
</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message4.id"/>
        </t:response>
    </t:test>

    <!--t:test >
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message4.id}" op="${op.delete}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message4.id}"/>
        </t:response>
    </t:test-->

    <t:test >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" >
                <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conversation1.id"/>
        </t:response>
    </t:test>

    <t:test id="modifyprefsrequest1">
        <t:request>
            <ModifyPrefsRequest xmlns="urn:zimbraAccount">
                <pref name="zimbraPrefSentMailFolder">/${globals.inbox}</pref>
            </ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>



    <!-- For debugging, just list the folders where everything is before the move. -->
    <t:test >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" tcon="tjs">
                <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conversation1.id}" op="${op.move}" l="${folder2.id}" tcon="-tjs"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conversation1.id}"/>
        </t:response>
    </t:test>


    <t:test >
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conversation1.id}">
                <query>subject:(${message1.subject})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message1.id}']" attr="l" match="${folder2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="l" match="${folder2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message3.id}']" attr="l" match="${folder2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message4.id}']" attr="l" match="${trashFolder.id}"/>
        </t:response>
    </t:test>

		
</t:test_case>


</t:tests>


