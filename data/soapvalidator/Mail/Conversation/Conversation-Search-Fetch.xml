<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="message.subject1" value="message01"/>
<t:property name="message.content1" value="content of the message01"/>

<t:property name="message2.subject" value="message02"/>
<t:property name="message2.content" value="&lt;div style='font-family:Arial, Helvetica, sans-serif;font-size:10pt;color:#000000;'&gt;html content of the message02"/>


<t:property name="fetch_blank" value=""/>
<t:property name="fetch_text" value="some text is here"/>
<t:property name="fetch_positive" value="12345"/>
<t:property name="fetch_negative" value="-12345"/>
<t:property name="fetch_spaces" value="       "/>
<t:property name="fetch_spchar" value="//\\:''*^%!#"/>
<t:property name="read_blank" value=""/>
<t:property name="read_text" value="some text is here"/>
<t:property name="read_positive" value="12345"/>
<t:property name="read_negative" value="-12345"/>
<t:property name="read_spaces" value="       "/>
<t:property name="read_spchar" value="//\\:''*^%!#"/>

<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.move" value="move"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_conversation_search_fetch" type="always" >
    <t:objective>Create a test account</t:objective>
    <steps> 
        1. Login to admin account
        2. Create a test_account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account2" required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup2_conversation_search_fetch" type="always" >
    <t:objective>login as the test account and create a conversation.</t:objective>
    <t:steps> 
        1. Login to test_account1 
        2. Send a mail to test_account1        
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="sendmail1" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account2.name}'/>
                    <su>${message.subject1}</su>
                    <mp ct="text/plain">
                        <content>${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>

    <t:test id="sendmail2" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="w">
                    <e t="t" a='${test_account2.name}'/>
                    <su>Fwd: ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content>Forwarded content:${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>

    <t:test id="sendmail3" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account2.name}'/>
                    <su>${message2.subject}</su>
					<mp ct="multipart/alternative">
						<mp ct="text/plain">
							<content>${message.content1}</content>
						</mp>
						<mp ct="text/html">
							<content>${message2.content}</content>
						</mp>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>


    <t:test id="sendmail4" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="w">
                    <e t="t" a='${test_account2.name}'/>
                    <su>Fwd: ${message2.subject}</su>
					<mp ct="multipart/alternative">
						<mp ct="text/plain">
							<content>Forwarded content: ${message.content1}</content>
						</mp>
						<mp ct="text/html">
							<content>Forwarded content: ${message2.content}</content>
						</mp>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>

	<!--
		To ensure that the conversation emails are received correctly
		wait for the message to be sent before sending the next one.
		
		When I ran this test, the converstation wasn't received in the
		correct order (FWD came before the original).
	-->
	<t:test>
		<t:request>
			<GetInfoRequest xmlns="urn:zimbraAccount"/>
		</t:request>
		<t:response>
			<t:select path="//acct:GetInfoResponse"/> 
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account2.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="searchConv1" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>subject:${message.subject1}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" set="message2.id"/>
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test id="searchConv1" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>subject:${message.subject1}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv1.id"/>
        </t:response>
    </t:test>

    <t:test id="searchConv2" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>subject:${message2.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" set="HTMLmessage2.id"/>
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" set="HTMLmessage1.id"/>
        </t:response>
    </t:test>

    <t:test id="searchConv2" >
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>subject:${message2.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv2.id"/>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="SearchConvRequest_fetch1" type="bhr">
    <t:objective>Search for a conversation with fetch/read/html=not specified should not expand the first hit nor mark it read</t:objective>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id" match="${message2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="cid" match="${conv1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="f" match=".*u.*"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:e[@t='f']" attr="a" match="${test_account1.name}"/>            
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:su" emptyset="0"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp" attr="body" emptyset="1"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp/mail:content" emptyset="1"/>            
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message2.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="SearchConvRequest_fetch2" type="bhr" bugids="6606">
    <t:objective>Search for a conversation with fetch=1 should expand first hit (read=not specified, html=not specified)</t:objective>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="0" html="0">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id" match="${message2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="cid" match="${conv1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:e[@t='f']" attr="a" match="${test_account1.name}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:e[@t='t']" attr="a" match="${test_account2.name}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:su"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp" attr="body" match="1"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp/mail:content"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message2.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest_read3" type="bhr" bugids="8175,7568">
    <t:objective>Search for a conversation with fetch=1, read=1, html=not specified should mark the first message as read.</t:objective>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv1.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv1.id}"/>
         </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="1">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id" match="${message2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[2]" attr="id" match="${message1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="cid" match="${conv1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="id" set="msg.id"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']" attr="f" match=".*u.*" emptyset="1"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp" attr="body" match="1"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message2.id}']/mail:mp/mail:content"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message1.id}']/mail:mp" attr="body" emptyset="1"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${message1.id}']/mail:mp/mail:content" emptyset="1"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message2.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*" emptyset="1"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>


</t:test_case>

<t:test_case testcaseid="SearchConvRequest_read4" type="bhr">
    <t:objective>Search for a conversation with fetch=1, read=1, html=not specified should return the text part.</t:objective>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv2.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv2.id}"/>
         </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv2.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="1">
                <query>subject:(${message2.subject})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id" match="${HTMLmessage2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[2]" attr="id" match="${HTMLmessage1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${HTMLmessage2.id}']" attr="cid" match="${conv2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${HTMLmessage2.id}']/mail:mp[@ct='multipart/alternative']/mail:mp[@ct='text/plain']" attr="content"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest_read5" type="bhr">
    <t:objective>Search for a conversation with fetch=1, read=1, html=1 should return the HTML part.</t:objective>

    <t:test >
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv2.id}" op="${op.unread}"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv2.id}"/>
         </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv2.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="1" html="1">
                <query>subject:(${message2.subject})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m[1]" attr="id" match="${HTMLmessage2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[2]" attr="id" match="${HTMLmessage1.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${HTMLmessage2.id}']" attr="cid" match="${conv2.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m[@id='${HTMLmessage2.id}']/mail:mp[@ct='multipart/alternative']/mail:mp[@ct='text/html']" attr="content"/>
         </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${HTMLmessage2.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*" emptyset="1"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${HTMLmessage1.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m" attr="f" match=".*u.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest_fetch4" type="functional" bugids="27139">
    <t:objective>Search for a conversation with invalid values(blank,text,integer other than 1/0,long positive/negative integer,spaces,decimal number,special character.</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_blank}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_text}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="834545344">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse"/>                     
        </t:response>
    </t:test>
        
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_positive}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_negative}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_spaces}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch=" 1">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1 ">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1.0">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="${fetch_spchar}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
</t:test_case>    

<!-- fetch=0 and read=0 have the same functionality as not specifying the attribute -->
<t:test_case testcaseid="SearchConvRequest_fetch5" type="deprecated" bugids="4926">
    <t:objective>Verify that a search for a conversation with fetch=0 returns INVALID_REQUEST - read=0 is invalid</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="0">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>

</t:test_case>
    

<t:test_case testcaseid="SearchConvRequest_read6" type="functional" >
    <t:objective>Search for a conversation with invalid values(blank,text,integer,long positive/negative integer,spaces,decimal number,special characters).</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_blank}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_text}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="8">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_positive}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_negative}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_spaces}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>   
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read=" 1">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="1 ">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>    
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="1.0">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="${read_spchar}">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>
     
</t:test_case>
    
<!-- fetch=0 and read=0 have the same functionality as not specifying the attribute -->
<t:test_case testcaseid="SearchConvRequest_read7" type="deprecated" bugids="4926">
    <t:objective>Verify that a search for a conversation with fetch=1 and read=0 returns INVALID_REQUEST - read=0 is invalid</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv1.id}" sortBy="dateDesc" offset="0" limit="25" fetch="1" read="0">
                <query>subject:(${message.subject1})</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                     
        </t:response>
    </t:test>

</t:test_case>
    


</t:tests>
