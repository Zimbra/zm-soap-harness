<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account4.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account6.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="test_account1.password" value="test123"/>

<t:property name="conv.spchar" value="//\\'^%"/>
<t:property name="conv.space" value="           "/>
<t:property name="conv.blank" value=""/>
<t:property name="conv.sometext" value="some text"/>

<t:property name="message.subject1" value="Subject${TIME}.${COUNTER}"/>
<t:property name="message.content1" value="content of the message${TIME}.${COUNTER}"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>
<t:property name="test_acct3.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create a test account</t:objective>
    <steps> 
        1. Login to admin account
        2. Create a test_account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="accout5.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account6.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="accout6.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account6.server"/>
        </t:response>
    </t:test>

</t:test_case>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

<t:test_case testcaseid="acct_setup2" type="always" >
    <t:objective>login as the test account</t:objective>
    <t:steps> 
        1. Login to test_account1 
        2. Send a mail to test_account1        
    </t:steps>
    
    <t:test id="auth1" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account1.name}</account>
            <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    <t:test id="sendmail1">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${test_account1.name}'/>
                    <su> ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> ${message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>

 	<t:test id="sendmail2" required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message.id1}" rt="w">
                    <e t="t" a='${test_account1.name}'/>
                    <su> Fwd: ${message.subject1}</su>
                    <mp ct="text/plain">
                        <content> $ Forwarded content : {message.content1}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="message.id1"/>
        </t:response>
    </t:test>


    <t:test id="searchConv">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv.id1"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest1" type="bhr" >
    <t:objective>Search for a conversation with valid conversation-id</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cid" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest2" type="functional" >
    <t:objective>Search for a conversation with valid conversation-id with leading spaces</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="         ${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest3" type="functional" >
    <t:objective>Search for a conversation with valid conversation-id with trailing spaces</t:objective>

    <t:test>
        <t:request>
              <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}     " sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest4" type="functional" >
    <t:objective>Search for a conversation with blank conversation-id</t:objective>

    <t:test>
        <t:request>
              <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.blank}" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
        <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
    </t:response>
</t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest5" type="functional" >
    <t:objective>Search for a conversation with spaces at conversation-id</t:objective>

    <t:test>
        <t:request>
              <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.space}" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest6" type="functional" >
    <t:objective>Search for a conversation with sometext in conversation-id</t:objective>

    <t:test>
        <t:request>
              <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.sometext}" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>



<t:test_case testcaseid="SearchConvRequest8" type="functional" >
    <t:objective>Search for a conversation with valid conversation-id but blank query</t:objective>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>${conv.blank}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.QUERY_PARSE_ERROR$"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest9" type="functional" >
    <t:objective>Search for a conversation with valid conversation-id but spaces in query</t:objective>
    
    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>${conv.space}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.QUERY_PARSE_ERROR$"/>
        </t:response>
    </t:test>

</t:test_case>


<!--
	5/27/2005 Matt:  For SearchConvRequest10, see SearchConvRequest7
<t:test_case testcaseid="SearchConvRequest10" type="functional" bugids="2015">
    <t:objective>Search for a valid conversation-id but no query tag</t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>
        </t:response>
    </t:test>

</t:test_case>
-->


<t:test_case testcaseid="SearchConvRequest11" type="functional" >
    <t:objective>Search for a valid conversation-id but no sortBy, offset and limit attributes </t:objective>

    <t:test>
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cid" match="${conv.id1}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="SearchConvRequest12" type="functional" >
    <t:objective>Search for a nonexisting conversation </t:objective>
    <t:steps> 
        1. Delete the conversation.
        2. Search for the conversation.
    </t:steps>

    <t:test id="searchconvrequest12a">
        <t:request>
            <ConvActionRequest xmlns="urn:zimbraMail">
                <action id="${conv.id1}" op="delete"/>
            </ConvActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ConvActionResponse/mail:action" attr="id" match="${conv.id1}"/>
        </t:response>
    </t:test>
    <t:test id="searchconvrequest12b" depends="searchconvrequest12a">
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}">
                <query>in:${globals.sent}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^mail.NO_SUCH_CONV$"/>
        </t:response>
    </t:test>

</t:test_case>










<!--
	Per Bug 2015:

		When the query string is omitted, our search operations default to
		using the query string specified in the user's
		"zimbraPrefMailInitialSearch" LDAP attribute.  If there's no
		query string there either, the server throws a
		service.INVALID_REQUEST fault.
-->
<t:test_case testcaseid="SearchConvRequest7" type="functional" bugids="2015">
    <t:objective>Search for a conversation with valid conversation-id but Invalid query and query not specified (server should use the zimbraPrefMailInitialSearch setting)</t:objective>
	<t:steps>
		1. Login as user1
                2. Search for conversation to get conversation id
		3. Determine what the zimbraPrefMailInitialSearch search string is
		4. Determine what the results of zimbraPrefMailInitialSearch is
		5. Run a SearchConvRequest with invalid query
		6. Verify that the search results match zimbraPrefMailInitialSearch
	</t:steps>


    <t:property name="msg.foldername" value="${testMailRaw.root}/user1"/>
    
     <t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true" >
	 <t:request>
	  <AuthRequest xmlns="urn:zimbraAdmin">
	    <name>${admin.user}</name>
	    <password>${admin.password}</password>
	  </AuthRequest>
	 </t:request>
	 <t:response>
	    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
	 </t:response>
	</t:test>
	
	<t:test required="true" >
	 <t:request>
	  <CreateAccountRequest xmlns="urn:zimbraAdmin">
	    <name>${test_account4.name}</name>
	    <password>${defaultpassword.value}</password>
	  </CreateAccountRequest>
	 </t:request>
	 <t:response>
		<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="user1.id"/>
              <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
	 </t:response>
	</t:test>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${msg.foldername}</foldername>
                        <to>${test_account4.name}</to>
                        <from>${nonZimbraUser.name}</from>
                        <server>${test_acct2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>

    <t:test id="SearchConvRequest7a">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account4.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
     <t:test depends= "SearchConvRequest7a">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="conversation">
                <query>in:${globals.inbox}</query>
            </SearchRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv.id1"/>
	    </t:response>
	</t:test>

    <t:test id="SearchConvRequest7b" depends="SearchConvRequest7a">
        <t:request>
			<GetPrefsRequest xmlns="urn:zimbraAccount">
				<pref name="zimbraPrefMailInitialSearch"/>
			</GetPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:GetPrefsResponse">
				<t:select path="acct:pref[@name='zimbraPrefMailInitialSearch']">
					<t:set>test_account1.zimbraPrefMailInitialSearch</t:set>
				</t:select> <!-- path="acct:pref ..." -->
			</t:select> <!-- path="//acct:GetPrefsResponse" -->
        </t:response>
    </t:test>
    
<!--
	5/27/2005 Matt:  I'm not really sure how to test this requirement.
		The test will use in:inbox first and save the results
		Then, it will send an invalid query and the same results should
		be returned.
-->

    <t:test id="SearchConvRequest7c" depends="SearchConvRequest7b">
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>${test_account1.zimbraPrefMailInitialSearch}</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cm" match="^1$"/>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="id" set="search.id"/>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cid" set="search.cid"/>
        </t:response>
    </t:test>

    <t:test depends="SearchConvRequest7c">
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
                <query>Invalid Query</query>
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="id" match="${search.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cid" match="${search.cid}"/>
        </t:response>
	</t:test>


	<!--
		Old test case: SearchConvRequest10
		5/27/2005 Matt:  I put it here so I don't have to duplicate
			all the steps above such as login, getPrefs, etc.
	-->
    <t:test depends="SearchConvRequest7c">
        <t:request>
            <SearchConvRequest xmlns="urn:zimbraMail" cid="${conv.id1}" sortBy="dateDesc" offset="0" limit="25">
            </SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="id" match="${search.id}"/>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="cid" match="${search.cid}"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest13" type="sanity" bugids="5329">
    <t:objective> Verify bug 5329 - "font definitions" are appear in the Original Message portion </t:objective>
    <t:steps> 1. Send a specific message
              2. SearchConvRequest
              3. Verify the fragment contains content, not html - "Font Definitions" should not appear in the fragment
    </t:steps>
    
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    <t:test id="create_test_account1"  required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct3.server"/>
        </t:response>
    </t:test>

	<t:property name="msg01.file" value="${testMailRaw.root}/email26/mimeMsg.txt"/>
	<t:property name="msg01.subject" value="3 PM Prod Mtg Agenda"/>
	<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>


    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${test_account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${test_acct3.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<t:property name="server.zimbraAccount" value="${test_acct3.server}"/>

    <t:test id="auth" required="true">
        <t:request>
        <AuthRequest xmlns="urn:zimbraAccount">
            <account by="name">${test_account3.name}</account>
            <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
	 <t:request>
	   <SearchRequest xmlns="urn:zimbraMail" sortBy="dateDesc" offset="0" limit="25" types="conversation">
			<query>in:inbox</query>
	   </SearchRequest>
	 </t:request>
	  <t:response>
		<t:select path="//mail:SearchResponse/mail:c" attr="id" set="conv01.id"/>
	 </t:response>
	</t:test>
  
    <t:test >
        <t:request>
			<SearchConvRequest xmlns="urn:zimbraMail" sortBy="dateDesc" offset="0" limit="25" cid="${conv01.id}" fetch="1" read="1" html="1">	
				<query>in:inbox</query>
			</SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse/mail:m" attr="fr" match=".*Font Definitions.*" emptyset="1" />
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest14" type="sanity" bugids="13436">
    <t:objective> TC to verify SearchConvRequest can access specific headers </t:objective>

    <t:test >
        <t:request>
			<SearchConvRequest xmlns="urn:zimbraMail" sortBy="dateDesc" offset="0" limit="25" cid="${conv01.id}" fetch="1" read="1" html="1">
				<header n="From" />
				<header n="To" />
				<query>in:inbox</query>
			</SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path='//mail:SearchConvResponse/mail:m/mail:header[@n="To"]' emptyset="0"/>
            <t:select path='//mail:SearchConvResponse/mail:m//mail:header[@n="From"]' emptyset="0"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="SearchConvRequest15" type="sanity" bugids="13436">
    <t:objective> TC to verify SearchConvRequest can access specific headers </t:objective>

	<t:property name="server.zimbraAccount" value="${account5.server}"/>

    <t:test >
        <t:request>
        	<AuthRequest xmlns="urn:zimbraAccount">
            	<account by="name">${account5.name}</account>
            	<password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="message15.subject" value="subject${TIME}${COUNTER}"/>
	<t:property name="message15.userAgent" value="userAgent${TIME}${COUNTER}"/>
	<t:property name="message15.version" value="version${TIME}${COUNTER}"/>
	
    <t:test >
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <userAgent name="${message15.userAgent}" version="${message15.version}"/>
        </t:requestContext>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a="${account6.name}"/>
                    <su>${message15.subject}</su>
                    <mp ct="text/plain">
                        <content>content${TIME}${COUNTER}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account6.server}"/>

    <t:test >
        <t:request>
        	<AuthRequest xmlns="urn:zimbraAccount">
            	<account by="name">${account6.name}</account>
            	<password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:test>
	 	<t:request>
	   		<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${message15.subject})</query>
	   		</SearchRequest>
	 	</t:request>
	  	<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="id" set="message15.id"/>
				<t:select path="//mail:m" attr="cid" set="conversation15.id"/>
			</t:select>
	 	</t:response>
	</t:test>
  
	<t:property name="server.restServlet" value="${account6.server}"/>

	<t:resttest required="true">
		<t:restServletRequest>
			<id>${message15.id}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="X-Mailer" match=".*${message15.userAgent}.*"/>
			<t:select attr="X-Mailer" match=".*${message15.version}.*"/>
		</t:restServletResponse>
	</t:resttest>

    <t:test >
        <t:request>
			<SearchConvRequest xmlns="urn:zimbraMail" fetch="all" cid="${conversation15.id}" >
				<header n="X-Mailer" />
				<query>subject:(${message15.subject})</query>
			</SearchConvRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchConvResponse">
            	<t:select path="//mail:m">
					<t:select path="//mail:header[@n='X-Mailer']" match=".*${message15.userAgent}.*"/>
            		<t:select path="//mail:header[@n='X-Mailer']" match=".*${message15.version}.*"/>
            	</t:select>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>

</t:tests>
