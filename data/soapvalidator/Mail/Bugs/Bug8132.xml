<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="acct1.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="message.folder"	value="${testMailRaw.root}/Bugs/8132"/>
<t:property name="msg01.subject"	value="Why the lack of mixing in support for Class methods"/>
<t:property name="msg02.subject"	value="info required"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    	

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
	    <t:response>
	        <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Bug8132_01" type="sanity" bugids="8132">
    <t:objective>Verify bug #8132 - Malformed messages should not throw error.  Server should try its best to display</t:objective>


	<t:property name="uri" value="${admin.uri}"/>
    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test >
	    <t:request>
	        <CreateAccountRequest xmlns="urn:zimbraAdmin">
	            <name>${account1.name}</name>
	            <password>${defaultpassword.value}</password>
	        </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>	
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
	</t:test>


    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <foldername>${message.folder}</foldername>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
         </t:lmtpInjectRequest>
    </t:mailinjecttest>


	<t:property name="server.zimbraAccount" value="${account1.server}"/>
	
	<t:test >
	 <t:request>
	  <AuthRequest xmlns="urn:zimbraAccount">
	    <account by="name">${account1.name}</account>
	    <password>${defaultpassword.value}</password>
	  </AuthRequest>
	 </t:request>
	 <t:response>
		<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

	 </t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${msg01.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg01.id"/>
		</t:response>
	</t:test>

    <t:test id="MsgGetRequest1b" depends="MsgGetRequest1a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg01.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${msg02.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg02.id"/>
		</t:response>
	</t:test>

    <t:test id="MsgGetRequest1b" depends="MsgGetRequest1a">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg02.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m"/>
        </t:response>
    </t:test>


</t:test_case>


</t:tests>

