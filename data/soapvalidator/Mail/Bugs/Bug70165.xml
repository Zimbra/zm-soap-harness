<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="spellcheck.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="check.word1" value="hello"/>
<t:property name="check.word2" value="helli"/>

    
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Login to admin </t:objective>
   
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>   

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>              
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>


</t:test_case> 


<t:test_case testcaseid="bug70165_1" type="bhr" bugids="56685">
    <t:objective>Verify CheckSpellingRequest is working with existing word</t:objective>
    <t:steps>1. Log as user say user1
    		 2. Send CheckSpelling of any word and verify error not returned in CheckSpellingResponse
    </t:steps>
    <t:test>
        <t:request>
            <CheckSpellingRequest xmlns="urn:zimbraMail">${check.word1}</CheckSpellingRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CheckSpellingResponse">
            	<t:select path="//mail:misspelled" emptyset="1"/>
            	<t:select path="//zimbra:Code" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="bug70165_2" type="functional">
    <t:objective>Verify CheckSpellingRequest is working with a non existing word</t:objective>
    <t:steps>1. Log as user say user1
    		 2. Send CheckSpelling of any word and verify error not returned in CheckSpellingResponse
    </t:steps>
    
    <t:test>
        <t:request>
            <CheckSpellingRequest xmlns="urn:zimbraMail">${check.word2}</CheckSpellingRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CheckSpellingResponse">
            	<t:select path="//mail:misspelled" attr="word" match="${check.word2}"/>
            	<t:select path="//zimbra:Code" emptyset="1"/>
            </t:select>
        </t:response>
    </t:test>

</t:test_case>
    
</t:tests>
