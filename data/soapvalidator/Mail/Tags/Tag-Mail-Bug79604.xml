<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="${defaultpassword.value}"/>

<t:property name="op.tag" value="tag"/>
<t:property name="op.update" value="update"/>
<t:property name="tag1.name" value="tag${TIME}${COUNTER}"/>
<t:property name="tag2.name" value="tag${TIME}${COUNTER}"/>
<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1" type="always" >
    <t:objective>create test account</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

<t:test_case testcaseid="acct1_login" type="always" >
    <t:objective>login as the test account</t:objective>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
  
   

</t:test_case>


<t:test_case testcaseid="Rename_tag_79604" type="bhr" bugids="79604">
    <t:objective> Renaming tag breaks filters referencing the tag</t:objective>
    <t:steps> 
          1) Create a tag
          2) Create filter where action is to tag the incoming message with the tag from step 1.
          3) Save filter
          4) Rename tag created in step 1 to a new name.
          5) Reopen filter and check if filter has renamed tag.
          6) Send a message and check if tagged message has new name.
    </t:steps>

     <t:property name="message1.file" value="${testMailRaw.root}/email01/Msg01.txt"/>
    <t:property name="message1.subject" value="email01A"/>
   
    <t:test  >
        <t:request>
			<CreateTagRequest xmlns="urn:zimbraMail">
				<tag name="${tag1.name}" color="0"/>
			</CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag.id"/>
        </t:response>
	</t:test>
	
	<t:test id="filters_setting">
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="subject" stringComparison="is" value="${message1.subject}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionTag tagName="${tag1.name}" />
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
   
	
	    <t:test depends="tagactionrequest3a">
        <t:request>
            <TagActionRequest xmlns="urn:zimbraMail">
                <action op="rename" id="${tag.id}" name="${tag2.name}"/>
            </TagActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:TagActionResponse/mail:action">
            <t:select attr="op" match="rename"/>
            <t:select attr="id" match="${tag.id}"/>
            </t:select>
        </t:response>
    </t:test>
    
	
     <t:test>
		<t:request>
			<GetFilterRulesRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFilterRulesResponse">
	            <t:select path="//mail:filterRules/mail:filterRule[@name='${filter1.name}']">
	            	<t:select attr="active" match="1"/>
	            	<t:select path="//mail:filterTests">
		            	<t:select attr="condition" match="anyof"/>
		            	<t:select path="//mail:headerTest">
		            		<t:select attr="header" match="subject"/>
		            		<t:select attr="stringComparison" match="is"/>
		            	</t:select>
	            	</t:select>	            	
	            		<t:select path="//mail:filterActions/mail:actionTag" attr="tagName" match="${tag2.name}"/>
           	 </t:select>
            </t:select>
        </t:response>
        </t:test>
    
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message1.file}</filename>
			<to>${test_account1.name}</to>
			<from>${test_account1.name}</from>
			<server>${test_acct.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
       
 
      <t:test id="filters_verification" depends="filters_setting">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse">
	            <t:select path="//mail:m" attr="tn" match="${tag2.name}"/>
            </t:select>
        </t:response>
    </t:test>
 

</t:test_case>

</t:tests>