<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="test_account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account1.password" value="test123"/>
<t:property name="op.spam" value="spam"/>
<t:property name="op.notspam" value="!spam"/>
<t:property name="message.subject1" value="Subject${TIME}.${COUNTER}"/>
<t:property name="message.subject2" value="Subject${TIME}.${COUNTER}"/>
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder2.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder3.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="spam2.file" value="${testMailRaw.root}/spam/spam4.txt"/>
<t:property name="spam2.subject" value="Losing weight has never been so easy"/>

<t:property name="spam.subject.header" value="SPAM"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account
            2. Create a test_account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${test_account1.password}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
</t:test_case>

<t:test_case testcaseid="MsgActionRequest_NotSpam_01" type="bhr" areas="spam, smtp" excludes="MACOSXx86,MACOSX" >
    <t:objective>Verify that marking a message as not spam moves the message into the inbox</t:objective>
    <t:steps>
        1. SMTP inject a spam message to account2 
    	2. Login to account2
    	3. Search for the message
    	4. Mark the message as !spam
    	5. Verify that the message moves to inbox
    </t:steps>

	<t:mailinjecttest>
        <t:lmtpInjectRequest>
            <filename>${spam2.file}</filename>
            <to>${account2.name}</to>
            <from>${defaultdestination.email}</from>
            <server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>    


    <!--t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.server}</address>
            <filename>${spam2.file}</filename>
            <recipient>${account2.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest-->
   
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox.id"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="folder.spam.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" >
                <query>in:junk</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="spam2.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${spam2.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
            	<t:select path="//mail:m[@id='${spam2.id}']" attr="l" match="${folder.spam.id}"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test> 
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id="${spam2.id}" op="${op.notspam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${spam2.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse">
            	<t:select path="//mail:m[@id='${spam2.id}']" attr="l" match="${folder.inbox.id}"/>
            </t:select>
        </t:response>
    </t:test>



</t:test_case>


<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

<t:test_case testcaseid="acct_setup2" type="always" areas="spam" >
    <t:objective>login as the test account</t:objective>
    <t:steps>1. Login to test_account1.
        2. Add a mail to inbox. 
    </t:steps>

    <!--Login to test_account1 -->
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${test_account1.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
</t:test_case>


<t:test_case testcaseid="MsgActionRequest29" type="sanity" areas="spam, smtp" >
    <t:objective> Marking a mail as spam </t:objective>
    <t:steps>1. Create a message in test_account1
            2. Search the message in inbox. (should exist in inbox)
            3. Mark it as Spam
            4. Search the message again in spam folder (Should exist there)
            5. Search the message in inbox(Should not exist there)       
    </t:steps>
       
    <!-- find out which folder ID is the inbox -->
    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the account-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="hello" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message2.id"/>
        </t:response>
    </t:test>  

    <!-- Search the mail in inbox.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.inbox}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message2.id}']" />
        </t:response>
    </t:test>

    <!--Mark the mail as spam-->
    <t:test> 
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${message2.id}" op = "${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message2.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in spam folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.spam}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" match="${message2.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in inbox.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.inbox}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgActionRequest30" type="bhr" areas="spam" >
    <t:objective>Marking a mail as not a spam </t:objective>
    <t:steps>1.Add a mail to the inbox.
            2.Mark mail in inbox as spam
            3.Mark the mail as not a spam.
            4.Search the mail in inbox.
    </t:steps>
    
    <!-- find out which ID is the Inbox -->
    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the inbox-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message30.id"/>
        </t:response>
    </t:test>

    <!-- Mark mail in inbox as spam--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message30.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message30.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in spam folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.spam}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message30.id}']" />
        </t:response>
    </t:test>

    <!-- Mark the mail as not a spam.--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message30.id}" op="${op.notspam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.notspam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message30.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in inbox.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.inbox}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message30.id}']" />
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgActionRequest31" type="sanity" bugids="2530" areas="spam" >
    <t:objective>Mark a mail in a custom folder as spam </t:objective>
    <t:steps>1.Add a mail to the inbox.
            2. Create a folder.
            3.Add a mail to the newly created folder.
            4.mark the mail as spam.
            5.Mark the mail as not a spam.
            6.Search the mail in the folder created.
    </t:steps>

    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the inbox-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message31.id"/>
        </t:response>
    </t:test>
    
    <!-- Create a folder.-->
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder30.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the newly created folder.-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder30.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message31.id"/>
        </t:response>
    </t:test>
        
    <!-- Mark the mail as spam.-->
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message31.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message31.id}"/>
        </t:response>
    </t:test>

    <!-- Mark the mail as not a spam.--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message31.id}" op="${op.notspam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.notspam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message31.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in the folder created.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:"${folder1.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message31.id}']" />
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgActionRequest32" type="bhr" areas="spam" >
    <t:objective>Marking multiple mails as not a spam </t:objective>
    <t:steps>1.Add multiple mails to the inbox.
            2.Mark mails in inbox as spam
            3.Mark the mails as not a spam.
            4.Search the mails in inbox.
            5.Search the mails in spam.
    </t:steps>
    
    <!-- find out which ID is the Inbox -->
    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add mails to the inbox-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message32.id"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject2}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message32a.id"/>
        </t:response>
    </t:test>

    <!-- Mark mails in inbox as spam--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message32.id},${message32a.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message32.id},${message32a.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mails in spam folder.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.spam}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message32.id}']" />
            <t:select path="//mail:SearchResponse/mail:m[@id='${message32a.id}']" />
        </t:response>
    </t:test>

    <!-- Mark the multiple mails as not a spam.--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message32.id},${message32a.id}" op="${op.notspam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.notspam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message32.id},${message32a.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mails in inbox.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.inbox}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message32.id}']" />
            <t:select path="//mail:SearchResponse/mail:m[@id='${message32a.id}']" />
        </t:response>
    </t:test>

    <!--Search the mails in spam.-->
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:${globals.spam}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="MsgActionRequest33" type="sanity" bugids="2530,2334" areas="spam" >
    <t:objective>Mark mails in a custom folder as spam </t:objective>
    <t:steps>1.Add a mail to the inbox.
            2. Create a folder.
            3.Add mails to the newly created folder.
            4.mark the mails as spam.
            5.Mark the mails as not a spam.
            6.Search the mails in the folder created.
    </t:steps>

    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the inbox-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message33.id"/>
        </t:response>
    </t:test>
    
    <!-- Create a folder.-->
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder2.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder33.id"/>
        </t:response>
    </t:test>

    <!-- Add mails to the newly created folder.-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder33.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message33.id"/>
        </t:response>
    </t:test>
     
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder33.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message33a.id"/>
        </t:response>
    </t:test>   
    <!-- Mark the mails as spam.-->
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message33.id},${message33a.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message33.id},${message33a.id}"/>
        </t:response>
    </t:test>

    <!-- Mark the mails as not spam.--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message33.id},${message33a.id}" op="${op.notspam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.notspam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message33.id},${message33a.id}"/>            
        </t:response>
    </t:test>

    <!-- Search the mails in the folder created.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:"${folder2.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message33.id}']" />
            <t:select path="//mail:SearchResponse/mail:m[@id='${message33a.id}']" />
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="MsgActionRequest34" type="sanity" bugids="2530">
    <t:objective>Mark a mail as not sapm to a specified folder </t:objective>
    <t:steps>1.Add a mail to the inbox.
            2. Create a folder.
            3. Add a mail to the newly created folder.
            4. mark the mail as spam.
            5. Mark the mail as not a spam and specify the folder.
            6. Search the mail in the folder created.
    </t:steps>

    <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the inbox-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${inboxFolder.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
                <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message34.id"/>
        </t:response>
    </t:test>
    
    <!-- Create a folder.-->
    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder3.name}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder34.id"/>
        </t:response>
    </t:test>

    <!-- Add a mail to the newly created folder.-->
    <t:test >
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder34.id}">
                    <content Subject="${message.subject1}" />
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message34.id"/>
        </t:response>
    </t:test>
        
    <!-- Mark the mail as spam.-->
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message34.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message34.id}"/>
        </t:response>
    </t:test>

    <!-- Mark the mail as not a spam.--> 
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message34.id}" op="${op.notspam}" l="${folder34.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.notspam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message34.id}"/>
        </t:response>
    </t:test>

    <!-- Search the mail in the folder created.--> 
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc" offset="0" limit="25">
                <query>in:"${folder3.name}"</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@id='${message34.id}']" />
        </t:response>
    </t:test>

</t:test_case>


</t:tests>


