<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="waitset.${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="interest.all" value="all"/>
<t:property name="interest.messages" value="m"/>
<t:property name="interest.appointments" value="a"/>
<t:property name="interest.contacts" value="c"/>



<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="CreateWaitSetRequest_Basic_AccountSetup" type="always">
    <t:objective>create test account</t:objective>
    <t:steps>1. Login to admin
             2. Create an account.    
    </t:steps>
    
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
</t:test_case>



<t:test_case testcaseid="CreateWaitSetRequest_Basic_01" type="smoke">
    <t:objective>Basic Test Case for WaitSetRequest (non blocking)</t:objective>
    <t:steps>
    1. Login to account1
    2. Send the CreateWaitSetRequest to create a wait set
    3. Inject a message into the mailbox
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet"/>
        </t:response>
    </t:test>

	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

    <t:test >
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account1.waitset.waitSet}" seq="${account1.waitset.seq}"  >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account1.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 

<t:test_case testcaseid="CreateWaitSetRequest_Basic_02" type="smoke">
    <t:objective>Basic Test Case for WaitSetRequest (blocking)</t:objective>
    <t:steps>
    1. Login to account1
    2. Send the CreateWaitSetRequest to create a wait set
    3. Inject a message into the mailbox
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account2.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account2.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account2.waitset.waitSet"/>
        </t:response>
    </t:test>

    <t:test concurrent="true">
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" block="1" waitSet="${account2.waitset.waitSet}" seq="${account2.waitset.seq}" defTypes="${interest.all}" >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account2.id}"/>
            </t:select>
        </t:response>
    </t:test>

	<t:delay sec="10"/>
	
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${msg01.file}</filename>
			<to>${account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

	<!-- The WaitSetResponse will be received here, after the message is received in the mailbox -->
	
</t:test_case> 


<t:test_case testcaseid="WaitSetacct_setup" type="always" >
	<t:objective>Create test accounts</t:objective>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

	<t:test required="true">
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
</t:test_case> 


<t:test_case testcaseid="CreateWaitSetRequest_Basic_03" type="smoke">
    <t:objective>Basic Test Case to watch for appointments and contacts </t:objective>
    <t:steps>
    1. Login to account3
    2. Send the CreateWaitSetRequest to create a wait set
    3. Create Contact and appointment
    4. Send the WaitSetRequest to pick up the changes
    </t:steps>
    
    <t:test >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="c,a" >
				<add>
					<a id="${account3.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account3.waitset.seq"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account3.waitset.waitSet"/>
        </t:response>
    </t:test>

    <t:test concurrent="true">
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" block="1" waitSet="${account3.waitset.waitSet}" seq="${account3.waitset.seq}" defTypes="c, a" >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse">
            	<t:select path="//mail:a" attr="id" match="${account3.id}"/>
            </t:select>
        </t:response>
    </t:test>

	<t:delay sec="10"/>

<t:property name="appointment.subject" value="Subject of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.location" value="Location of meeting${TIME}.${COUNTER}"/>
<t:property name="appointment.content" value="Content of the message${TIME}.${COUNTER}"/>
<t:property name="Time3" value="${ICALTIME(-1h)}"/>
<t:property name="Time2" value="${ICALTIME(+1h)}"/>

	<t:test>
		<t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m>
				<inv method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment.subject}" loc="${appointment.location}">
					<at role="OPT" ptst="NE" rsvp="1" a="${account3.name}"/>
					<s d="${Time3}"/>  
					<e d="${Time2}"/>  
					<or a="${account3.name}"/>
				</inv>
				<e a="${account3.name}" t="t"/>
					<mp content-type="text/plain">
					<content>${appointment.content}</content>
					</mp>
				<su>${appointment.subject}</su>
				</m>
			</CreateAppointmentRequest>
		</t:request>
		<t:response>
			<t:select path = "//mail:CreateAppointmentResponse"/>
		</t:response>
	</t:test>

	<t:test >
        <t:request>
            <CreateContactRequest xmlns="urn:zimbraMail">
                <cn>
                    <a n="firstName">First.${TIME}.${COUNTER}</a>
                    <a n="lastName">Last.${TIME}.${COUNTER}</a>
                    <a n="email">email.${TIME}.${COUNTER}@domain.com</a>
                </cn>     
            </CreateContactRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateContactResponse/mail:cn">
            <t:select attr="id" set="contact.id"/>
            </t:select>	
        </t:response>
    </t:test>


</t:test_case> 


<t:test_case testcaseid="CreateWaitSetRequest_Basic_04" type="smoke" bugids="17377">
    <t:objective> TC to verify Non-Admin accounts are restricted to a max of 5 WaitSet  </t:objective>
    <t:steps>
    1. Create 5 WaieSet for a particular account
    2. Issue WaitSetRequest using seqNo and id of very first WaitSet (This will ensure that WaitSet1 is still valid)
    3. Create one more WaitSet
	4. Issue WaitSetRequest using seqNo and id of WaitSet1. It show give error message as maximum limit is received and should automatically delete the first WaitSet.
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="WaitSet01" >
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq1"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet1"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet02">
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq2"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet2"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet03">
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq3"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet3"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet04">
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq4"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet4"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet05">
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq5"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet5"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account1.waitset.waitSet1}" seq="${account1.waitset.seq1}"  >
			</WaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:WaitSetResponse"/>
        </t:response>
    </t:test>

    <t:test id="WaitSet06">
        <t:request>
			<CreateWaitSetRequest xmlns="urn:zimbraMail" defTypes="${interest.all}" >
				<add>
					<a id="${account1.id}" />
				</add>
			</CreateWaitSetRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateWaitSetResponse" attr="seq" set="account1.waitset.seq6"/>
            <t:select path="//mail:CreateWaitSetResponse" attr="waitSet" set="account1.waitset.waitSet6"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<WaitSetRequest xmlns="urn:zimbraMail" waitSet="${account1.waitset.waitSet1}" seq="${account1.waitset.seq1}"  >
			</WaitSetRequest>
		</t:request>
		<t:response>
			<t:select path = "//zimbra:Code" match = "^admin.NO_SUCH_WAITSET$"/>
		</t:response>
	</t:test>

</t:test_case> 


</t:tests>
