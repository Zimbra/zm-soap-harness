<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters" type="always" >
    <t:objective>create test accounts</t:objective>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
    </t:test>
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
	    </t:response>
    </t:test>
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
	    </t:response>
    </t:test>
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
	    </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${zimbraServer.name}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="mta.server"/>
		</t:response>
    </t:test>

</t:test_case>



<t:test_case testcaseid="FilterActionReply_01" type="smoke" bugids="18288" >
    <t:objective>Verify Filter Action Reply</t:objective>
    <t:steps> 1. Create filter with Action Reply set reply message body with some header(body-template) from incoming mail.
    2. verify reply message delivered to sender.
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter1.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter1.subject}" />
						</filterTests>
						<filterActions>
							 <actionReply>
           						 <content>Message received from $\{from} with subject $\{SUBJECT} and body $\{BODY}</content>
            				</actionReply>
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
    
    

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter1.subject}</su>
					<mp ct="text/plain">
	    				<content>Hello world</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter1.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Re: ${filter1.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="Message received from ${account2.name} with subject ${filter1.subject} and body Hello world"/>
				
			</t:response>
    </t:test>
 </t:test_case>
 
 <t:test_case testcaseid="FilterActionReply_02" type="functional" bugids="58383" >
    <t:objective>Verify Filter Action Reply</t:objective>
    <t:steps> 1. Create filter with Action Reply set reply message body with subject from incoming mail.
    2. Send message with multi-byte subject 
    3. verify reply message returned to sender and subject rendered properly.
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter1A.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter1A.subject" value="偶者 Japanese"/>	
	<t:property name="filter1A.body" value="body text${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter1A.name}" active="1">
						<filterTests condition="anyof">
							  <bodyTest value="${filter1A.body}" />
						</filterTests>
						<filterActions>
							 <actionReply>
           						 <content>Message received with subject $\{SUBJECT}</content>
            				</actionReply>
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
    
    

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter1A.subject}</su>
					<mp ct="text/plain">
	    				<content>${filter1A.body}</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter1A.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Re: ${filter1A.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="Message received with subject ${filter1A.subject}"/>
				
			</t:response>
    </t:test>
 </t:test_case>

<t:test_case testcaseid="FilterActionReply_03" type="smoke" bugids="60848" >
    <t:objective>Filter Action Reply Implicite keep</t:objective>
    <t:steps> 1. Create account1 filter with Action Reply 
    2. verify reply message delivered to sender.
	3. verify message in also present in account1 
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter6.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter6.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter6.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter6.subject}" />
						</filterTests>
						<filterActions>
							 <actionReply>
           						 <content>Message received.</content>
            				</actionReply>
							<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
    
    

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter6.subject}</su>
					<mp ct="text/plain">
	    				<content>Hello world</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter6.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Re: ${filter6.subject}"/>
			</t:response>
    </t:test>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>

	 <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter6.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${filter6.subject}"/>
			</t:response>
    </t:test>
	
 </t:test_case>


<t:test_case testcaseid="FilterActionReply_04" type="smoke" bugids="70848" >
    <t:objective>Filter Action Reply Action Discard overrites Implicite keep </t:objective>
    <t:steps> 1. Create account1 filter with Action Reply with discard option
    2. verify reply message delivered to sender.
	3. verify message not present in account1 
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter7.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter7.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter7.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter7.subject}" />
						</filterTests>
						<filterActions>
							 <actionReply>
           						 <content>Message received.</content>
            				</actionReply>
							<actionDiscard />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
    
    

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter7.subject}</su>
					<mp ct="text/plain">
	    				<content>Hello world</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter7.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Re: ${filter7.subject}"/>
			</t:response>
    </t:test>
	
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>

	 <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter7.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" emptyset="1"/>
			</t:response>
    </t:test>
	
 </t:test_case>




<t:test_case testcaseid="FilterActionNotify_01" type="smoke" bugids="18288">
    <t:objective>Verify Filter Action Notify</t:objective>
    <t:steps> 1. Create filter with Action Notify set some different notification subject reply message body with meta data from incoming mail.
    2. verify Notification message delivered to sender with customisation made.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter2.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter2.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="notify.subject" value="Thanks $\{from} $\{SUBJECT}"/>
	<t:property name="notify.body" value="Dear $\{from} with subject $\{SUBJECT} and body $\{BODY}"/>
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter2.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter2.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${notify.subject}">
           						 <content>${notify.body}</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter2.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Morning</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter2.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Thanks ${account2.name} ${filter2.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="Dear ${account2.name} with subject ${filter2.subject} and body Good Morning"/>
			</t:response>
    </t:test>
 </t:test_case>

<t:test_case testcaseid="FilterActionNotify_02" type="smoke" bugids="18288" >
    <t:objective>Verify Filter Action Notify to third user</t:objective>
    <t:steps> 
    1. login to user1 Create filter with Action Notify set some notification address say user2.
    2. Send mail from foo@foo.com matching filter criteria.
    3. verify user2 gets notification.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter3.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="test3.subject" value="test${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter3.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="From" stringComparison="contains" value="foo@foo.com" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${test3.subject}">
           						 <content>bye</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt" />
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
		
	<t:smtpinjecttest>
		<t:smtpInjectRequest>
			<address>${mta.server}</address>
			<filename>${msg01.file}</filename>
			<recipient>${account1.name}</recipient>
		</t:smtpInjectRequest>
	</t:smtpinjecttest>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${test3.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${test3.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="bye"/>
			</t:response>
    </t:test>
 </t:test_case>

<t:test_case testcaseid="FilterActionNotify_03" type="functional" bugids="57890">
    <t:objective>Verify Filter Action Notify to multiple user2</t:objective>
    <t:steps> 1. Create filter with Action Notify set 2 email addresses for notification mail.
    2. verify Notification message delivered to both sender.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter4.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter4.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter4.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter4.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${filter4.subject}" >
           						 <content>reply</content>
           					 </actionNotify>
           					 <actionNotify a="${account3.name}" su="${filter4.subject}">
           						 <content>replied</content>
           					 </actionNotify>
  						
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter4.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Night</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter4.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="reply"/>
			</t:response>
    </t:test>
	<t:property name="server.zimbraAccount" value="${account3.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter4.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="replied"/>
			</t:response>
    </t:test>
 </t:test_case>
<t:test_case testcaseid="FilterActionNotify_04" type="functional" bugids="58383">
    <t:objective>Verify Filter Action Notify</t:objective>
    <t:steps> 1. Create filter with Action Notify set notification mail subject and body from original received.
    2. Send mail with multi-byte characters subject
    2. verify Notification message delivered to sender with customisation made rendered properly .
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter6.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter6.subject" value="配偶者 kon"/>	
	<t:property name="filter6.body" value="body${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter6.name}" active="1">
						<filterTests condition="anyof">
							<bodyTest value="${filter6.body}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="Thanks \$\{SUBJECT\}">
           						 <content>Received mail subject $\{SUBJECT}</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<su>${filter6.subject}</su>
					<mp ct="text/plain">
	    				<content>${filter6.body}</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${filter6.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Thanks ${filter6.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="Received mail subject ${filter6.subject}"/>
			</t:response>
    </t:test>
 </t:test_case>


<t:test_case testcaseid="FilterActionNotify_05" type="smoke" bugids="60848" >
    <t:objective>Verify Filter Action Notify follows implicit keep.</t:objective>
    <t:steps> 
    1. login to user1 Create filter with Action Notify set some notification address say user2.
    2. Send mail from foo@foo.com matching filter criteria.
    8. verify user2 gets notification.
	4. verify user1 has the copy of original received mail
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account4.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter8.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="test8.subject" value="test${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter8.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="From" stringComparison="contains" value="foo@foo.com" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${test8.subject}">
           						 <content>bye</content>
           					 </actionNotify>
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt" />
	<t:property name="server.zimbraAccount" value="${account4.server}"/>
		
	<t:smtpinjecttest>
		<t:smtpInjectRequest>
			<address>${mta.server}</address>
			<filename>${msg01.file}</filename>
			<recipient>${account4.name}</recipient>
		</t:smtpInjectRequest>
	</t:smtpinjecttest>
	<t:waitforpostfixqueue></t:waitforpostfixqueue>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${test8.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account4.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${test8.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="bye"/>
			</t:response>
    </t:test>
    
	
	<t:property name="server.zimbraAccount" value="${account4.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>from: foo@foo.com</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"/>
			</t:response>
    </t:test>
	
	
 </t:test_case>
 
 <t:test_case testcaseid="FilterActionNotify_06" type="smoke" bugids="60949" >
    <t:objective>Verify Filter Action Notify: Action discard overrides implicit keep.</t:objective>
    <t:steps> 
    1. login to user1 Create filter with Action Notify and action discard set some notification address say user2.
    2. Send mail from foo@foo.com matching filter criteria. 
    9. verify user2 gets notification.
	4. verify user1 has not the copy of original received mail
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account5.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter9.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="test9.subject" value="test${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter9.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="From" stringComparison="contains" value="foo@foo.com" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${test9.subject}">
           						 <content>bye</content>
           					 </actionNotify>
  							<actionDiscard />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="msg01.file" value="${testMailRaw.root}/email01/msg01.txt" />
	<t:property name="server.zimbraAccount" value="${account5.server}"/>
		
	<t:smtpinjecttest>
		<t:smtpInjectRequest>
			<address>${mta.server}</address>
			<filename>${msg01.file}</filename>
			<recipient>${account5.name}</recipient>
		</t:smtpInjectRequest>
	</t:smtpinjecttest>
	<t:waitforpostfixqueue></t:waitforpostfixqueue>
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox "${test9.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:e" attr="a" match="${account5.name}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:su" match="${test9.subject}"/>
				<t:select path="//mail:SearchResponse/mail:m/mail:fr" match="bye"/>
			</t:response>
    </t:test>
	
	<t:property name="server.zimbraAccount" value="${account5.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>from: foo@foo.com</query>
				</SearchRequest>
			</t:request>
	        <t:response>
				<t:select path="//mail:SearchResponse/mail:m/mail:su"  emptyset="1"/>
			</t:response>
    </t:test>
	
	
 </t:test_case>
 
  
 <t:test_case testcaseid="FilterActionNotifyOrigHeaders_01" type="smoke" bugids="61199">
    <t:objective>Verify Filter Action Notify copy the Headers mentioned in origHeaders</t:objective>
    
    <t:steps>
    	1. Login to account1
     	2. Create a filter with Action Notify to copy From, Subject, Cc headers from incoming mail and send the notification to account2.
    	3. Account2 sends a email to account1
    	4. Verify that account2 received notification with Form, Cc and Subject from original email
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter7.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter7.subject" value="filter${TIME}${COUNTER}"/>
		
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter7.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter7.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}"  origHeaders="From,Subject,Cc">
           						  <content>Notification</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<e t="c" a='${account3.name}'/>
					<su>${filter7.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Morning</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>in:inbox "${filter7.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg.id"/>
			</t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            	<t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${msg.id}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account2.name}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account3.name}"/>					
				<t:select path="//mail:GetMsgResponse/mail:m/mail:su" match="${filter7.subject}"/>
        </t:response>
    </t:test>   
   
 </t:test_case>
 
 <t:test_case testcaseid="FilterActionNotifyOrigHeaders_02" type="smoke" bugids="61199">
    <t:objective>Verify Filter Action Notify copy the Headers mentioned in origHeaders and default from header if the from header is not mentioned in origHeaders</t:objective>
    
    <t:steps>
    	1. Login to account1
     	2. Create a filter with Action Notify to copy  Subject, Cc, Message-Id headers from incoming mail and send the notification to account2.
    	3. Account2 sends a email to account1
    	4. Verify that account2 received notification with Cc,Subject and Message-id from original email and From is accoun1 instead of original sender(account2)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter8.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter8.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter8.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter8.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" origHeaders="Subject,Cc,Message-ID">
           						  <content>Notification</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<e t="c" a='${account3.name}'/>
					<su>${filter8.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Morning</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
    <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">					
				<query>in:inbox "${filter8.subject}"</query>
			</SearchRequest>
		</t:request>
        <t:response>			
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="account2_msg.id"/>
		</t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${account2_msg.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            	<t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${account2_msg.id}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account3.name}"/>
				<t:select path="//mail:GetMsgResponse/mail:m/mail:su" match="${filter8.subject}"/>
        </t:response>
    </t:test>    
   
 </t:test_case>
 
 
 
 <t:test_case testcaseid="FilterActionNotifyOrigHeaders_03" type="smoke" bugids="61199">
   <t:objective>Verify Filter Action Notify copy the Headers mentioned in origHeaders and default from header, mentioned subject header if the from, subject headers are not mentioned in origHeaders</t:objective>
    
    <t:steps>
    	1. Login to account1
     	2. Create a filter with Action Notify to copy  Cc, Message-Id headers from incoming mail with mentioned subject and  send the notification to account2.
    	3. Account2 sends a email to account1
    	4. Verify that account2 received notification with Cc from original email and From is accoun1 instead of original sender(account2) with mentioned subject
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter9.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter9.subject" value="filter${TIME}${COUNTER}"/>	
	<t:property name="notify.subject" value="Notification subject"/>
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter9.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter9.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" su="${notify.subject}" origHeaders="Cc,Message-ID">
           						  <content>Notification</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<e t="c" a='${account3.name}'/>
					<su>${filter9.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Morning</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>

     <t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">					
					<query>in:inbox "${notify.subject}"</query>
				</SearchRequest>
			</t:request>
	        <t:response>			
				<t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg.id"/>
			</t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${msg.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            	<t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${msg.id}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account1.name}"/>
            	<t:select path="//mail:GetMsgResponse/mail:m/mail:e" attr="a" match="${account3.name}"/>					
				<t:select path="//mail:GetMsgResponse/mail:m/mail:su" match="${notify.subject}"/>
        </t:response>
    </t:test>   
   
 </t:test_case>
 
  <t:test_case testcaseid="FilterActionNotifyOrigHeaders_04" type="smoke" bugids="64839">
    <t:objective>Verify Filter Action Notify copy all the headers from the original message when origHeaders is set to *</t:objective>
    
    <t:steps>
    	1. Login to account1
     	2. Create a filter with Action Notify with origHeaders="*" and send the notification to account2.
    	3. Account2 sends a email to account1
    	4. Verify that account2 received notification with all the headers from original message and From is also accoun2 instead of sender(account1)
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:property name="filter8.name" value="filter${TIME}${COUNTER}"/>
	<t:property name="filter8.subject" value="filter${TIME}${COUNTER}"/>	
	
	<t:test>
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
					<filterRule name="${filter8.name}" active="1">
						<filterTests condition="anyof">
							<headerTest header="Subject" stringComparison="contains" value="${filter8.subject}" />
						</filterTests>
						<filterActions>
							  <actionNotify a="${account2.name}" origHeaders="*">
           						  <content>Notification</content>
           					 </actionNotify>
           					 <actionKeep />
  						<actionStop />
						</filterActions>
					</filterRule>                                  
				</filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
        
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
     </t:test>
    
    <t:test >
 		<t:request>
    		<SendMsgRequest xmlns="urn:zimbraMail">
      			<m>
					<e t="t" a='${account1.name}'/>
					<e t="c" a='${account3.name}'/>
					<su>${filter8.subject}</su>
					<mp ct="text/plain">
	    				<content>Good Morning</content>
					</mp>
    			 </m>
    		</SendMsgRequest>
  		</t:request>
  		<t:response>
        	<t:select path="//mail:SendMsgResponse"/>
   		</t:response>
	</t:test>
	
	<t:waitforpostfixqueue/>
		
    <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">					
				<query>in:inbox "${filter8.subject}"</query>
			</SearchRequest>
		</t:request>
        <t:response>			
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="account2_msg.id"/>
		</t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${account2_msg.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
            	<t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${account2_msg.id}"/>
            	<t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="f"]' attr="a" match="${account2.name}"/>
            	<t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="c"]' attr="a" match="${account3.name}"/>
				<t:select path="//mail:GetMsgResponse/mail:m/mail:su" match="${filter8.subject}"/>
        </t:response>
    </t:test>    
   
 </t:test_case>
 
  
</t:tests>


