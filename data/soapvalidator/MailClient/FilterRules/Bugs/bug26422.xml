<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="fileinto.${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.viewer"		value="${rights.read}"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>

<t:property name="message1.file" value="${testMailRaw.root}/email01/msg01.txt"/>
<t:property name="message1.subject" value="email01A"/>
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>


<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="AcctSetup1_filters_basic" type="always" >
    <t:objective> Create test account and login to first account </t:objective>

	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="FiltersFileintoSharedFolder_01" type="smoke">
    <t:objective>Create Rule with action as "fileinto" a shared folder and verify searches work</t:objective>
    <t:steps>
    	1. Login to account1 and Share a folder with account2
    	2. Account2 mounts the folder    	
    	3. Create a filter such that mails with a specific subject is filed in to shared folder
    	4. Inject a message matching the subject and Search the shared folder for the email 
    	5. Login to account1 and again verify if the email is there in the folder which was shared.
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
 
    <t:test required="true">
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account1.folder.inbox.id"/>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="folder.root"/>
        </t:response>
    </t:test>

    <t:test id="CreateFolderRequest1a" >
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder1.name}" l="${folder.root}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
	</t:test>
	
	<!-- Share the folder with account2 -->
	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action id="${folder1.id}" op="grant">
                    <grant d="${account2.name}" gt="usr" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
	
	
	<!-- Login to Account2 -->
	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
	
	<!-- Mount the folder -->
	 <t:test>
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="1" name="account1's folder ${COUNTER}"  rid="${folder1.id}" zid="${account1.id}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="mount1.id"/>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="mount1.name"/>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
             <GetFolderRequest xmlns = "urn:zimbraMail">
			    <!--  <folder path="${mount1.id}"/> -->
			 </GetFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse">
            	       <t:select path="//mail:link[@id='${mount1.id}']"/>
          	</t:select>
        </t:response>
    </t:test>
	
	
	<!-- Create the filter with the subject match and file it in to the mounted folder -->
	<t:test id ="modifyFilterRule1">
		<t:request>
			<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
				<filterRules>
						<filterRule name="modFil1"  active ="1">
							<filterActions>
								<actionFileInto folderPath="${mount1.name}" />
								<actionStop>									
								</actionStop>
							</filterActions>
							<filterTests condition = "allof" >
									<headerTest header="subject" stringComparison="contains" value ="${message1.subject}" />
							</filterTests>						
						</filterRule>		
				</filterRules>
			</ModifyFilterRulesRequest>
		</t:request>
		<t:response>
			<t:select path = "//mail:ModifyFilterRulesResponse"/>	
		</t:response>		
	</t:test>
	
	<!-- Get the rules -->
    <t:test>
        <t:request>
            <GetFilterRulesRequest xmlns="urn:zimbraMail"/>
	 </t:request>
	 <t:response>
            <t:select path="//mail:GetFilterRulesResponse"/>
        </t:response>
    </t:test>

	<!-- Send the message to account 2 from account1 -->
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message1.file}</filename>
			<to>${account2.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account2.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>
       
    <!-- Search the folder from account2 -->   
    <t:test id="filters_basic01">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>${message1.subject}(inid:${mount1.id})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[@l='${account1.id}:${mount1.id}']" >	            
	            <t:select path="//mail:e" attr="a" match="foo@foo.com"/>
            </t:select>
        </t:response>
    </t:test>
    
    <!-- Login to account1 and again do a search -->
    	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <!-- Search the folder in account1 which was shared -->
	<t:test id="filters_basic02">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>${message1.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" >	            
	            <t:select path="//mail:e" attr="a" match="foo@foo.com"/>
            </t:select>
        </t:response>
    </t:test>

    
</t:test_case>

</t:tests>

