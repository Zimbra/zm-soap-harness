<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="acctHotmailImport.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.datasource1.name" value="datasource${TIME}${COUNTER}"/>
<t:property name="account1.folder1.name" value="folder${TIME}${COUNTER}"/>

<t:property name="POP3.Hotmail.defaultMailSubject" value="subject.*"/>
<t:property name="POP3.Hotmail.hostname" value="pop3.live.com"/>
<t:property name="POP3.Hotmail.port" value="995"/>
<t:property name="POP3.Hotmail.username" value="zimbratest@hotmail.com"/>
<t:property name="POP3.Hotmail.password" value="test1234"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>Basic system check</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
	
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="PopImportHotmail_CreateAccount" type="always" >
    <t:objective>Create a test account </t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account/admin:a[@n='zimbraMailHost']"  set="account1.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="PopImport_Hotmail_01" type="smoke" >
    <t:objective>Import a Hotmail POP account into a zimbra account - messages</t:objective>
	<t:steps>
	1. Login as account1
    2. Test the datasource 
	4. Create a new data source (configure hotmail pop account) 
	5. Import data
	6. Verify messages appear correctly
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>              
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="inboxFolder.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account1.folder1.name}" l="${inboxFolder.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse">
            	<t:select path="//mail:folder" attr="id" set="account1.folder1.id"/>
        	</t:select>
        </t:response>
	</t:test>

    
    <t:test>
        <t:request>
            <TestDataSourceRequest xmlns="urn:zimbraMail">
                <pop3 host="${POP3.Hotmail.hostname}" port="${POP3.Hotmail.port}" username="${POP3.Hotmail.username}" password="${POP3.Hotmail.password}" connectionType="ssl"/>
            </TestDataSourceRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:TestDataSourceResponse"/>
            <t:select path="//mail:TestDataSourceResponse/mail:pop3" attr="success" match="1" />
        </t:response>
	</t:test>


    <t:test>
        <t:request>
			<CreateDataSourceRequest xmlns="urn:zimbraMail">
				<pop3 name="${POP3.Hotmail.username}" isEnabled="true" 
					emailAddress="${POP3.Hotmail.username}" host="${POP3.Hotmail.hostname}" 
					port="${POP3.Hotmail.port}" username="${POP3.Hotmail.username}" password="${POP3.Hotmail.password}"
					l="${account1.folder1.id}" connectionType="ssl" pollingInterval="0" 
					leaveOnServer="true" fromAddress="${account1.name}"/>
			 </CreateDataSourceRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:CreateDataSourceResponse">
            	<t:select path="mail:pop3" attr="id" set="datasource1.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
			<ImportDataRequest xmlns="urn:zimbraMail">
				<pop3 id="${datasource1.id}"/>
			</ImportDataRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:ImportDataResponse"/>
        </t:response>
    </t:test>

	<!-- Bug 51335 ImportDataRequest is now asynchronous so added loop to query till mails get imported. -->
	<t:for start="1" end="30" break="response">
		<t:delay msec="2000"/>
		<t:test >
        	<t:request>
				<GetImportStatusRequest xmlns="urn:zimbraMail">
				</GetImportStatusRequest>
        	</t:request>
        	<t:response>              
            	<t:select path="//mail:GetImportStatusResponse/mail:pop3[@isRunning='0']"  query="response"/>
           	</t:response>
    	</t:test>
	</t:for>

	<t:delay sec="60"/>
	
    <t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
				<query>subject:${POP3.Hotmail.defaultMailSubject}</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse">
           	<t:select path="//mail:m/mail:su" match="${POP3.Hotmail.defaultMailSubject}"/>
			</t:select>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="PopImport_Hotmail_02" type="smoke" >
    <t:objective> Verify different types of mail got imported properly</t:objective>

	<!-- Search for mail with 3 JPEG attachments -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
				<query>attachment:"image/jpeg"</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Mail with 3 JPEG attachement"/>
        </t:response>
    </t:test>


	<!-- Search for mail with vcard attachment -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
				<query>attachment:"text/directory"</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Mail with vcard file attached"/>
           	<t:select path="//mail:m/mail:mp/mail:mp" attr="filename" match="Troy_Wolf.vcf"/>
           	<t:select path="//mail:m/mail:mp/mail:mp" attr="cd" match="attachment"/>
        </t:response>
    </t:test>

	<!-- Search for meeting invitation -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1" >
				<query>subject:(monday)</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Monday weekly recur meet"/>
        </t:response>
    </t:test>

	<!-- Search for flagged mail. As per bug:31235, pop doesn't support flag mail-->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
				<query>is:flagged</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Test mail with Flag" emptyset="1"/>
        </t:response>
    </t:test>

	<!-- Search for html mail -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
				<query>attachment:"text/html"</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>

	<!-- Search for inline attachment mail -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
				<query>subject:(inline)</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Mail with Inline attachment"/>
           	<t:select path="//mail:m/mail:mp/mail:mp" attr="ct" match="multipart/related"/>
        </t:response>
    </t:test>

	<!-- Search for message with large content -->
	<t:test>
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1" >
				<query>larger:400kb smaller:1mb</query>
			</SearchRequest>
        </t:request>
        <t:response>              
            <t:select path="//mail:SearchResponse"/>
           	<t:select path="//mail:m/mail:su" match="Mail with large message content"/>
           	<t:select path="//mail:m/mail:mp" attr="s" match="^7[0-9][0-9][0-9][0-9][0-9]$"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>