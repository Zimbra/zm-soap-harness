<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="uri" value="${admin.uri}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
</t:test_case>

<t:test_case testcaseid="im_acct_setup" type="deprecated" >
    <t:objective>Set up test accounts</t:objective>
    <t:steps>
    1. create test accounts
    2. Add test accounts to each others' buddy list
    </t:steps>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_accountid1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="test_accountid2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>


	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>

	 <t:test required = "true">
        <t:request>
            <AuthRequest xmlns = "urn:zimbraAccount">
                <account by = "name">${test_account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path = "//acct:AuthResponse/acct:authToken" set = "authToken"/>

        </t:response>
    </t:test>
	
	<t:property name="authToken_acct1" value="${authToken}"/>

	<!-- Establish a session for this account -->
	<t:test required="true">
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <session/>
        </t:requestContext>
        <t:request>
            <NoOpRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:NoOpResponse"/>
        </t:response>
    </t:test>
    
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
    <t:test required = "true">
        <t:request>
            <AuthRequest xmlns = "urn:zimbraAccount">
                <account by = "name">${test_account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path = "//acct:AuthResponse/acct:authToken" set = "authToken"/>

        </t:response>
    </t:test>
    
	<t:property name="authToken_acct2" value="${authToken}"/>

	<!-- Establish a session for this account -->
	<t:test required="true">
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <session/>
        </t:requestContext>
        <t:request>
            <NoOpRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:NoOpResponse"/>
        </t:response>
    </t:test>
    
	
	<t:test>
		<t:request>
			<IMGatewayListRequest xmlns="urn:zimbraIM"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMGatewayListResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>

	<t:test>
		<t:request>
			<IMSubscribeRequest xmlns="urn:zimbraIM" addr="${test_account2.name}" name="account2" op="add"/>
		</t:request>
		<t:response>
            <t:select path="//im:IMSubscribeResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="authToken" value="${authToken_acct2}"/>

	<t:for start="1" end="60" break="response">
	
		<t:delay msec="1000"/>
	
		<t:test >
			<t:request>
				<NoOpRequest xmlns="urn:zimbraMail" />
			</t:request>
			<t:response>
				<t:header path="//zimbra:notify">
					<t:header path="//zimbra:n[@type='subscribe']" attr="from" match="${test_account1.name}" query="response"/>
				</t:header>
			</t:response>
		</t:test>

	</t:for>

	<t:test>
		<t:request>
			<IMAuthorizeSubscribeRequest xmlns="urn:zimbraIM" addr="${test_account1.name}" authorized="true" add="true" name="account1"/>
		</t:request>
		<t:response>
			<t:request path="//im:IMAuthorizeSubscribeResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>

	<t:for start="1" end="60" break="response">
	
		<t:delay msec="1000"/>
	
		<t:test >
			<t:request>
				<NoOpRequest xmlns="urn:zimbraMail" />
			</t:request>
			<t:response>
				<t:header path="//zimbra:notify">
					<t:header path="//zimbra:n[@type='subscribed']" attr="to" match="${test_account2.name}" query="response"/>
				</t:header>
			</t:response>
		</t:test>

	</t:for>


	<t:test>
		<t:request>
			<IMAuthorizeSubscribeRequest xmlns="urn:zimbraIM" addr="${test_account2.name}" authorized="true"/>
		</t:request>
		<t:response>
			<t:select path="//im:IMAuthorizeSubscribeResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="authToken" value="${authToken_acct2}"/>

	<t:for start="1" end="60" break="response">
	
		<t:delay msec="1000"/>
	
		<t:test >
			<t:request>
				<NoOpRequest xmlns="urn:zimbraMail" />
			</t:request>
			<t:response>
				<t:header path="//zimbra:notify">
					<t:header path="//zimbra:n[@type='subscribed']" attr="to" match="${test_account1.name}" query="response"/>
				</t:header>
			</t:response>
		</t:test>

	</t:for>

	
</t:test_case>

<t:test_case testcaseid="im_block01" type="deprecated">
    <t:objective> Block a buddy </t:objective>
	<t:steps>
		1. Block the buddy added
		2. Send a message from the blocked buddy
		3. Wait for 30 seconds, check that the message is not received
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>


	<t:test>
		<t:request>
			<IMSetPrivacyListRequest xmlns="urn:zimbraIM">
				<list name="default">
					<item action="deny" order="1" addr="${test_account2.name}"/>
				</list>
			</IMSetPrivacyListRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSetPrivacyListResponse"/>
		</t:response>
	</t:test>
	
	<t:property name="message.body" value="TestBody${TIME}${COUNTER}"/>
	<t:test>
		<t:request>
			<IMSendMessageRequest xmlns="urn:zimbraIM">
				<message addr="${test_account2.name}">
					<body>${message.body}</body>
				</message>
			</IMSendMessageRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSendMessageResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="authToken" value="${authToken_acct2}"/>


	
	<t:delay msec="30000"/>
	<t:test >
		<t:request>
			<NoOpRequest xmlns="urn:zimbraMail" />
		</t:request>
		<t:response>
			<t:header path="//zimbra:notify">
				<t:header path="//zimbra:n[@type='message']" >
					<t:header path="//zimbra:body" match="${message.body}"/>
				</t:header>
			</t:header>
		</t:response>
	</t:test>

</t:test_case>

<t:test_case testcaseid="im_block02" type="deprecated">
    <t:objective> Send message to blocked buddy </t:objective>
	<t:steps>
		1. Send a message to blocked buddy
		2. Message should be able to send and the blocked user should receive it
	</t:steps>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>


	<t:test>
		<t:request>
			<IMSetPrivacyListRequest xmlns="urn:zimbraIM">
				<list name="default">
					<item action="deny" order="1" addr="${test_account2.name}"/>
				</list>
			</IMSetPrivacyListRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSetPrivacyListResponse"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="authToken" value="${authToken_acct2}"/>


	<t:property name="message.body" value="TestBody${TIME}${COUNTER}"/>
	<t:test>
		<t:request>
			<IMSendMessageRequest xmlns="urn:zimbraIM">
				<message addr="${test_account1.name}">
					<body>${message.body}</body>
				</message>
			</IMSendMessageRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSendMessageResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>

	
	<t:delay msec="30000"/>
	<t:test >
		<t:request>
			<NoOpRequest xmlns="urn:zimbraMail" />
		</t:request>
		<t:response>
			<t:header path="//zimbra:notify">
				<t:header path="//zimbra:n[@type='message']" emptyset="1"/>
			</t:header>
		</t:response>
	</t:test>

	
</t:test_case>

<t:test_case testcaseid="im_block03" type="deprecated">
    <t:objective> Un-Block a buddy </t:objective>
	<t:steps>
		1. Un-block the blocked buddy 
		2. Send a message from the un-blocked buddy
		3. Check that the message is received
	</t:steps>
	
	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>


	<t:test>
		<t:request>
			<IMSetPrivacyListRequest xmlns="urn:zimbraIM">
				<list name="default">
					<item action="deny" order="1" addr="${test_account2.name}"/>
				</list>
			</IMSetPrivacyListRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSetPrivacyListResponse"/>
		</t:response>
	</t:test>
	
	<t:test>
		<t:request>
			<IMSetPrivacyListRequest xmlns="urn:zimbraIM">
				<list name="default">
					<item action="allow" order="1" addr="${test_account2.name}"/>
				</list>
			</IMSetPrivacyListRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSetPrivacyListResponse"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
	<t:property name="authToken" value="${authToken_acct2}"/>


	<t:property name="message.body" value="TestBody${TIME}${COUNTER}"/>
	<t:test>
		<t:request>
			<IMSendMessageRequest xmlns="urn:zimbraIM">
				<message addr="${test_account1.name}">
					<body>${message.body}</body>
				</message>
			</IMSendMessageRequest>
		</t:request>
		<t:response>
			<t:select path="//im:IMSendMessageResponse"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
	<t:property name="authToken" value="${authToken_acct1}"/>


	<t:for start="1" end="60" break="response">
	
		<t:delay msec="1000"/>
	
		<t:test >
			<t:request>
				<NoOpRequest xmlns="urn:zimbraMail" />
			</t:request>
			<t:response>
				<t:header path="//zimbra:notify">
					<t:header path="//zimbra:n[@type='message']" attr="thread" set="chat.id" query="response">
						<t:header path="//zimbra:body" match="${message.body}"/>
					</t:header>
				</t:header>
			</t:response>
		</t:test>

	</t:for>


	<t:test>
		<t:request>
			<IMGetChatRequest xmlns="urn:zimbraIM" thread="${chat.id}" />
		</t:request>
		<t:response>
			<t:select path="//im:IMGetChatResponse">
				<t:select path="//im:body" match="${message.body}"/>
			</t:select>
		</t:response>
	</t:test>

</t:test_case>

</t:tests>