<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account4.name" value="test4.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account5.name" value="test5.${TIME}.${COUNTER}@${defaultdomain.name}" />
<t:property name="test_account6.name" value="test6.${TIME}.${COUNTER}@${defaultdomain.name}" />

<t:property name="folder_inbox" value="Inbox" />
<t:property name="msg01.file" value="${testMailRaw.root}/zcs-861/msg01.txt" />
<t:property name="mime01.file" value="${testMailRaw.root}/zcs-2520/mime01.txt" />
<t:property name="backslash.file" value="${testMailRaw.root}/zcs-2212/backslash.txt" />
<t:property name="dollar" value="$"/>

<t:property name="sieve_rule1" value='require ["tag", "editheader"];
	replaceheader :newname "X-New-Header" :newvalue "new value" "X-Test-Header-1" "Val1";
	replaceheader :newname "X-New-Header" :newvalue "new value" "X-Test-Header-2" "ValABC";
	deleteheader "X-Test-Header-3" "Val3";
	deleteheader "X-Test-Header-4" "Val3";
	deleteheader :is "X-Test-Header-5" "Val5";
'/>

<t:property name="sieve_rule2" value='require ["tag", "variables"];
	set "var_one" "text";
	if string :comparator "i;ascii-casemap" "${dollar}{var_one}" "text" {tag "istag";}
'/>

<t:property name="sieve_rule3" value='require ["tag", "variables"];
    set "var_one" "sieve test";
 	if header "subject" "${dollar}{var_one}" {tag "tag1";}
'/>	

<t:property name="sieve_rule4" value='require ["editheader", "variables"];
if header :matches "To" "test4.*@${defaultdomain.name}" {
	if header :matches "Subject" "*" {
		addheader "X-Header" "${dollar}{1}";}
}
' />

<t:property name="sieve_rule5" value='require ["editheader", "variables"];
if header :matches "To" "test5.*@${defaultdomain.name}" {
	if header :matches "Subject" "*" {
		replaceheader :newvalue "[meiwaku!!! meiwaku!!!]${dollar}{1}" :matches "Subject" "*";}
}
' />

<t:property name="sieve_rule6" value='require ["editheader", "variables"];
replaceheader :newvalue "[backslash 1]" :matches "X-Header1" "sample\\\\pattern";
replaceheader :newvalue "[backslash 2]" :matches "X-Header2" "sample\\\\\\\\pattern";
replaceheader :newvalue "[backslash 3]" :matches "X-Header3" "sample\\\\\\\\\\\\pattern";
replaceheader :newvalue "[backslash 4]" :matches "X-Header4" "sample\\\\\\\\\\\\\\\\pattern";
replaceheader :newvalue "[backslash 5]" :matches "X-Header5" "sample\\\\\\\\\\\\\\\\\\\\pattern";
replaceheader :newvalue "[backslash X]" :matches "X-HeaderX" "sample\\\\\\\\\\\\\\\\\\\\pattern";
deleteheader :matches "X-HeaderA" "sample\\\\pattern";
deleteheader :matches "X-HeaderB" "sample\\\\\\\\pattern";
deleteheader :matches "X-HeaderC" "sample\\\\\\\\\\\\pattern";
deleteheader :matches "X-HeaderD" "sample\\\\\\\\\\\\\\\\pattern";
deleteheader :matches "X-HeaderE" "sample\\\\\\\\\\\\\\\\\\\\pattern";
deleteheader :matches "X-HeaderZ" "sample\\\\\\\\\\\\\\\\\\\\pattern";
' />

    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup1_create_account" type="always">
        <t:objective>create test accounts</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

		<t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account1.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptAfter">${sieve_rule1}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account1.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account2.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptAfter">${sieve_rule2}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account2.server" />
            </t:response>
        </t:test>
        
        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account3.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptAfter">${sieve_rule3}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account3.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account4.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule4}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account4.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account5.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule5}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account5.server" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${test_account6.name}</name>
                    <password>${defaultpassword.value}</password>
                    <a n="zimbraAdminSieveScriptBefore">${sieve_rule6}</a>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_account6.server" />
            </t:response>
        </t:test>
     </t:test_case>

     <t:test_case testcaseid="zcs-861_rule1" type="smoke" bugids="zcs-861">
        <t:objective>Verify replace and deleteheader works without specifying :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>
     

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${msg01.file}</filename>
                <to>${test_account1.name}</to>
                <from>${admin.user}</from>
                <server>${test_account1.server}</server>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="Sieve Test" />
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg1.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-New-Header" match="new value" />
                <t:select attr="X-Test-Header-3" emptyset="1" />
                <t:select attr="X-Test-Header-2" match="NoMatch" />
                <t:select attr="X-Test-Header-4" match="NoMatch" />
                <t:select attr="X-Test-Header-5" emptyset="1" />
            </t:restServletResponse>
        </t:resttest>
    </t:test_case>

     <t:test_case testcaseid="zcs-861_rule2" type="smoke" bugids="zcs-861">
        <t:objective>Verify string works without specifying :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>


        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account2.name}" />
                        <su>sieve test</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account2.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="istag" />
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="sieve test" />
            </t:response>
        </t:test>
        
    </t:test_case>    
    
  	 <t:test_case testcaseid="zcs-861_rule3" type="smoke" bugids="zcs-861">
        <t:objective>Verify envelop works without specifying :is</t:objective>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account3.name}" />
                        <su>sieve test</su>
                        <mp ct="text/plain">
                            <content>Hello</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account3.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="tn" match="tag1"/>
                <t:select path="//mail:SearchResponse/mail:m" attr="su" match="sieve test" />
            </t:response>
        </t:test>

    </t:test_case>

    <t:test_case testcaseid="ZCS-2520_rule4" type="smoke" bugids="ZCS-2520">
        <t:objective>Verify performing addheader to the header with encoded line-breaks</t:objective>
        <t:steps>
            1. applied addheader action to account4
            2. inject message that contains new line break to account4
            3. auth with account4
            4. find and verify email headers
        </t:steps>
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${mime01.file}</filename>
                <to>${test_account4.name}</to>
                <from>${test_account.name}</from>
                <server>${test_account4.server}</server>
                <modify>
                    <header a="To">${test_account4.name}</header>
                </modify>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account4.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message"
                    fetch="1">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="id"
                    set="msg_rule4.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg_rule4.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Header" match="=\?utf-8\?B\?bGluZSAxCmhlYWRlcjogbGluZTIKDQpsaW5lIDQK\?=" />
                <t:select attr="Subject" match="=\?utf-8\?B\?bGluZSAxCmhlYWRlcjogbGluZTIKDQpsaW5lIDQK\?=" />
            </t:restServletResponse>
        </t:resttest>
    </t:test_case>

    <t:test_case testcaseid="ZCS-2520_rule5" type="smoke" bugids="ZCS-2520">
        <t:objective>Verify performing replaceheader to the header with encoded line-breaks</t:objective>
        <t:steps>
            1. applied replaceheader action to account5
            2. inject message that contains new line break to account5
            3. auth with account5
            4. find and verify email headers
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${mime01.file}</filename>
                <to>${test_account5.name}</to>
                <from>${test_account.name}</from>
                <server>${test_account5.server}</server>
                <modify>
                    <header a="To">${test_account5.name}</header>
                </modify>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account5.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message"
                    fetch="1">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="id"
                    set="msg_rule5.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg_rule5.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="Subject" match="(?s)=\?utf-8\?B\?W21laXdha3UhISEgbWVpd2FrdSEhIV1saW4=\?=.*=\?utf-8\?B\?ZSAxCmhlYWRlcjogbGluZTIKDQpsaW5lIDQK\?=" />
            </t:restServletResponse>
        </t:resttest>
    </t:test_case>

    <t:test_case testcaseid="ZCS-2212_rule6" type="smoke" bugids="ZCS-2212">
        <t:objective>Verify performing replaceheader who matches backslashes </t:objective>
        <t:steps>
            1. applied replaceheader action to account6
            2. inject message that contains single and multiple backslashes to account6
            3. auth with account6
            4. find and verify email headers
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:mailinjecttest>
            <t:lmtpInjectRequest>
                <filename>${backslash.file}</filename>
                <to>${test_account6.name}</to>
                <from>${test_account.name}</from>
                <server>${test_account6.server}</server>
                <modify>
                    <header a="To">${test_account6.name}</header>
                </modify>
            </t:lmtpInjectRequest>
        </t:mailinjecttest>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${test_account6.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="message" fetch="1">
                    <query>in:${folder_inbox}</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:m" attr="id" set="msg_backslash.id" />
            </t:response>
        </t:test>

        <t:resttest>
            <t:restServletRequest>
                <id>${msg_backslash.id}</id>
            </t:restServletRequest>
            <t:restServletResponse>
                <t:select attr="X-Header1" contains="[backslash 1]" />
                <t:select attr="X-Header2" contains="[backslash 2]" />
                <t:select attr="X-Header3" contains="[backslash 3]" />
                <t:select attr="X-Header4" contains="[backslash 4]" />
                <t:select attr="X-Header5" contains="[backslash 5]" />
                <t:select attr="X-HeaderX" match="Sample\\\\\\\\\\\\\\\\\\\\Pattern" />
                <t:select attr="X-HeaderA" emptyset="1" />
                <t:select attr="X-HeaderB" emptyset="1" />
                <t:select attr="X-HeaderC" emptyset="1" />
                <t:select attr="X-HeaderD" emptyset="1" />
                <t:select attr="X-HeaderE" emptyset="1" />
                <t:select attr="X-HeaderZ" match="Sample\\\\\\\\\\\\\\\\\\\\Pattern" />
            </t:restServletResponse>
        </t:resttest>
    </t:test_case>

    <t:finally type="always">
        <t:objective>reset cosconfig to default </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally>
</t:tests>
