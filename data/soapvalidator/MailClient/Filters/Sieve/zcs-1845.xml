<t:tests xmlns:t="urn:zimbraTestHarness">
<!-- Test accounts declaration -->
<t:property name="account1.name"
		value="test1_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account2.name"
		value="test2_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account3.name"
		value="test3_${TIME}${COUNTER}@${defaultdomain.name}" />		

<!-- Variables declaration -->		
<t:property name="msg01.file" value="${testMailRaw.root}/zcs-1845/mime01.txt" />
<t:property name="msg02.file" value="${testMailRaw.root}/zcs-1845/mime02.txt" />

<!-- Sieve rules declaration -->
<t:property name="sieve_rule1"
	value='
require ["editheader"];
if header :matches "To" "test1_*@${defaultdomain.name}" {
	addheader "X-NewHeader" "Test";
}
' />

<t:property name="sieve_rule2"
	value='
require ["editheader"];
if header :matches "To" "test2_*@${defaultdomain.name}" {
		deleteheader :index 1 "Content-Type";
		addheader "X-NewHeader" "Test";
}
' />

<t:property name="sieve_rule3"
	value='
require ["editheader"];
if header :matches "To" "test3_*@${defaultdomain.name}" {
		addheader "Content-Type" "invalid;;";
		addheader "X-NewHeader" "Test";
}
' />

<t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>
	
<!-- Create accounts for testing -->
<t:test_case testcaseid="CreateAccounts" type="smoke">
	<t:objective>create accounts</t:objective>
		<t:steps>
			1. Auth with admin
			2. create accounts
		</t:steps>
	
	<t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
     </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server" />
			</t:response>
	</t:test>

	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule3}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server" />
			</t:response>
	</t:test>
</t:test_case>

<!-- Run testcase -->
	<t:test_case testcaseid="ZCS-1845_rule1" type="smoke" bugids="ZCS-1845">
		<t:objective>Verify if any header is malformed, no exception is given and editheader rule for other headers is executed successfully.</t:objective>
		<t:steps>
			1. Auth with admin
			2. set sieve rule in account26
			3. inject malformed message to account26
			4. auth with account26
			5. find and verify email headers
		</t:steps>
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg01.file}</filename>
				<to>${account1.name}</to>
				<from>${admin.user}</from>
				<server>${account1.server}</server>
				<modify>
					<header a="To">${account1.name}</header>
				</modify>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
			</t:restServletResponse>
		</t:resttest>
	</t:test_case>
	
	<t:test_case testcaseid="ZCS-1845_rule2" type="smoke" bugids="ZCS-1845">
		<t:objective>Verify immutable headers cannot be deleted even if it malformed</t:objective>
		<t:steps>
			1. Auth with admin
			2. set sieve rule in account2
			3. inject malformed message to account2
			4. auth with account2
			5. find and verify email headers
		</t:steps>
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg01.file}</filename>
				<to>${account2.name}</to>
				<from>${admin.user}</from>
				<server>${account2.server}</server>
				<modify>
					<header a="To">${account2.name}</header>
				</modify>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="Content-Type" count="1" match="text/plain;;" />
				<t:select attr="X-NewHeader" count="1" match="Test" />
			</t:restServletResponse>
		</t:resttest>
	</t:test_case>
	
	<t:test_case testcaseid="ZCS-1845_rule3" type="smoke" bugids="ZCS-1845">
		<t:objective>Verify any invalid value cannot be added immutable headers</t:objective>
		<t:steps>
			1. Auth with admin
			2. set sieve rule in account3
			3. inject malformed message to account3
			4. auth with account3
			5. find and verify email headers
		</t:steps>
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:mailinjecttest>
			<t:lmtpInjectRequest>
				<filename>${msg02.file}</filename>
				<to>${account3.name}</to>
				<from>${admin.user}</from>
				<server>${account3.server}</server>
				<modify>
					<header a="To">${account3.name}</header>
				</modify>
			</t:lmtpInjectRequest>
		</t:mailinjecttest>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="Content-Type" match="invalid;;" emptyset="1" />
				<t:select attr="Content-Type" match="text/plain" />
				<t:select attr="X-NewHeader" count="1" value="Test" />
			</t:restServletResponse>
		</t:resttest>
	</t:test_case>

    <t:finally type="always">
        <t:objective>reset cosconfig to default </t:objective>
        
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>

    </t:finally>	
</t:tests>