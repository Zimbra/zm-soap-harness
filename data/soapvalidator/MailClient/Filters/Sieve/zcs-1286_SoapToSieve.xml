<t:tests xmlns:t="urn:zimbraTestHarness">
<!-- Following bug is included as part of this testcase -->
	<!-- zcs-1286:-Regression : ModifyOutgoingFilterRulesRequest fails -->

<t:property name="account1.name"
		value="test_zcs1286.${TIME}${COUNTER}@${defaultdomain.name}" />

	<t:property name="folder1.name" value="folder1.${TIME}${COUNTER}" />
	<t:property name="folder2.name" value="folder2.${TIME}${COUNTER}" />
	<t:property name="folder3.name" value="folder3.${TIME}${COUNTER}" />
	<t:property name="folder4.name" value="folder4.${TIME}${COUNTER}" />
	<t:property name="folder5.name" value="folder5.${TIME}${COUNTER}" />
	<t:property name="folder6.name" value="folder6.${TIME}${COUNTER}" />

	<t:property name="subject1" value="subject1.TEST1${TIME}${COUNTER} sieve" />
	<t:property name="content1" value="content1.${TIME}${COUNTER}" />
	<t:property name="subject2" value="subject2.TEST1${TIME}${COUNTER} sieve" />
	<t:property name="content2" value="content2.${TIME}${COUNTER}" />
	<t:property name="subject3" value="subject3.TEST1${TIME}${COUNTER} sieve" />
	<t:property name="content3" value="content3.${TIME}${COUNTER}" />
	<t:property name="subject4" value="subject4.TEST1${TIME}${COUNTER}" />
	<t:property name="content4" value="content4.${TIME}${COUNTER}" />
	<t:property name="subject5" value="subject5.TEST1${TIME}${COUNTER}" />
	<t:property name="content5" value="content5.${TIME}${COUNTER}" />
	<t:property name="subject6" value="subject6.TEST1${TIME}${COUNTER}" />
	<t:property name="content6" value="content6.${TIME}${COUNTER}" />
	
	<t:property name="sieve_test1"
		value='require ["log","fileinto"];	
		if allof address :matches "from" "admin@${defaultdomain.name}" 
		{ 
			fileinto "${folder4.name}";
			stop;
		} 
' />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AcctSetup1_filters_save" type="always">
		<t:objective>create test accounts</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account1.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account1.server" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder1.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id1" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder2.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id2" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder3.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id3" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder4.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id4" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder5.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id5" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<CreateFolderRequest xmlns="urn:zimbraMail">
					<folder name="${folder6.name}" l="1" />
				</CreateFolderRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateFolderResponse/mail:folder"
					attr="id" set="folder.id6" />
			</t:response>
		</t:test>
		
		<!-- Populate some mails in inbox -->
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject1}</su>
						<mp ct="text/plain">
							<content>${content1}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject2}</su>
						<mp ct="text/plain">
							<content>${content2}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message2.id" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject3}</su>
						<mp ct="text/plain">
							<content>${content3}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message3.id" />
			</t:response>
		</t:test>

	</t:test_case>
	
	<t:test_case testcaseid="ZCS-1286_Filter1" type="smoke"
		bugids="ZCS-1286">
		<t:objective>Verify the behavior when Folder is deleted and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with fileinto action for a
			specific folder and keep it deactivated.
			2. Delete the above folder.
			3. Activate the above filter. Filter should get activated.
			4. Send a mail to  above user with filter condition satisfied.
			5. Folder in step 2 should get created again and mail should be delivered in it.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter1.name" value="filter_name1${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter1.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id1}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter1.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder1.name}"/>
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject4}</su>
						<mp ct="text/plain">
							<content>${content4}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message4.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder1.name} subject:${subject4}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject4}" />
			</t:response>
		</t:test>		

	</t:test_case>

<!-- Behavior was changed as part of zcs-540. Marking this test as deprecated -->		
	<t:test_case testcaseid="ZCS-1286_Filter2" type="deprecated"
		bugids="ZCS-1286">
		<t:objective>Run filter and check the deleted folder gets created again.
		</t:objective>
		<t:steps>1. Populate some mails in inbox (Created in accounts creation test above)
			2. Delete the above folder.
			3. Activate the above filter. Filter should get activated.
			4. Run the filter.
			5. All mails from inbox in step 1 should be moved to newly created folder (deleted in step2).
		</t:steps>		
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter2.name" value="filter2_name1${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<headerTest header="subject" stringComparison="contains"
									value="sieve" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter2.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder2.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id2}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<headerTest header="subject" stringComparison="contains"
									value="sieve" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter2.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder2.name}"/>
			</t:response>
		</t:test>
				
		<!-- Run the filter now -->
		
		<t:test>
			<t:request>
				<ApplyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}"/>                                  
					</filterRules>
					<m ids="${Sent_message1.id},${Sent_message2.id},${Sent_message3.id}"/>
	            </ApplyFilterRulesRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//mail:ApplyFilterRulesResponse"/>
	        </t:response>
       </t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder2.name} subject:${subject1}</query>
				</SearchRequest>
			</t:request>	
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject1}" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder2.name} subject:${subject2}</query>
				</SearchRequest>
			</t:request>	
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject2}" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder2.name} subject:${subject3}</query>
				</SearchRequest>
			</t:request>	
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject3}" />
			</t:response>
		</t:test>

	</t:test_case>
	
 
	<t:test_case testcaseid="ZCS-1286_Filter3" type="smoke"
		bugids="ZCS-1286">
		<t:objective>Verify the behavior when Folder is deleted and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with fileinto action for a
			specific folder 1 and keep it deactivated.
			2. Delete the above folder 1.
			3. Activate the above filter. Filter should get activated.
			4. Modify the zimbraMailSieveScript from backend with fileinto folder 2.
			5. Send a mail to above user.
			6. Folder 2 should get created and incoming mail should be delivered in it.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter3.name" value="filter_name3${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter3.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder3.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id3}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter3.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder3.name}"/>
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraMailSieveScript">${sieve_test1}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>	

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject5}</su>
						<mp ct="text/plain">
							<content>${content5}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message5.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder4.name} subject:${subject5}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject5}" />
			</t:response>
		</t:test>
		
	</t:test_case>

	<t:test_case testcaseid="ZCS-1286_Filter4" type="smoke"
		bugids="ZCS-1286">
		<t:objective>Verify the behavior with filter containing two filineto actions, and subsequent folder(s) is/are
		deleted. 
		</t:objective>
		<t:steps>1. Create a filter with fileinto 2 folders in deactivated state.
		2. Delete one folder.
		3. Activate the filter. Filter should get activated.
		4. Send a mail to above user with filter condition satisfied.
		5. Deleted folder should get created again with mail delivered in it.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter4.name" value="filter_name4${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="1">
							<filterTests condition="anyof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder5.name}" />
								<actionFileInto folderPath="${folder6.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter4.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder5.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto[2]"
					attr="folderPath" match="${folder6.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<FolderActionRequest xmlns="urn:zimbraMail">
					<action op="trash" id="${folder.id6}">
					</action>
				</FolderActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:FolderActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionFileInto folderPath="${folder5.name}" />
								<actionFileInto folderPath="${folder6.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter4.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto"
					attr="folderPath" match="${folder5.name}"/>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionFileInto[2]"
					attr="folderPath" match="${folder6.name}" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>	

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m f="!">
						<e t="t" a="${account1.name}" />
						<su>${subject6}</su>
						<mp ct="text/plain">
							<content>${content6}</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message6.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:${folder6.name} subject:${subject6}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="su"
					match="${subject6}" />
			</t:response>
		</t:test>
		
	</t:test_case>
	
</t:tests>