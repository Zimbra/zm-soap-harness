<t:tests xmlns:t="urn:zimbraTestHarness">

	<!-- Following bugs are included as part of this testcase -->
	<!-- zcs-1100:-SIEVE: User is able to activate filters with tag action for 
		non-existing tag. -->

	<t:property name="account1.name"
		value="test_zcs1100.${TIME}${COUNTER}@${defaultdomain.name}" />

	<t:property name="tag1.name" value="tag1${TIME}${COUNTER}" />
	<t:property name="tag2.name" value="tag2${TIME}${COUNTER}" />
	<t:property name="tag3.name" value="tag3${TIME}${COUNTER}" />
	<t:property name="tag4.name" value="tag4${TIME}${COUNTER}" />
	<t:property name="tag4.rename" value="tag4_rename.${TIME}${COUNTER}" />

	<t:property name="tag.default_colour" value="5" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AcctSetup1_filters_save" type="always">
		<t:objective>create test accounts</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account1.name" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account1.server" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-1100_Filter1" type="smoke"
		bugids="ZCS-1100">
		<t:objective>Verify the behavior when Tag is deleted and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with Tag action for a
			specific tag and keep it deactivated.
			2. Delete the above tag.
			3. Activate the above filter. Filter should not get activated.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter1.name" value="filter_name1${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<CreateTagRequest xmlns="urn:zimbraMail">
					<tag name="${tag1.name}" color="${tag.default_colour}" />
				</CreateTagRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateTagResponse/mail:tag">
					<t:select attr="id" set="tag1.id" />
					<t:select attr="color" match="${tag.default_colour}" />
				</t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter1.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules//mail:actionTag"
					attr="tagName" match="${tag1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<TagActionRequest xmlns="urn:zimbraMail">
					<action op="delete" id="${tag1.id}">
					</action>
				</TagActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:TagActionResponse/mail:action" />
			</t:response>
		</t:test>

		<!-- Changed behavior as per zcs-1248. The filter is activated now even if tag is deleted. -->
		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter1.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag1.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter1.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules//mail:actionTag"
					attr="tagName" match="${tag1.name}" />
			</t:response>
		</t:test>
		
	</t:test_case>


	<t:test_case testcaseid="ZCS-1100_Filter2" type="smoke"
		bugids="ZCS-1100">
		<t:objective>Verify the behavior when Tag is deleted and filter is
			activated for Outgoing rules.
		</t:objective>
		<t:steps>1. Create a new outgoing filter with tag action for a
			specific tag and keep it deactivated.
			2. Delete the above tag.
			3. Activate the above filter. Filter should not get activated.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter2.name" value="filter_name2${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<CreateTagRequest xmlns="urn:zimbraMail">
					<tag name="${tag2.name}" color="${tag.default_colour}" />
				</CreateTagRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateTagResponse/mail:tag">
					<t:select attr="id" set="tag2.id" />
					<t:select attr="color" match="${tag.default_colour}" />
				</t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyOutgoingFilterRulesRequest
					xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="0">
							<filterTests condition="anyof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyOutgoingFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter2.name}" />
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionTag"
					attr="tagName" match="${tag2.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<TagActionRequest xmlns="urn:zimbraMail">
					<action op="delete" id="${tag2.id}">
					</action>
				</TagActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:TagActionResponse/mail:action" />
			</t:response>
		</t:test>
		
		<!-- Changed behavior as per zcs-1248. The filter is activated now even if tag is deleted. -->
		<t:test>
			<t:request>
				<ModifyOutgoingFilterRulesRequest
					xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter2.name}" active="1">
							<filterTests condition="anyof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag2.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyOutgoingFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetOutgoingFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter2.name}" />
				<t:select
					path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule//mail:actionTag"
					attr="tagName" match="${tag2.name}" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="ZCS-1100_Filter3" type="smoke"
		bugids="ZCS-1100">
		<t:objective>Verify the behavior when Tag is not deleted and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with Tag action for a
			specific tag and keep it deactivated.
			2. Don't Delete the above tag.
			3. Activate the above filter. Filter should get activated.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter3.name" value="filter_name3${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<CreateTagRequest xmlns="urn:zimbraMail">
					<tag name="${tag3.name}" color="${tag.default_colour}" />
				</CreateTagRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateTagResponse/mail:tag">
					<t:select attr="id" set="tag3.id" />
					<t:select attr="color" match="${tag.default_colour}" />
				</t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter3.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules//mail:actionTag"
					attr="tagName" match="${tag3.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter3.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag3.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-1100_Filter4" type="smoke"
		bugids="ZCS-1100">
		<t:objective>Verify the behavior when Tag is renamed and filter is
			activated for Incoming rules.
		</t:objective>
		<t:steps>1. Create a new incoming filter with tag action for a
			specific tag and keep it deactivated.
			2. Rename the above tag.
			3.
			Activate the above filter. Filter should get activated.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:property name="filter4.name" value="filter_name4${TIME}${COUNTER}" />

		<t:test>
			<t:request>
				<CreateTagRequest xmlns="urn:zimbraMail">
					<tag name="${tag4.name}" color="${tag.default_colour}" />
				</CreateTagRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:CreateTagResponse/mail:tag">
					<t:select attr="id" set="tag4.id" />
					<t:select attr="color" match="${tag.default_colour}" />
				</t:select>
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="0">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag4.name}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetFilterRulesRequest xmlns="urn:zimbraMail">
					<account by="name">${account1.name}</account>
				</GetFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
					attr="name" match="${filter4.name}" />
				<t:select
					path="//mail:GetFilterRulesResponse/mail:filterRules//mail:actionTag"
					attr="tagName" match="${tag4.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<TagActionRequest xmlns="urn:zimbraMail">
					<action op="rename" id="${tag4.id}" name="${tag4.rename}">
					</action>
				</TagActionRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:TagActionResponse/mail:action" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyFilterRulesRequest xmlns="urn:zimbraMail">
					<filterRules>
						<filterRule name="${filter4.name}" active="1">
							<filterTests condition="allof" xmlns="urn:zimbraMail">
								<addressTest header="from" stringComparison="is"
									value="${admin.user}" />
							</filterTests>
							<filterActions xmlns="urn:zimbraMail">
								<actionTag tagName="${tag4.rename}" />
								<actionStop />
							</filterActions>
						</filterRule>
					</filterRules>
				</ModifyFilterRulesRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:ModifyFilterRulesResponse" />
			</t:response>
		</t:test>

	</t:test_case>




</t:tests>