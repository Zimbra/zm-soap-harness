<t:tests xmlns:t="urn:zimbraTestHarness">

 <t:property name="test_account1.name"
  value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account2.name"
  value="test2.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account3.name"
  value="test3.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account4.name"
  value="test4.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account5.name"
  value="test5.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account6.name"
  value="test6.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account7.name"
  value="test7.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account8.name"
  value="test8.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account9.name"
  value="test9.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account10.name"
  value="test10.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account11.name"
  value="test11.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account12.name"
  value="test12.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account13.name"
  value="test13.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account16.name"
  value="test16.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account17.name"
  value="test17.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account18.name"
  value="test18.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account19.name"
  value="test19.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account20.name"
  value="test20.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account21.name"
  value="test21.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account22.name"
  value="test22.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account23.name"
  value="test23.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account24.name"
  value="test24.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account25.name"
  value="test25.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account26.name"
  value="test26.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account27.name"
  value="test27.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account28.name"
  value="test28.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account29.name"
  value="test29.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account30.name"
  value="test30.${TIME}.${COUNTER}@${defaultdomain.name}" />

 <t:property name="test_account20_notify.name"
  value="test20_notify.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account21_notify.name"
  value="test21_notify.${TIME}.${COUNTER}@${defaultdomain.name}" />
 <t:property name="test_account22_notify.name"
  value="test22_notify.${TIME}.${COUNTER}@${defaultdomain.name}" />

 <t:property name="mail_subject" value="Sieve Mail" />
 <t:property name="val" value="$\{1}" />
 <t:property name="msg01.file" value="${testMailRaw.root}/bug104314/mime1.txt" />
 <t:property name="msg02.file" value="${testMailRaw.root}/bug104314/mime2.txt" />

 <t:property name="server.name" value="testserver${TIME}${COUNTER}" />
 <t:property name="server.spaceinname" value="testserver    ${TIME}${COUNTER}" />
 <t:property name="server.notes" value="test of adding Server via SOAP" />
 <t:property name="server.desc" value="test server description" />

 <t:property name="addheader.name1" value="X-Spam-Filtered1" />
 <t:property name="addheader.value1" value="This is a spam mail" />
 <t:property name="op.delete" value="delete" />
<!-- Variables declaration -->
<t:property name="var_one"   value="$\{var_one}"/>
<t:property name="var_two"   value="$\{var_two}"/>
<t:property name="var_three" value="$\{var_three}"/>



 <t:property name="sieve_rule1"
  value='require  ["log","editheader"];
if header :contains ["Subject"] "Sieve Mail" {
addheader " X-Spam-Filtered1" "Leading_space";
stop;
}' />

 <t:property name="sieve_rule2"
  value='require  ["log","editheader"];
if header :contains ["Subject"] "Sieve Mail" {
addheader " X-Spam-Filtered1 " "Leading_and_Trailing_space";
stop;
}' />

 <t:property name="sieve_rule3"
  value='require  ["log","editheader"];
if header :contains ["Subject"] "Sieve Mail" {
addheader "X-Spam-Filtered1 " "Trailing_space ";
stop;
}' />

 <t:property name="sieve_rule4"
  value='require  ["log","editheader"];
if header :contains ["Subject"] "Sieve Mail" {
addheader "X-Spam-Fi ltered1" "Between space";
stop;
}' />

 <t:property name="sieve_rule_del_1"
  value='require ["editheader","log"];
  deleteheader " X-Test-Header" "test1";
  log "Sieve rule for delete header"; 
 ' />
 <t:property name="sieve_rule_del_2"
  value='require ["editheader","log"];
  deleteheader " X-Test-Header " "test1";
  log "Sieve rule for delete header"; 
 ' />
 <t:property name="sieve_rule_del_3"
  value='require ["editheader","log"];
  deleteheader "X-Test-Header " "test1";
  log "Sieve rule for delete header"; 
 ' />

 <t:property name="sieve_rule_del_4"
  value='require ["editheader","log"];
  deleteheader "X-Test-Hea der" "test1";
  log "Sieve rule for delete header"; 
 ' />


 <t:property name="sieve_rule_edit_1"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header " :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header" "*";
log "Replace header 1 done";' />

 <t:property name="sieve_rule_edit_2"
  value='require ["editheader", "log"];
replaceheader :newName " X-Replace-Header " :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header" "*";
log "Replace header 2 done";' />

 <t:property name="sieve_rule_edit_3"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header " :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header" "*";
log "Replace header 3 done";' />

 <t:property name="sieve_rule_edit_4"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Hea der" :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header" "*";
log "Replace header 4 done";' />

 <t:property name="sieve_rule_edit_5"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header" :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header " "*";
log "Replace header 5 done";' />

 <t:property name="sieve_rule_edit_6"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header" :newvalue "[Spam] ${mail_subject}" :matches " X-Test-Header " "*";
log "Replace header 6 done";' />

 <t:property name="sieve_rule_edit_7"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header" :newvalue "[Spam] ${mail_subject}" :matches "X-Test-Header " "*";
log "Replace header 7 done";' />

 <t:property name="sieve_rule_edit_8"
  value='require ["editheader", "log"];
replaceheader :newName "X-Replace-Header" :newvalue "[Spam] ${mail_subject}" :matches "X-T est-Header" "*";
log "Replace header 8 done";' />


 <t:property name="test_acct.server" value="NOT_DEFINED" />

 <t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />



 <t:test_case testcaseid="Ping" type="always">
  <t:objective>basic system check</t:objective>

  <t:test required="true">
   <t:request>
    <PingRequest xmlns="urn:zimbraAdmin" />
   </t:request>
   <t:response>
    <t:select path="//admin:PingResponse" />
   </t:response>
  </t:test>

 </t:test_case>

 <t:test_case testcaseid="acctSetup1" type="smoke">
  <t:objective>create test account</t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveNotifyActionRFCCompliant">TRUE</a>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account1.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account1.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct1.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account2.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account2.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct2.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account3.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account3.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct3.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account4.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account4.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct4.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account5.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account5.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct5.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account6.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account6.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct6.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account7.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account7.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct7.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account8.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account8.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct8.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account9.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account9.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct9.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account10.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account10.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct10.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account11.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account11.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct11.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account12.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account12.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct12.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account13.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account13.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_acct13.server" />
   </t:response>
  </t:test>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account16.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account16.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account16.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account17.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account17.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account17.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account18.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account18.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account18.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account19.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account19.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account19.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account20.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account20.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account20.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account20_notify.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account20_notify.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account20_notify.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account21.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account21.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account21.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account21_notify.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account21_notify.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account21_notify.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account22.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account22.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account22.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account22_notify.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account22_notify.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account22_notify.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account23.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account23.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account23.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account24.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account24.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account24.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account25.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account25.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account25.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account26.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account26.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account26.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account27.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account27.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account27.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account28.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account28.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account28.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account29.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account29.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account29.server" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${test_account30.name}</name>
     <password>${defaultpassword.value}</password>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="test_account30.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="test_account30.server" />
   </t:response>
  </t:test>

 </t:test_case>


 <t:test_case testcaseid="zcs1088_1" type="smoke" bugids="bugZCS1008_1">
  <t:objective>Verify that header with space in name is not added
  </t:objective>
  <steps>
   1. Add sieve rule for the user to add header with leading
   space"
   2. Send email to that user.
   3. Verify that the mail is
   delievered but the header is not added.
  </steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account2.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account1.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m>
      <e t="t" a='${test_account2.name}' />
      <su>${mail_subject}_1</su>
      <mp ct="text/plain">
       <content>Good Morning</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account2.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_1</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     contains="${mail_subject}_1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="${addheader.name1}" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>


 <t:test_case testcaseid="zcs1088_2" type="smoke" bugids="bugZCS1008_2">
  <t:objective>Verify that header with space in name is not added
  </t:objective>
  <steps>
   1. Add sieve rule for the user to add header with leading and
   trailing
   space"
   2. Send email to that user.
   3. Verify that a exception
   is thrown
  </steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account1.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account1.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m>
      <e t="t" a='${test_account2.name}' />
      <su>${mail_subject}_2</su>
      <mp ct="text/plain">
       <content>Good Morning</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account2.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_2</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     contains="${mail_subject}_2" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="${addheader.name1}" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>

 <t:test_case testcaseid="zcs1088_3" type="smoke" bugids="bugZCS1008_3">
  <t:objective>Verify that header with space in name is not added
  </t:objective>
  <steps>
   1. Add sieve rule for the user to add header with trailing
   space"
   2. Send email to that user.
   3. Verify that a exception is thrown
  </steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account1.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule3}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account1.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m>
      <e t="t" a='${test_account2.name}' />
      <su>${mail_subject}_3</su>
      <mp ct="text/plain">
       <content>Good Morning</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account2.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_3</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     contains="${mail_subject}_3" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="${addheader.name1}" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>

 <t:test_case testcaseid="zcs1088_4" type="smoke" bugids="zcs-1088_4">
  <t:objective>Verify that header with space in name is not added
  </t:objective>
  <steps>
   1. Add sieve rule for the user to add header with space in
   between"
   2. Send email to that user.
   3. Verify that a exception is
   thrown
  </steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account1.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule4}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account1.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m>
      <e t="t" a='${test_account2.name}' />
      <su>${mail_subject}_4</su>
      <mp ct="text/plain">
       <content>Good Morning</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account2.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_4</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     contains="${mail_subject}_4" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="${addheader.name1}" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_5" type="smoke" bugids="bugZCS1008_5">
  <t:objective>Add a sieve rule to delete custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account2.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_del_1}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account2.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct2.server}</server>
    <modify>
     <header a="To">${test_account2.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_5</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account2.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_5</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_5" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg5.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg5.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
   </t:restServletResponse>
  </t:resttest>

  <t:test id="MsgActionRequest">
   <t:request>
    <MsgActionRequest xmlns="urn:zimbraMail">
     <action id="${msg5.id}" op="${op.delete}" />
    </MsgActionRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:MsgActionResponse/mail:action" attr="op"
     match="${op.delete}" />
    <t:select path="//mail:MsgActionResponse/mail:action" attr="id"
     match="${msg5.id}" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_6" type="smoke" bugids="bugZCS1008_6">
  <t:objective>Add a sieve rule to delete custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account3.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_del_2}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account3.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct3.server}</server>
    <modify>
     <header a="To">${test_account3.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_6</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account3.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_6</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_6" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg6.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg6.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_7" type="smoke" bugids="bugZCS1008_7">
  <t:objective>Add a sieve rule to delete custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account4.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_del_3}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account4.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct4.server}</server>
    <modify>
     <header a="To">${test_account4.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_7</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account4.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_7</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_7" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg7.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg7.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_8" type="smoke" bugids="bugZCS1008_8">
  <t:objective>Add a sieve rule to delete custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account5.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_del_4}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account5.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct5.server}</server>
    <modify>
     <header a="To">${test_account5.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_8</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account5.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_8</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_8" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg8.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg8.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_9" type="smoke" bugids="bugZCS1008_9">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account6.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_1}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account6.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct6.server}</server>
    <modify>
     <header a="To">${test_account6.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_9</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account6.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_9</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_9" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg9.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg9.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_10" type="smoke"
  bugids="bugZCS1008_10">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account6.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_2}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account7.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct7.server}</server>
    <modify>
     <header a="To">${test_account7.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_10</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account7.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_10</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_10" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg10.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg10.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_11" type="smoke"
  bugids="bugZCS1008_11">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account6.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_3}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account8.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct8.server}</server>
    <modify>
     <header a="To">${test_account8.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_11</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account8.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_11</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_11" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg11.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg11.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="bugZCS1008_12" type="smoke"
  bugids="bugZCS1008_12">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account9.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_4}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account9.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct9.server}</server>
    <modify>
     <header a="To">${test_account9.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_12</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account9.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_12</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_12" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg12.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg12.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>


 <t:test_case testcaseid="bugZCS1008_13" type="smoke"
  bugids="bugZCS1008_13">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account10.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_5}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account10.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct10.server}</server>
    <modify>
     <header a="To">${test_account10.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_13</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account10.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_13</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_13" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg13.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg13.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>


 <t:test_case testcaseid="bugZCS1008_14" type="smoke"
  bugids="bugZCS1008_14">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account11.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_6}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account11.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct11.server}</server>
    <modify>
     <header a="To">${test_account11.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_14</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account11.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_14</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_14" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg14.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg14.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>



 <t:test_case testcaseid="bugZCS1008_15" type="smoke"
  bugids="bugZCS1008_15">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account12.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_7}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account12.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct12.server}</server>
    <modify>
     <header a="To">${test_account12.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_15</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account12.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_15</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_15" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg15.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg15.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>


 <t:test_case testcaseid="bugZCS1008_16" type="smoke"
  bugids="bugZCS1008_16">
  <t:objective>Add a sieve rule to replace custom header with space in
   name and verify the
   mime via rest servlet
  </t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest01">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account13.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule_edit_8}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg02.file}</filename>
    <to>${test_account13.name}</to>
    <from>${admin.user}</from>
    <server>${test_acct13.server}</server>
    <modify>
     <header a="To">${test_account13.name}</header>
     <header a="From">${admin.user}</header>
     <header a="Subject">${mail_subject}_16</header>
    </modify>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount" csrfTokenSecured="0">
     <account by="name">${test_account13.name}</account>
     <password>test123</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:${mail_subject}_16</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m/mail:su"
     match="${mail_subject}_16" />
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg16.id" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg16.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="X-Test-Header" emptyset="0" />
    <t:select attr="X-Replace-Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>

 </t:test_case>

 <t:test_case testcaseid="ZCS-1088_rule16" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the addheader should error out during the
   validation, and none of header is added.
   Verify that the execution of
   tag is cancelled due to the failure of the
   addheader.
  </t:objective>

  <t:property name="label16" value="sieve_rule16_label" />
  <t:property name="sieve_rule16"
   value='require ["editheader", "tag", "variables"];
set "var_one" " NewHeader";
addheader "${var_one}" "value";
tag "${label16}";
' />

  <t:steps>
   set "var_one" " NewHeader";
   addheader "${var_one}" "value";
   tag "sieve_rule16_label";

   1. Auth with admin
   2. set
   zimbraCustomMimeHeaderNameAllowed
   3. set sieve rule in account16
   4.
   send mail from admin to account16
   5. auth with account16
   6. find and
   verify no tag
   7. find and verify no new header field
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">X-Test-Header</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account16.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule16}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account16.name}" />
      <su>Test message - ${label16}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account16.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label16}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m/mail:su" 
     match="${label16}" emptyset="1" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="Return-Path" match="${admin.user}NewHeader: value"
     emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>



 <t:property name="msg17.file" value="${testMailRaw.root}/zcs-1088/mime17.txt" />
 <t:test_case testcaseid="ZCS-1088_rule17" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the delete should error out during the
   validation, and none of header is deleted.
   Verify that the execution
   of tag is cancelled due to the failure of the
   deleteheader.
  </t:objective>

  <t:property name="label17" value="sieve_rule17_label" />
  <t:property name="sieve_rule17"
   value='require ["editheader", "tag", "variables"];
set "var_one" "NewHeader ";
deleteheader :matches "${var_one}" "value";
tag "${label17}";
' />

  <t:steps>
   set "var_one" "NewHeader ";
   deleteheader :matches "${var_one}"
   "value";
   tag "sieve_rule17_label";

   1. Auth with admin
   2. set
   zimbraCustomMimeHeaderNameAllowed
   3. set sieve rule in account17
   4.
   send mail from admin to account17
   5. auth with account17
   6. find and
   verify no tag
   7. find and verify no deleted header
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">NewHeader</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account17.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule17}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg17.file}</filename>
    <to>${test_account17.name}</to>
    <from>${admin.user}</from>
    <server>${test_account17.server}</server>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account17.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label17}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label17}" emptyset="1" />
   </t:response>
  </t:test>

 <t:delay sec="20" />
  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="NewHeader" match="value" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>



 <t:property name="msg18.file" value="${testMailRaw.root}/zcs-1088/mime18.txt" />
 <t:test_case testcaseid="ZCS-1088_rule18" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the replaceheader should error out during the
   validation, and none of header is replaced.
   Verify that the execution
   of tag is cancelled due to the failure of the
   replaceheader.
  </t:objective>

  <t:property name="label18" value="sieve_rule18_label" />
  <t:property name="sieve_rule18"
   value='require ["editheader", "tag", "variables"];
set "var_one" "New Header";
replaceheader :newname "${var_one}" :newvalue "value_new" :comparator "i;ascii-casemap" :matches "OldHeader" "value";
tag "${label18}";
' />

  <t:steps>
   set "var_one" "New Header";
   replaceheader :newname
   "${var_one}" :newvalue "value_new" :comparator
   "i;ascii-casemap"
   :matches "OldHeader" "value";
   tag "sieve_rule18_label";

   1. Auth with
   admin
   2. set zimbraCustomMimeHeaderNameAllowed
   3. set sieve rule in
   account18
   4. send mail from admin to account1
   5. auth with account18
   6.
   find and verify no tag
   7. find and verify no replaced header
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">New Header</a>
     <a n="zimbraCustomMimeHeaderNameAllowed">OldHeader</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account18.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule18}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg18.file}</filename>
    <to>${test_account18.name}</to>
    <from>${admin.user}</from>
    <server>${test_account18.server}</server>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account18.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
 <t:delay sec="10" />
  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label18}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label18}" emptyset="1" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="OldHeader" match="value" />
    <t:select attr="New Header" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>




 <t:property name="msg19.file" value="${testMailRaw.root}/zcs-1088/mime19.txt" />
 <t:test_case testcaseid="ZCS-1088_rule19" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the replaceheader should error out during the
   validation, and none of header is replaced.
   Verify that the execution
   of tag is cancelled due to the failure of the
   replaceheader.
  </t:objective>

  <t:property name="label19" value="sieve_rule19_label" />
  <t:property name="sieve_rule19"
   value='require ["editheader", "tag", "variables"];
set "var_one" "Old Header";
replaceheader :newname "NewHeader" :newvalue "value_new" :comparator "i;ascii-casemap" :matches "${var_one}" "value";
tag "${label19}";
' />

  <t:steps>
   set "var_one" "Old Header";
   replaceheader :newname "NewHeader"
   :newvalue "value_new" :matches :comparator
   "i;ascii-casemap"
   "${var_one}" "value";
   tag "sieve_rule19_label";

   1. Auth with admin
   2.
   set zimbraCustomMimeHeaderNameAllowed
   3. set sieve rule in account19
   4. send mail from admin to account1
   5. auth with account19
   6. find and
   verify no tag
   7. find and verify no replaced header
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">NewHeader</a>
     <a n="zimbraCustomMimeHeaderNameAllowed">Old Header</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account19.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule19}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:mailinjecttest>
   <t:lmtpInjectRequest>
    <filename>${msg19.file}</filename>
    <to>${test_account19.name}</to>
    <from>${admin.user}</from>
    <server>${test_account19.server}</server>
   </t:lmtpInjectRequest>
  </t:mailinjecttest>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account19.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:delay sec="5" />
  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label19}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label19}" emptyset="1" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="NewHeader" emptyset="1" />
    <t:select attr="Old Header" match="value" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule20" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the 'notify' should error out during the
   validation, and none of notification message is sent.
   Verify that the
   execution of tag is cancelled due to the failure of the
   'notify'.
  </t:objective>

  <t:property name="label20" value="sieve_rule20_label" />
  <t:property name="sieve_rule20"
   value='require ["enotify", "tag", "variables"];
set "var_one" " X-Priority";
notify :from "${test_account20.name}" :message "notify_${label20}" "mailto:${test_account20_notify.name}?Importance=High&#038;${var_one}=1";
tag "${label20}";
' />

  <t:steps>
   set "var_one" " X-Priority";
   notify :from
   "${test_account20.name}" :message "notify -
   sieve_rule20_label"
   "mailto:${test_account20_notify.name}?Importance=High&#038;${var_one}=1";
   tag "sieve_rule20_label";

   1. Auth with admin
   2. set sieve rule in
   account20
   3. send mail from admin to account20
   4. auth with account20
   5. find and verify no email tag
   6. auth with account20_notify
   7. find
   and verify no notification message
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">X-Priority</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account20.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule20}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account20.name}" />
      <su>Test message - ${label20}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account20.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label20}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label20}" emptyset="1" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account20_notify.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="notify_${label20}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule21" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the 'notify' should error out during the
   validation, and none of notification message is sent.
   Verify that the
   execution of tag is cancelled due to the failure of the
   'notify'.
  </t:objective>

  <t:property name="label21" value="sieve_rule21_label" />
  <t:property name="sieve_rule21"
   value='require ["enotify", "tag", "variables"];
set "var_one" "X-Priority ";
notify :from "${test_account21.name}" :message "notify_${label21}" "mailto:${test_account21_notify.name}?Importance=High&#038;${var_one}=1";
tag "${label21}";
' />

  <t:steps>
   set "var_one" "X-Priority ";
   notify :from
   "${test_account21.name}" :message "notify -
   sieve_rule21_label"
   "mailto:${test_account21_notify.name}?Importance=High&#038;${var_one}=1";
   tag "sieve_rule21_label";

   1. Auth with admin
   2. set sieve rule in
   account21
   3. send mail from admin to account21
   4. auth with account21
   5. find and verify no email tag
   6. auth with account21_notify
   7. find
   and verify no notification message
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">X-Priority</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account21.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule21}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account21.name}" />
      <su>Test message - ${label21}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account21.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label21}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label21}" emptyset="1" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account21_notify.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="notify_${label21}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule22" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the 'notify' should error out during the
   validation, and none of notification message is sent.
   Verify that the
   execution of tag is cancelled due to the failure of the
   'notify'.
  </t:objective>

  <t:property name="label22" value="sieve_rule22_label" />
  <t:property name="sieve_rule22"
   value='require ["enotify", "tag", "variables"];
set "var_one" "X-Prior ity";
notify :from "${test_account22.name}" :message "notify_${label22}" "mailto:${test_account22_notify.name}?Importance=High&#038;${var_one}=1";
tag "${label22}";
' />

  <t:steps>
   set "var_one" "X-Prior ity";
   notify :from
   "${test_account22.name}" :message "notify -
   sieve_rule22_label"
   "mailto:${test_account22_notify.name}?Importance=High&#038;${var_one}=1";
   tag "sieve_rule22_label";

   1. Auth with admin
   2. set sieve rule in
   account22
   3. send mail from admin to account22
   4. auth with account22
   5. find and verify no email tag
   6. auth with account22_notify
   7. find
   and verify no notification message
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">X-Priority</a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account22.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule22}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account22.name}" />
      <su>Test message - ${label22}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account22.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label22}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label22}" emptyset="1" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account22_notify.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="notify_${label22}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>


 <t:test_case testcaseid="ZCS-1088_rule23" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the address test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the address test.
  </t:objective>

  <t:property name="label23" value="sieve_rule23_label" />
  <t:property name="sieve_rule23"
   value='require ["editheader", "tag", "variables"];
if address :contains "From " "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label23}";
' />

  <t:steps>
   if address :contains "From " "test*" {
   tag "true";
   } else {
   tag
   "false";
   }
   tag "sieve_rule23_label";

   1. Auth with admin
   2. set sieve rule
   in account23
   3. send mail from admin to account23
   4. auth with
   account23
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account23.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule23}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account23.name}" />
      <su>Test message - ${label23}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account23.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label23}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label23}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>


 <t:test_case testcaseid="ZCS-1088_rule24" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the address test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the address test.
  </t:objective>

  <t:property name="label24" value="sieve_rule24_label" />
  <t:property name="sieve_rule24"
   value='require ["editheader", "tag", "variables"];
if address :contains "F r o m" "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label24}";
' />

  <t:steps>
   if address :contains "F r o m" "test*" {
   tag "true";
   } else {
   tag "false";
   }
   tag "sieve_rule24_label";

   1. Auth with admin
   2. set sieve
   rule in account24
   3. send mail from admin to account24
   4. auth with
   account24
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account24.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule24}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account24.name}" />
      <su>Test message - ${label24}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account24.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label24}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label24}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule25" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the address test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the address test.
  </t:objective>

  <t:property name="label25" value="sieve_rule25_label" />
  <t:property name="sieve_rule25"
   value='require ["editheader", "tag", "variables"];
if address :contains " From" "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label25}";
' />

  <t:steps>
   if address :contains " From" "test*" {
   tag "true";
   } else {
   tag
   "false";
   }
   tag "sieve_rule25_label";

   1. Auth with admin
   2. set sieve rule
   in account25
   3. send mail from admin to account25
   4. auth with
   account25
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account25.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule25}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account25.name}" />
      <su>Test message - ${label25}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account25.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label25}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label25}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule26" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the header test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the header test.
  </t:objective>

  <t:property name="label26" value="sieve_rule26_label" />
  <t:property name="sieve_rule26"
   value='require ["editheader", "tag", "variables"];
if header :contains "Subject " "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label26}";
' />

  <t:steps>
   if header :contains "Subject " "test*" {
   tag "true";
   } else {
   tag "false";
   }
   tag "sieve_rule26_label";

   1. Auth with admin
   2. set sieve
   rule in account26
   3. send mail from admin to account26
   4. auth with
   account26
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account26.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule26}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account26.name}" />
      <su>Test message - ${label26}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account26.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label26}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label26}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule27" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the header test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the header test.
  </t:objective>

  <t:property name="label27" value="sieve_rule27_label" />
  <t:property name="sieve_rule27"
   value='require ["editheader", "tag", "variables"];
if header :contains " Subject" "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label27}";
' />

  <t:steps>
   if header :contains " Subject" "test*" {
   tag "true";
   } else {
   tag "false";
   }
   tag "sieve_rule27_label";

   1. Auth with admin
   2. set sieve
   rule in account27
   3. send mail from admin to account27
   4. auth with
   account27
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account27.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule27}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account27.name}" />
      <su>Test message - ${label27}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account27.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label27}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label27}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule28" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the header test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the header test.
  </t:objective>

  <t:property name="label28" value="sieve_rule28_label" />
  <t:property name="sieve_rule28"
   value='require ["editheader", "tag", "variables"];
if header :contains "Subje ct" "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label28}";
' />

  <t:steps>
   if header :contains "Subje ct" "test*" {
   tag "true";
   } else {
   tag "false";
   }
   tag "sieve_rule28_label";

   1. Auth with admin
   2. set sieve
   rule in account28
   3. send mail from admin to account28
   4. auth with
   account28
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account28.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule28}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account28.name}" />
      <su>Test message - ${label28}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account28.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label28}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label28}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule29" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the header test should error out during the
   validation
   Verify that the execution of all tags are cancelled due to
   the failure of
   the header test.
  </t:objective>

  <t:property name="label29" value="sieve_rule29_label" />
  <t:property name="sieve_rule29"
   value='require ["editheader", "tag", "variables"];
set "var_two" "Subje ct ";
if header :contains "${var_two}" "test*" {
  tag "true";
} else {
  tag "false";
}
tag "${label29}";
' />

  <t:steps>
   set "var_two" "Subje ct ";
   if header :contains "${var_two}"
   "test*" {
   tag "true";
   } else {
   tag "false";
   }
   tag "sieve_rule29_label";

   1.
   Auth with admin
   2. set sieve rule in account29
   3. send mail from admin
   to account29
   4. auth with account29
   5. find and verify no tag
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account29.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule29}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account29.name}" />
      <su>Test message - ${label29}</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account29.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox subject:${label29}</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="true" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="false" emptyset="1" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     contains="${label29}" emptyset="1" />
   </t:response>
  </t:test>
 </t:test_case>



 <t:test_case testcaseid="ZCS-1088_rule30" type="smoke"
  bugids="ZCS-1088">
  <t:objective>Verify that the addheader should error out during the
   validation, and none of header is added.
   Verify that the execution of
   tag is cancelled due to the failure of the
   addheader.
  </t:objective>

  <t:property name="label30" value="sieve_rule30_label" />
  <t:property name="sieve_rule30"
   value='require ["editheader", "tag", "variables"];
if header :matches "Subject" "*test" {
  set "var_three" "$\{1}";
  addheader "${var_three}" "value";
}
tag "${label30}";
' />

  <t:steps>

   1. Auth with admin
   2. set zimbraCustomMimeHeaderNameAllowed
   3.
   set sieve rule in account30
   4. send mail from admin to account30
   5.
   auth with account30
   6. find and verify no tag
   7. find and verify no new
   header field
  </t:steps>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <ModifyConfigRequest xmlns="urn:zimbraAdmin">
     <a n="zimbraCustomMimeHeaderNameAllowed">This is </a>
    </ModifyConfigRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyConfigResponse" />
   </t:response>
  </t:test>

  <t:test id="modifyaccountrequest1">
   <t:request>
    <ModifyAccountRequest xmlns="urn:zimbraAdmin">
     <id>${test_account30.id}</id>
     <a n="zimbraAdminSieveScriptBefore">${sieve_rule30}</a>
    </ModifyAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyAccountResponse/admin:account" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SendMsgRequest xmlns="urn:zimbraMail">
     <m f="!">
      <e t="t" a="${test_account30.name}" />
      <su>This is test</su>
      <mp ct="text/plain">
       <content>Hello</content>
      </mp>
     </m>
    </SendMsgRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SendMsgResponse/mail:m" attr="id"
     set="msg1.id" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${test_account30.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>in:Inbox</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="id"
     set="msg1.id" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="${label30}" emptyset="1" />
   </t:response>
  </t:test>

  <t:resttest>
   <t:restServletRequest>
    <id>${msg1.id}</id>
   </t:restServletRequest>
   <t:restServletResponse>
    <t:select attr="This is " match="value" emptyset="1" />
   </t:restServletResponse>
  </t:resttest>
 </t:test_case>


 <t:finally>
  <t:test required="false">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>
 
        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveNotifyActionRFCCompliant">FALSE</a>
	                <a n="zimbraSieveEditHeaderEnabled">FALSE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    
 </t:finally> 
</t:tests>
