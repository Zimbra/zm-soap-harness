<t:tests xmlns:t="urn:zimbraTestHarness">
    <!-- Following bugs are included as part of this testcase -->
    <!-- zcs-1173:SIEVE: If anyof/allof not specified in condition within sieve rule,
         NPE occurs in mailbox.log when rule is loaded on ZWC. -->

    <!-- Test accounts declaration -->
    <t:property name="account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}" />
    <t:property name="dummy.account.name" value="dummy.account.${TIME}.${COUNTER}@${defaultdomain.name}" />

    <t:property name="filter1.name" value="filter_name1${TIME}${COUNTER}" />
    <t:property name="filter2.name" value="filter_name2${TIME}${COUNTER}" />
    <t:property name="filter3.name" value="filter_name3${TIME}${COUNTER}" />
    <t:property name="filter4.name" value="filter_name4${TIME}${COUNTER}" />
    <t:property name="filter5.name" value="filter_name5${TIME}${COUNTER}" />
    <t:property name="filter6.name" value="filter_name6${TIME}${COUNTER}" />
    <t:property name="filter7.name" value="filter_name7${TIME}${COUNTER}" />
    <t:property name="filter8.name" value="filter_name8${TIME}${COUNTER}" />
    <t:property name="filter9.name" value="filter_name9${TIME}${COUNTER}" />

    <t:property name="rule1" value='
require ["tag"];&#xA;# ${filter1.name}&#xA;
if header :matches :comparator "i;ascii-casemap" "Subject" "*" {
 tag "rule1";
}
    '/>

    <t:property name="rule2" value='
require ["tag"];&#xA;# ${filter2.name}&#xA;
if header :matches ["Subject"] "*" {
  if header :matches ["From"] "*" {
    fileinto "rule2";
  }
}
    '/>

    <t:property name="rule3" value='
require ["tag"];&#xA;# ${filter3.name}&#xA;
if header :matches ["From"] "*" {
  if anyof (address :matches ["From"] "*",
            size :over 100k) {
    discard;
    stop;
  }
}
    '/>

    <t:property name="rule4" value='
require ["fileinto", "reject", "tag", "flag", "variables", "log", "enotify"];&#xA;# ${filter4.name}&#xA;
flag "priority";
keep;
    '/>

    <t:property name="rule5" value='
require ["fileinto", "reject", "tag", "flag", "variables", "log", "enotify"];&#xA;# ${filter5.name}&#xA;
fileinto "rule5";
if exists "X-Header" {
  if date :before "1495721623" {
    redirect "${dummy.account.name}";
  }
}
    '/>

    <t:property name="rule6" value='
require ["fileinto", "reject", "tag", "flag", "variables", "log", "enotify"];&#xA;# ${filter6.name}&#xA;
if exists "X-Header" {
  if date :before "1495721623" {
    redirect "${dummy.account.name}";
  }
}
tag "rule6";
    '/>

    <t:property name="rule8" value='
require ["tag"];&#xA;# ${filter8.name}&#xA;
if envelope :matches :comparator "i;ascii-casemap" "From" "*" {
 tag "rule8";
}
    '/>

    <t:property name="rule9" value='
require ["tag"];&#xA;# ${filter9.name}&#xA;
if address :matches :comparator "i;ascii-casemap" "To" "*" {
 tag "rule9";
}
    '/>

    <t:test_case testcaseid="Ping" type="always">
        <t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="AcctSetup" type="always">
        <t:objective>create test accounts</t:objective>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <CreateAccountRequest xmlns="urn:zimbraAdmin">
                    <name>${account1.name}</name>
                    <password>${defaultpassword.value}</password>
                </CreateAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account"
                    attr="id" set="account1.id" />
                <t:select path="//admin:CreateAccountResponse/admin:account"
                    attr="name" set="account1.name" />
                <t:select
                    path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
                    set="account1.server" />
            </t:response>
        </t:test>
    </t:test_case>

    <t:test_case testcaseid="ZCS-1173_Filter1" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username for
            header test without allof and anyof condition
        </t:objective>
        <t:steps>
        1. Create a sieve script containing header test without allof condition.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule1}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter1.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest"
                    attr="header" match="Subject" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionTag"
                    attr="tagName" match="rule1" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter2" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username whose rule
            contains a nested if without allof or anyof test.
        </t:objective>
        <t:steps>
        1. Create a sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule2}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter2.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest"
                    attr="header" match="Subject" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests/mail:headerTest"
                    attr="header" match="From" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterActions/mail:actionFileInto"
                    attr="folderPath" match="rule2" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter3" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username whose rule
            contains a nested if; the outer if does not contain allof/anyof,
            the inner if contains anyof test
        </t:objective>
        <t:steps>
        1. Create a sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule3}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter3.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerTest"
                    attr="header" match="From" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests"
                    attr="condition" match="anyof" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests/mail:addressTest"
                    attr="header" match="From" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests/mail:sizeTest"
                    attr="s" match="100" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterActions/mail:actionDiscard"
                    attr="index" match="0" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterActions/mail:actionStop"
                    attr="index" match="1" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter4" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username whose Sieve action
            is not enclosed by the 'if' clause.
        </t:objective>
        <t:steps>
        1. Create a sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule4}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter4.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFlag"
                    attr="flagName" match="priority" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionKeep"
                    attr="index" match="1" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter5" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username whose Sieve action
            is not enclosed by the 'if' clause and nested if clause.
        </t:objective>
        <t:steps>
        1. Create a sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule5}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter5.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFileInto"
                    attr="folderPath" match="rule5" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerExistsTest"
                    attr="header" match="X-Header" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests/mail:dateTest"
                    attr="d" emptyset="0"/>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterActions/mail:actionRedirect"
                    attr="a" match="${dummy.account.name}" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter6" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request by Username whose Sieve action
            is a nested if clause and an action without 'if' clause.
        </t:objective>
        <t:steps>
        1. Create a sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailSieveScript">${rule6}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter6.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:headerExistsTest"
                    attr="header" match="X-Header" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterTests/mail:dateTest"
                    attr="d" emptyset="0"/>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:nestedRule/mail:filterActions/mail:actionRedirect"
                    attr="a" match="${dummy.account.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionTag"
                    attr="tagName" match="rule6" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter7" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Modify Filter Request by Username whose Sieve action
            is a nested if clause and an action without 'if' clause.
        </t:objective>
        <t:steps>
        1. Submit a ModifyFilterRules request.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <!-- ModifyFilterRules :: no condition= parameter for the "filterTests" tag -->
        <t:test>
            <t:request>
                <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                    <filterRules>
                        <filterRule name="${filter7.name}" active="1">
                            <filterTests>
                                <addressTest stringComparison="matches" part="all" header="From" index="0" value="*"/>
                                <sizeTest s="100" numberComparison="over" index="1"/>
                            </filterTests>
                            <filterActions>
                                 <actionFileInto folderPath="rule7" index="0" copy="0"/>
                            </filterActions>
                        </filterRule>
                    </filterRules>
                </ModifyFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:ModifyFilterRulesResponse" />
            </t:response>
        </t:test>

        <!-- GetFilterRules :: condition="allof" parameter is added as default value -->
        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter7.name}" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof"/>
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:addressTest"
                    attr="header" match="From" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:sizeTest"
                    attr="s" match="100" />
                <t:select
                    path="//mail:GetFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionFileInto"
                    attr="folderPath" match="rule7" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter8" type="smoke"
        bugids="ZCS-1173">
        <t:objective>Execute Get Filter Request to the Admin-before filter whose Sieve action
            is a nested if clause and an action without 'if' clause.
        </t:objective>
        <t:steps>
        1. Create an admin-before sieve script containing only action.
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraAdminSieveScriptBefore">${rule8}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetFilterRulesRequest xmlns="urn:zimbraAdmin"
                    type="before">
                    <account by="name">${account1.name}</account>
                </GetFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule"
                    attr="name" match="${filter8.name}" />
                <t:select
                    path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterTests/mail:envelopeTest"
                    attr="header" match="From" />
                <t:select
                    path="//admin:GetFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
                    attr="tagName" match="rule8" />
            </t:response>
        </t:test>
    </t:test_case>


    <t:test_case testcaseid="ZCS-1173_Filter9" type="smoke"
        bugids="ZCS-1173">
        <t:objective>
            Execute Modify Filter Request to the outgoing filter rule by Username whose Sieve action
            is a nested if clause and an action without 'if' clause.
        </t:objective>
        <t:steps>
        1. Submit a ModifyFilterRules request (outgoing).
        2. Verify the response of the GetFilterRulesRequest.
        </t:steps>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test id="modifyaccountrequest1">
            <t:request>
                <ModifyAccountRequest xmlns="urn:zimbraAdmin">
                    <id>${account1.id}</id>
                    <a n="zimbraMailOutgoingSieveScript">${rule9}</a>
                </ModifyAccountRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:ModifyAccountResponse/admin:account"/>
            </t:response>
        </t:test>

        <t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAccount">
                    <account by="name">${account1.name}</account>
                    <password>${defaultpassword.value}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
                <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
            </t:response>
        </t:test>

        <t:test>
            <t:request>
                <GetOutgoingFilterRulesRequest xmlns="urn:zimbraMail">
                    <account by="name">${account1.name}</account>
                </GetOutgoingFilterRulesRequest>
            </t:request>
            <t:response>
                <t:select
                    path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule"
                    attr="name" match="${filter9.name}" />
                <t:select
                    path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests"
                    attr="condition" match="allof" emptyset="1" />
                <t:select
                    path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterTests/mail:addressTest"
                    attr="header" match="To" />
                <t:select
                    path="//mail:GetOutgoingFilterRulesResponse/mail:filterRules/mail:filterRule/mail:filterActions/mail:actionTag"
                    attr="tagName" match="rule9" />
            </t:response>
        </t:test>
    </t:test_case>
</t:tests>
