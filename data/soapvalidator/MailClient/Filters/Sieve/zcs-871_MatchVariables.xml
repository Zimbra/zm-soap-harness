<t:tests xmlns:t="urn:zimbraTestHarness">

	<!-- Following bugs are included as part of this testcase -->
	<!-- zcs-871:- Sieve: a match variable ${1} which has a backslash does not 
		match the the same object -->

	<t:property name="account1.name"
		value="sieve1.${TIME}${COUNTER}@${defaultdomain.name}" />
	<t:property name="test_account1.password" value="test123" />
	<t:property name="subject1" value="sub\\1.test" />
	<t:property name="subject2" value="sub2\\\\..test" />
	<t:property name="subject3" value="\\\\sub3'test" />
	<t:property name="subject4" value="sub\\\\4test" />

	<t:property name="1" value="$\{1}" />
	<t:property name="var_one" value="$\{var_one}" />
	<t:property name="var_two" value="$\{var_two}" />

	<t:property name="sieve_test1"
		value='require ["log","fileinto","variables","tag"];			
		if header :comparator "i;ascii-casemap" :matches "Subject" "*"
		{
			log "Log as ${1}";
			if header :comparator "i;ascii-casemap" :matches "Subject" "${1}"
			{
				log "Should be executed as log1";
				tag "tag1";
			}			
		}   
	' />

	<t:property name="sieve_test2"
		value='require ["log","fileinto","variables","tag"];			
			if header :comparator "i;ascii-casemap" :matches "Subject" "*"
			{
				log "Log as ${1}";
				if header :comparator "i;ascii-casemap" :is "Subject" "${1}"
				{
					log "Should be executed as log2";
					tag "tag2";
				}			
			}   
	' />

	<t:property name="sieve_test3"
		value='require ["log","fileinto","variables","tag"];			
			if header :comparator "i;ascii-casemap" :matches "Subject" "*"
			{
				log "Log as ${1}";
				set "var_one" "${1}";	
				if header :comparator "i;ascii-casemap" :matches "Subject" "${var_one}"
				{
					log "Should be executed as log3";
					tag "tag3";		
				}			
			}   
	' />

	<t:property name="sieve_test4"
		value='require ["log","fileinto","variables","tag"];			
			if header :comparator "i;ascii-casemap" :matches "Subject" "*"
			{
				log "Log as ${1}";
				set :quotewildcard "var_two" "${1}";	
				if string :comparator "i;ascii-casemap" :matches "sub\\\\\\\\\\\\\\\\4test" "${var_two}"
				{
					log "Should be executed as log4";
					tag "tag4";		
				}			
			}   
	' />


	<t:test_case testcaseid="AcctSetup1_Sieve" type="always"
		bugids="zcs873">
		<t:objective> Create test account and login to first account
		</t:objective>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="name" set="account1.name" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetServerRequest xmlns="urn:zimbraAdmin">
					<server by="name">${zimbraServer.name}</server>
				</GetServerRequest>
			</t:request>
			<t:response>
				<t:select
					path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="mta.server" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="ZCS-871_Filter1" type="smoke"
		bugids="ZCS-871">
		<t:objective>Send a mail with subject containing backslash. Match
			variable ${1} should be able to match same object
		</t:objective>
		<t:steps>1. Assign a sieve rule to user 1.
		2. Send a message to user 1. 
		3. Check on user 1 message is in inbox and tagged with 'tag1'.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyAccountRequest_1">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraMailSieveScript">${sieve_test1}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject1}</su>
						<mp ct="text/plain">
							<content>content 1</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject1}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse//mail:su" contains="${subject1}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="tag1" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-871_Filter2" type="smoke"
		bugids="ZCS-871">
		<t:objective>Send a mail with subject containing backslash. Match
			variable ${1} should be able to match same object
		</t:objective>
		<t:steps>1. Assign a sieve rule to user 1.
		2. Send a message to user 1. 
		3. Check on user 1 message is in inbox and tagged with 'tag2'.
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyAccountRequest_2">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraMailSieveScript">${sieve_test2}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject2}</su>
						<mp ct="text/plain">
							<content>content 2</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message2.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject2}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse//mail:su" contains="${subject2}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="tag2" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-871_Filter3" type="smoke"
		bugids="ZCS-871">
		<t:objective>Send a mail with subject containing backslash. Match
			variable ${1} should be able to match same object
		</t:objective>
		<t:steps>1. Assign a sieve rule to user 1.
		2. Send a message to user 1. 
		3. Check on user 1 message is in inbox and tagged with 'tag3'.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyAccountRequest_3">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraMailSieveScript">${sieve_test3}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject3}</su>
						<mp ct="text/plain">
							<content>content 3</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message3.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject3}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse//mail:su" contains="${subject3}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="tag3" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="ZCS-871_Filter4" type="smoke"
		bugids="ZCS-871">
		<t:objective>Send a mail with subject containing backslash. Match
			variable ${1} should be able to match same object
		</t:objective>
		<t:steps>1. Assign a sieve rule to user 1.
		2. Send a message to user 1. 
		3. Check on user 1 message is in inbox and tagged with 'tag4'.
		</t:steps>

		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test id="modifyAccountRequest_4">
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account1.id}</id>
					<a n="zimbraMailSieveScript">${sieve_test4}</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account"
					attr="name" match="${account1.name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${subject4}</su>
						<mp ct="text/plain">
							<content>content 4</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="Sent_message4.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message">
					<query>in:inbox subject:${subject4}</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse//mail:su" contains="${subject4}" />
				<t:select path="//mail:SearchResponse/mail:m" attr="tn"
					match="tag4" />
			</t:response>
		</t:test>

	</t:test_case>

</t:tests>

