<t:tests xmlns:t="urn:zimbraTestHarness">
<!-- Test accounts declaration -->
<t:property name="account.name"
		value="test_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account1.name"
		value="test1_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account2.name"
		value="test2_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account3.name"
		value="test3_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account4.name"
		value="test4_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account5.name"
		value="test5_${TIME}${COUNTER}@${defaultdomain.name}" />
<t:property name="account6.name"
		value="test6_${TIME}${COUNTER}@${defaultdomain.name}" />
		
<!-- Variables declaration -->
<t:property name="msg_subject" value="Test Sieve" />


<!-- Sieve rules declaration -->
<t:property name="sieve_rule1"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test1_*@${defaultdomain.name}" {
deleteheader :count "gt" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:property name="sieve_rule2"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test2_*@${defaultdomain.name}" {
deleteheader :count "lt" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:property name="sieve_rule3"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test3_*@${defaultdomain.name}" {
deleteheader :count "eq" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:property name="sieve_rule4"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test4_*@${defaultdomain.name}" {
deleteheader :count "ne" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:property name="sieve_rule5"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test5_*@${defaultdomain.name}" {
replaceheader :newvalue "NewValue" :count "ge" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:property name="sieve_rule6"
	value='require ["editheader", "comparator-i;ascii-numeric", "relational"];
addheader "X-NewHeader" "Test";
addheader "X-Dummy-Header" "Test";
if header :matches "To" "test6_*@${defaultdomain.name}" {
replaceheader :newvalue "NewValue" :count "le" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
}
' />

<t:test_case testcaseid="Ping" type="always">
	<t:objective>basic system check</t:objective>
        <t:test required="true">
            <t:request>
                <PingRequest xmlns="urn:zimbraAdmin" />
            </t:request>
            <t:response>
                <t:select path="//admin:PingResponse" />
            </t:response>
        </t:test>
</t:test_case>

<!-- Create accounts for testing -->
<t:test_case testcaseid="CreateAccounts" type="smoke">
	<t:objective>create accounts</t:objective>
		<t:steps>
			1. Auth with admin
			2. create accounts
		</t:steps>
		
	<t:test required="true">
            <t:request>
                <AuthRequest xmlns="urn:zimbraAdmin">
                    <name>${admin.user}</name>
                    <password>${admin.password}</password>
                </AuthRequest>
            </t:request>
            <t:response>
                <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
            </t:response>
     </t:test>

	    <t:test>
	        <t:request xmlns="urn:zimbraAdmin">
	            <GetCosRequest>
	                <cos by="name">default</cos>
	            </GetCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="name" match="default"/>
	            <t:select path="//admin:GetCosResponse/admin:cos" attr="id" set="cosid"/>
	        </t:response>
	    </t:test>
	
	    <t:test>
	        <t:request>
	            <ModifyCosRequest xmlns="urn:zimbraAdmin">
	                <id>${cosid}</id>
	                <a n="zimbraSieveEditHeaderEnabled">TRUE</a>
	            </ModifyCosRequest>
	        </t:request>
	        <t:response>
	            <t:select path="//admin:ModifyCosResponse/admin:cos"/>            
	        </t:response>
	    </t:test>
	    	 
	 <t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account1.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule1}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account1.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account2.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule2}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account2.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account2.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule3}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account3.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account3.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account4.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule4}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account4.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account4.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account5.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule5}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account5.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account5.server" />
			</t:response>
	</t:test>
	
	<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${account6.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraAdminSieveScriptBefore">${sieve_rule6}</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account6.id" />
				<t:select
					path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
					set="account6.server" />
			</t:response>
	</t:test>
</t:test_case>

<!-- Run testcase -->
<t:test_case testcaseid="ZCS-892_rule1" type="smoke" bugids="ZCS-892">
		<t:objective>Verify deleteheader with :count match type "gt" will treat empty value as positive infinity</t:objective>
		<t:steps>
			deleteheader :count "gt" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account1
			3. auth with account1
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account1.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content1</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" count="1" match="Test" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>

<t:test_case testcaseid="ZCS-892_rule2" type="smoke" bugids="ZCS-892">
		<t:objective>Verify deleteheader with :count match type "lt" will treat empty value as positive infinity</t:objective>
		<t:steps>
			deleteheader :count "lt" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account2
			3. auth with account2
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account2.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content2</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account2.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" emptyset="1" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>

<t:test_case testcaseid="ZCS-892_rule3" type="smoke" bugids="ZCS-892">
		<t:objective>Verify deleteheader with :count match type "eq" will treat empty value as positive infinity</t:objective>
		<t:steps>
			deleteheader :count "eq" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account3
			3. auth with account3
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account3.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content3</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account3.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" count="1" match="Test" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>

<t:test_case testcaseid="ZCS-892_rule4" type="smoke" bugids="ZCS-892">
		<t:objective>Verify deleteheader with :count match type "ne" will treat empty value as positive infinity</t:objective>
		<t:steps>
			deleteheader :count "ne" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account4
			3. auth with account4
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account4.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content4</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
			
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account4.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" emptyset="1" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>

<t:test_case testcaseid="ZCS-892_rule5" type="smoke" bugids="ZCS-892">
		<t:objective>Verify replaceheader with :count match type "ge" will treat empty value as positive infinity</t:objective>
		<t:steps>
			replaceheader :newvalue "NewValue" :count "ge" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account5
			3. auth with account5
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account5.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content5</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account5.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" count="1" match="Test" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>

<t:test_case testcaseid="ZCS-892_rule6" type="smoke" bugids="ZCS-892">
		<t:objective>Verify replaceheader with :count match type "le" will treat empty value as positive infinity</t:objective>
		<t:steps>
			replaceheader :newvalue "NewValue" :count "le" :comparator "i;ascii-numeric" "X-Dummy-Header" "";
			
			1. Auth with account
			2. send message to account6
			3. auth with account6
			4. find and verify email headers
		</t:steps>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SendMsgRequest xmlns="urn:zimbraMail">
					<m>
						<e t="t" a="${account6.name}" />
						<su>${msg_subject}</su>
						<mp ct="text/plain">
							<content>content6</content>
						</mp>
					</m>
				</SendMsgRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SendMsgResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:test required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${account6.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>
		
		<t:test>
			<t:request>
				<SearchRequest xmlns="urn:zimbraMail" types="message"
					fetch="1">
					<query>in:Inbox</query>
				</SearchRequest>
			</t:request>
			<t:response>
				<t:select path="//mail:SearchResponse/mail:m" attr="id"
					set="msg1.id" />
			</t:response>
		</t:test>
		
		<t:resttest>
			<t:restServletRequest>
				<id>${msg1.id}</id>
			</t:restServletRequest>
			<t:restServletResponse>
				<t:select attr="X-NewHeader" count="1" match="Test" />
				<t:select attr="X-Dummy-Header" count="1" match="NewValue" />
			</t:restServletResponse>
		</t:resttest>
</t:test_case>


</t:tests>