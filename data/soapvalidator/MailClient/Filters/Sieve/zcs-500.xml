<t:tests xmlns:t="urn:zimbraTestHarness">

 <t:property name="domain_name" value="zdev-vm003.eng.zimbra.com" />
 <t:property name="cos.name" value="sievecoso" />
 <t:property name="account1.name"
  value="test${TIME}${COUNTER}@zdev-vm003.eng.zimbra.com" />
 <t:property name="account2.name"
  value="test${TIME}${COUNTER}@zdev-vm003.eng.zimbra.com" />
 <t:property name="account3.name"
  value="test${TIME}${COUNTER}@zdev-vm003.eng.zimbra.com" />
 <t:property name="msg01.subject" value="email04A" />
 <t:property name="msg01.file" value="${testMailRaw.root}/email04/email04A.txt" />
 <t:property name="msg02.subject" value="email04B" />
 <t:property name="msg02.file" value="${testMailRaw.root}/email04/email04B.txt" />

 <t:property name="server.zimbraAdmin" value="${zimbraServer.name}" />
 <t:test_case testcaseid="Ping" type="always">
  <t:objective>basic system check</t:objective>

  <t:test required="true">
   <t:request>
    <PingRequest xmlns="urn:zimbraAdmin" />
   </t:request>
   <t:response>
    <t:select path="//admin:PingResponse" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="admin_auth_account_create" type="always">
  <t:objective>login as the admin</t:objective>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="CreateDomainRequest0" type="smoke">
  <t:objective>create a Domain  </t:objective>
  <t:steps>
   1. Create a new Domain
  </t:steps>

  <t:test required="true">
   <t:request>
    <CreateDomainRequest xmlns="urn:zimbraAdmin">
     <name>${domain_name}</name>
    </CreateDomainRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateDomainResponse//admin:domain"
     attr="id" set="domain1.id" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="CreateCosRequest1" type="smoke">
  <t:objective> Create a COS with valid name </t:objective>
  <t:test id="CreateCosRequest1a">
   <t:request>
    <CreateCosRequest xmlns="urn:zimbraAdmin">
     <name xmlns="">${cos.name}</name>
    </CreateCosRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateCosResponse/admin:cos" attr="name"
     match="${cos.name}" />
    <t:select path="//admin:CreateCosResponse/admin:cos" attr="id"
     set="cos.id" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="GetAllServerRequest" type="smoke">
  <t:objective> Get the details of all the servers </t:objective>
  <t:test>
   <t:request>
    <GetAllServersRequest xmlns="urn:zimbraAdmin" />
   </t:request>
   <t:response>
    <t:select path="//admin:GetAllServersResponse/admin:server" attr="id"
     set="server.id" />
    <t:select path="//admin:GetAllServersResponse/admin:server" attr="name"
     set="server.name" />
   </t:response>
  </t:test>
 </t:test_case>





 <t:test_case testcaseid="AcctSetup1_filters_save" type="always">
  <t:objective>create test accounts</t:objective>
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${account1.name}</name>
     <password>${defaultpassword.value}</password>
     <a n="zimbraCOSId">${cos.id}</a>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="account1.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="account1.server" />
   </t:response>
  </t:test>
 

  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${account2.name}</name>
     <password>${defaultpassword.value}</password>
     <a n="zimbraCOSId">${cos.id}</a>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="account2.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="account2.server" />
   </t:response>
  </t:test>
  
  <t:test required="true">
   <t:request>
    <CreateAccountRequest xmlns="urn:zimbraAdmin">
     <name>${account3.name}</name>
     <password>${defaultpassword.value}</password>
     <a n="zimbraCOSId">${cos.id}</a>
    </CreateAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:CreateAccountResponse/admin:account"
     attr="id" set="account3.id" />
    <t:select
     path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]'
     set="account3.server" />
   </t:response>
  </t:test>

 <t:test required="true">
  <t:request>
   <AuthRequest xmlns="urn:zimbraAccount">
    <account by="name">${account1.name}</account>
    <password>${defaultpassword.value}</password>
   </AuthRequest>
  </t:request>
  <t:response>
   <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
   <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
  </t:response>
 </t:test>
 <t:test id="MsgActionRequestCreateTag">
  <t:request>
   <CreateTagRequest xmlns="urn:zimbraMail">
    <tag name="tag1" color="0" />
   </CreateTagRequest>
  </t:request>
  <t:response>
   <t:select path="//mail:CreateTagResponse/mail:tag" attr="id"
    set="tag.id1" />
  </t:response>
 </t:test>
 
 <t:test required="true">
  <t:request>
   <AuthRequest xmlns="urn:zimbraAccount">
    <account by="name">${account2.name}</account>
    <password>${defaultpassword.value}</password>
   </AuthRequest>
  </t:request>
  <t:response>
   <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
   <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
  </t:response>
 </t:test>
 <t:test id="MsgActionRequestCreateTag">
  <t:request>
   <CreateTagRequest xmlns="urn:zimbraMail">
    <tag name="tag2" color="0" />
   </CreateTagRequest>
  </t:request>
  <t:response>
   <t:select path="//mail:CreateTagResponse/mail:tag" attr="id"
    set="tag.id2" />
  </t:response>
 </t:test>
 
 
 <t:test required="true">
  <t:request>
   <AuthRequest xmlns="urn:zimbraAccount">
    <account by="name">${account3.name}</account>
    <password>${defaultpassword.value}</password>
   </AuthRequest>
  </t:request>
  <t:response>
   <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
   <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
  </t:response>
 </t:test>
 <t:test id="MsgActionRequestCreateTag">
  <t:request>
   <CreateTagRequest xmlns="urn:zimbraMail">
    <tag name="tag3" color="0" />
   </CreateTagRequest>
  </t:request>
  <t:response>
   <t:select path="//mail:CreateTagResponse/mail:tag" attr="id"
    set="tag.id3" />
  </t:response>
 </t:test>
  
 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByDomainName_Before_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>
   Execute Modify and Get Filter Request by domain name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <domain by="name">${domain_name}</domain>
      <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag1" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

<t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <domain by="name">${domain_name}</domain>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetDomainRequest xmlns="urn:zimbraAdmin" >
    <domain by="id">${domain1.id}</domain>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetDomainRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetDomainResponse/admin:domain/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag1" />
  </t:response>
  </t:test>


  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account2.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByDomainId_Before_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>
  Execute Modify and Get Filter Request by domain id for
   incoming mails.
  Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <domain by="id">${domain1.id}</domain>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag1" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <domain by="id">${domain1.id}</domain>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
 <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account2.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
<t:test>
  <t:request>
   <GetDomainRequest xmlns="urn:zimbraAdmin" >
    <domain by="id">${domain1.id}</domain>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetDomainRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetDomainResponse/admin:domain/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag1" />
  </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>



 <t:test_case testcaseid="ZCS-367_FilterByDomainId_After_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by domain id for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <domain by="id">${domain1.id}</domain>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag1" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <domain by="id">${domain1.id}</domain>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetDomainRequest xmlns="urn:zimbraAdmin" >
    <domain by="id">${domain1.id}</domain>
     <a n="zimbraAdminOutgoingSieveScriptAfter"/>
   </GetDomainRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetDomainResponse/admin:domain/admin:a[@n='zimbraAdminOutgoingSieveScriptAfter']"
    contains="tag1" />
  </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account2.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByDomainName_After_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by domain name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <domain by="name">${domain_name}</domain>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag1" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <domain by="name">${domain_name}</domain>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetDomainRequest xmlns="urn:zimbraAdmin" >
    <domain by="id">${domain1.id}</domain>
     <a n="zimbraAdminOutgoingSieveScriptAfter"/>
   </GetDomainRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetDomainResponse/admin:domain/admin:a[@n='zimbraAdminOutgoingSieveScriptAfter']"
    contains="tag1" />
  </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
<t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>
  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByCosId_After_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by cos Id for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <cos by="id">${cos.id}</cos>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag2" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <cos by="id">${cos.id}</cos>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetCosRequest xmlns="urn:zimbraAdmin" >
    <cos by="id">${cos.id}</cos>
     <a n="zimbraAdminOutgoingSieveScriptAfter"/>
   </GetCosRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetCosResponse/admin:cos/admin:a[@n='zimbraAdminOutgoingSieveScriptAfter']"
    contains="tag2" />
  </t:response>
  </t:test>


  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account2.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByCosName_After_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by cos name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <cos by="name">${cos.name}</cos>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag2" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <cos by="name">${cos.name}</cos>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetCosRequest xmlns="urn:zimbraAdmin" >
    <cos by="id">${cos.id}</cos>
     <a n="zimbraAdminOutgoingSieveScriptAfter"/>
   </GetCosRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetCosResponse/admin:cos/admin:a[@n='zimbraAdminOutgoingSieveScriptAfter']"
    contains="tag2" />
  </t:response>
  </t:test>


  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account2.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>
 
 
 
 <t:test_case testcaseid="ZCS-367_FilterByCosId_Before_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by cos id for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <cos by="id">${cos.id}</cos>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag2" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <cos by="id">${cos.id}</cos>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetCosRequest xmlns="urn:zimbraAdmin" >
    <cos by="id">${cos.id}</cos>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetCosRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetCosResponse/admin:cos/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag2" />
  </t:response>
  </t:test>


  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account2.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>

 <t:test_case testcaseid="ZCS-367_FilterByCosName_Before_outgoing"
  type="smoke" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by cos name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <cos by="name">${cos.name}</cos>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag2" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <cos by="name">${cos.name}</cos>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetCosRequest xmlns="urn:zimbraAdmin" >
    <cos by="name">${cos.name}</cos>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetCosRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetCosResponse/admin:cos/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag2" />
  </t:response>
  </t:test>



  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account2.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>


 <!-- Server name -->
<!-- Modify and GetFilterRequest are moved for server as part of zcs-806. Disabling the testcase. -->
 <t:test_case testcaseid="ZCS-367_FilterByServerId_After_outgoing"
  type="deprecated" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by server name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <server by="id">${server.id}</server>
      <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag3" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <server by="id">${server.id}</server>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag3" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag1" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetServerRequest xmlns="urn:zimbraAdmin" >
    <server by="id">${server.id}</server>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetServerRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetServerResponse/admin:server/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag3" />
  </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>

<t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account2.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>


 </t:test_case>

<!-- Modify and GetFilterRequest are moved for server as part of zcs-806. Disabling the testcase. -->
 <t:test_case testcaseid="ZCS-367_FilterByServerName_After_outgoing"
  type="deprecated" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by server name for
   incoming mails.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <server by="name">${server.name}</server>
       <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag3" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="after">
     <server by="name">${server.name}</server>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag3" />
   </t:response>
  </t:test>
    <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetServerRequest xmlns="urn:zimbraAdmin" >
    <server by="name">${server.name}</server>
     <a n="zimbraAdminOutgoingSieveScriptAfter"/>
   </GetServerRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetServerResponse/admin:server/admin:a[@n='zimbraAdminOutgoingSieveScriptAfter']"
    contains="tag3" />
  </t:response>
  </t:test>

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
  
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>
 
 
 <!-- Modify and GetFilterRequest are moved for server as part of zcs-806. Disabling the testcase. -->
 <t:test_case testcaseid="ZCS-367_FilterByServerId_Before_outgoing"
  type="deprecated" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by server id for
   incoming mails.
   Verify that GetFilter by account also returns the same filter rules.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <server by="id">${server.id}</server>
    <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag3" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <server by="id">${server.id}</server>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag3" />
   </t:response>
  </t:test>
    <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetServerRequest xmlns="urn:zimbraAdmin" >
    <server by="id">${server.id}</server>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetServerRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetServerResponse/admin:server/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag3" />
  </t:response>
  </t:test>


  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />

   </t:response>
  </t:test>

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>
 
 
<!-- Modify and GetFilterRequest are moved for server as part of zcs-806. Disabling the testcase. -->
 <t:test_case testcaseid="ZCS-367_FilterByServerName_Before_outgoing"
  type="deprecated" bugids="ZCS-367">
  <t:objective>Execute Modify and Get Filter Request by server name for
   incoming mails.
   Verify that GetFilter by account also returns the same filter rules.
   Verify that appropriate LDAP attribute is modified.</t:objective>

  <t:property name="server.zimbraAccount" value="${account1.server}" />

  <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:property name="filter1.name" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />
  <t:property name="filter1.subject" value="filter${TIME}${COUNTER}" />


  <t:test>
   <t:request>
    <ModifyOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <server by="name">${server.name}</server>
     <filterRules>
      <filterRule name="${filter1.name}" active="1">
       <filterTests condition="anyof" xmlns="urn:zimbraMail">
        <headerTest header="Subject" stringComparison="contains"
         value="${msg01.subject}" />
       </filterTests>
       <filterActions xmlns="urn:zimbraMail">
        <actionTag tagName="tag3" />
        <actionStop />
       </filterActions>
      </filterRule>
     </filterRules>
    </ModifyOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:ModifyOutgoingFilterRulesResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin"
     type="before">
     <server by="name">${server.name}</server>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag3" />
   </t:response>
  </t:test>
    <t:test>
   <t:request>
    <GetOutgoingFilterRulesRequest xmlns="urn:zimbraAdmin" type="before">
     <account by="name">${account1.name}</account>
    </GetOutgoingFilterRulesRequest>
   </t:request>
   <t:response>
    <t:select
     path="//admin:GetOutgoingFilterRulesResponse/admin:filterRules/admin:filterRule/mail:filterActions/mail:actionTag"
     attr="tagName" match="tag2" />
   </t:response>
  </t:test>
  <t:test>
  <t:request>
   <GetServerRequest xmlns="urn:zimbraAdmin" >
    <server by="name">${server.name}</server>
     <a n="zimbraAdminOutgoingSieveScriptBefore"/>
   </GetServerRequest>
  </t:request>
  <t:response>
   <t:select
    path="//admin:GetServerResponse/admin:server/admin:a[@n='zimbraAdminOutgoingSieveScriptBefore']"
    contains="tag3" />
  </t:response>
  </t:test>

 <t:test required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAccount">
     <account by="name">${account1.name}</account>
     <password>${defaultpassword.value}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$" />
    <t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
   </t:response>
  </t:test>
 
  <t:test >
    <t:request>
        <SendMsgRequest xmlns="urn:zimbraMail">
            <m>
          <e t="t" a='${account1.name}'/>
          <su>${msg01.subject}</su>
          <mp ct="text/plain">
              <content>Good Morning</content>
          </mp>
           </m>
        </SendMsgRequest>
      </t:request>
      <t:response>
          <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="msg1.id"/>
      </t:response>
  </t:test>
 

  <t:test id="filters_basic02d" depends="filters_basic01a">
   <t:request>
    <SearchRequest xmlns="urn:zimbraMail" types="message">
     <query>subject:(${msg01.subject})</query>
    </SearchRequest>
   </t:request>
   <t:response>
    <t:select path="//mail:SearchResponse/mail:m" attr="su"
     match="${msg01.subject}" />
    <t:select path="//mail:SearchResponse/mail:m" attr="tn"
     match="tag1" />
   </t:response>
  </t:test>
 </t:test_case>


 <t:finally>
  <t:test id="admin_login" required="true">
   <t:request>
    <AuthRequest xmlns="urn:zimbraAdmin">
     <name>${admin.user}</name>
     <password>${admin.password}</password>
    </AuthRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
   </t:response>
  </t:test>

  <t:test required="false">
   <t:request>
    <DeleteAccountRequest xmlns="urn:zimbraAdmin">
     <id>${account1.id}</id>
    </DeleteAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:DeleteAccountResponse" />
   </t:response>
  </t:test>
  <t:test required="false">
   <t:request>
    <DeleteAccountRequest xmlns="urn:zimbraAdmin">
     <id>${account2.id}</id>
    </DeleteAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:DeleteAccountResponse" />
   </t:response>
  </t:test>
  <t:test required="false">
   <t:request>
    <DeleteAccountRequest xmlns="urn:zimbraAdmin">
     <id>${account3.id}</id>
    </DeleteAccountRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:DeleteAccountResponse" />
   </t:response>
  </t:test>

  <t:test>
   <t:request>
    <DeleteDomainRequest xmlns="urn:zimbraAdmin">
     <id>${domain1.id}</id>
    </DeleteDomainRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:DeleteDomainResponse" />
   </t:response>
  </t:test>
  <t:test>
   <t:request>
    <DeleteCosRequest xmlns="urn:zimbraAdmin">
     <id>${cos.id}</id>
    </DeleteCosRequest>
   </t:request>
   <t:response>
    <t:select path="//admin:DeleteCosResponse" />
   </t:response>
  </t:test>
 </t:finally>

</t:tests>