<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account5.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account6.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account7.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="filter1.name" value="filter1.${TIME}.${COUNTER}"/>
<t:property name="filter2.name" value="filter2.${TIME}.${COUNTER}"/>
<t:property name="filter4.name" value="filter4.${TIME}.${COUNTER}"/>
<t:property name="filter5.name" value="filter5.${TIME}.${COUNTER}"/>
<t:property name="mail.subject" value="TEST SUBJECT"/>
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Filter_Contains_AccountSetup" type="always" >
    <t:objective>create test account</t:objective>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
         <t:response>
             <t:select path="//admin:PingResponse"/>
         </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
	    <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="displayName">Account One</a>
            </CreateAccountRequest>
        </t:request>
	    <t:response>
                <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
                <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="displayName">Account Two</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="displayName">Display Name</a>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account4.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account4.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account4.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account5.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account5.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account5.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account6.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account6.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account6.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account7.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account7.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account7.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_Contains_01" type="smoke">
    <t:objective> Verify messages for rule "contains" are filtered </t:objective>
	    <t:steps> 
			  1. Login to test account 2
			  2. Create a filter based on "FROM -> contains -> account3 "
			  3. Login to account 3 and send a message to account2 (account3 has display name as "Display Name")
			  4. Login to account2 and verify the message is filtered
        </t:steps>

		<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
	  <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter1.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="from" stringComparison="contains" value="${account3.name}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account2.name}'/>
                    <e t="f" a='${account3.name}' p="Display Name"/>
					<su>${mail.subject}</su>
					<mp ct="text/plain">
					<content></content>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>from:${account3.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Filter_Contains_02" type="smoke">
    <t:objective> Verify messages for rule " does not contains" are filtered </t:objective>
	    <t:steps> 
			  1. Login to test account 3
			  2. Create a filter based on "FROM -> not: contains -> account2 "
			  3. Login to account 1 and send a message to account3 (account3 has display name as "Display Name") with From as account1
			  4. Login to account3 and verify the message is filtered
        </t:steps>

		<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
	  <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter2.name}" active="1">
                         <filterTests condition="anyof">
                         <headerTest header="from" stringComparison="contains" negative="1" value="${account3.name}"/>                    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a='${account3.name}'/>
                    <e t="f" a='${account1.name}' p="Account One"/>
					<su>${mail.subject}</su>
					<mp ct="text/plain">
					<content></content>
					</mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

	<t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>from:${account1.name}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<!-- 

Deprecated: http://bugzilla.zimbra.com/show_bug.cgi?id=33793#c12
See Filter_Contains_06 for the non-trailing space test.

-->
<t:test_case testcaseid="Filter_Contains_04" type="deprecated">
    <t:objective> Verify filters handle the case where the substring spans multiple lines (with trailing space) </t:objective>
    <t:steps> 
		  1. Login to test account4
		  2. Create a filter based on "Content ->  contains -> "text string"
		  3. Inject message where "text string" spans two lines
		  4. Verify the message is filtered
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account4.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account4.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
	  <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                         <bodyTest caseSensitive="0" value="text string"/>    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
   
	<t:property name="message4.file" value="${testMailRaw.root}/email42/email42.txt"/>
	<t:property name="message4.subject" value="email42A"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message4.file}</filename>
			<to>${account4.name}</to>
			<from>${account1.name}</from>
			<server>${account4.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${message4.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<!-- 

Deprecated: http://bugzilla.zimbra.com/show_bug.cgi?id=33793#c12
See Filter_Contains_06 for the non-trailing space test.

-->
<t:test_case testcaseid="Filter_Contains_05" type="deprecated">
    <t:objective> Verify filters handle the case where the substring spans the entire line (with trailing spaces)</t:objective>
    <t:steps> 
		  1. Login to test account5
		  2. Create a filter based on "Content ->  contains -> "simple text"
		  3. Inject message where "text string" spans two lines
		  4. Verify the message is filtered
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account5.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account5.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
	  <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                         <bodyTest caseSensitive="0" value="simple text"/>    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
	<t:property name="message5.file" value="${testMailRaw.root}/email42/email42.txt"/>
	<t:property name="message5.subject" value="email42A"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message5.file}</filename>
			<to>${account5.name}</to>
			<from>${account1.name}</from>
			<server>${account5.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${message5.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Filter_Contains_06" type="smoke">
    <t:objective> Verify filters handle the case where the substring spans multiple lines </t:objective>
    <t:steps> 
		  1. Login to test account6
		  2. Create a filter based on "Content ->  contains -> "text string"
		  3. Inject message where "text string" spans two lines
		  4. Verify the message is filtered
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account6.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account6.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
	 <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter4.name}" active="1">
                         <filterTests condition="anyof">
                         <bodyTest caseSensitive="0" value="text string"/>    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
	<t:property name="message6.file" value="${testMailRaw.root}/email42/email42b.txt"/>
	<t:property name="message6.subject" value="email42B"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message6.file}</filename>
			<to>${account6.name}</to>
			<from>${account1.name}</from>
			<server>${account6.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${message6.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="Filter_Contains_07" type="smoke">
    <t:objective> Verify filters handle the case where the substring spans the entire line (without trailing spaces) </t:objective>
    <t:steps> 
		  1. Login to test account7
		  2. Create a filter based on "Content ->  contains -> "simple text"
		  3. Inject message where "text string" spans two lines
		  4. Verify the message is filtered
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account7.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account7.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
	   
     <t:test>
        <t:request>
            <ModifyFilterRulesRequest xmlns="urn:zimbraMail">
                <filterRules>
					<filterRule name="${filter5.name}" active="1">
                         <filterTests condition="anyof">
                         <bodyTest caseSensitive="0" value="simple text"/>    	     
                        </filterTests>
                        <filterActions> 
                        	<actionFlag flagName="flagged" />    
                        	<actionStop />                 
                        </filterActions>
                    </filterRule>
                 </filterRules>
            </ModifyFilterRulesRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ModifyFilterRulesResponse"/>
        </t:response>
    </t:test>
    
    
	<t:property name="message7.file" value="${testMailRaw.root}/email42/email42b.txt"/>
	<t:property name="message7.subject" value="email42B"/>

    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${message7.file}</filename>
			<to>${account7.name}</to>
			<from>${account1.name}</from>
			<server>${account7.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>


    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:${message7.subject}</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="f" match=".*f.*"/>
        </t:response>
    </t:test>

</t:test_case>


</t:tests>





