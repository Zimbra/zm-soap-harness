<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="domain.name" value="test${TIME}${COUNTER}.com" />
	<t:property name="acct1.name" value="test1${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct2.name" value="test2${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct3.name" value="testv3${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct4.name" value="test4${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct5.name" value="testa5${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct6.name" value="test6${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="ou1.name" value="ZimbraOU${COUNTER}" />
	<t:property name="hab.notes" value="Group created notes" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="CreateAccount/Domain" type="always">
		<t:objective>Account Setup </t:objective>
		<t:steps>
			1. Login into admin.
			2. Create test accounts.
		</t:steps>

		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateDomainRequest xmlns="urn:zimbraAdmin">
					<name>${domain.name}</name>
					<a n="zimbraNotes">test of adding an OU</a>
				</CreateDomainRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateDomainResponse/admin:domain"
					attr="id" set="domain.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct3.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraHABSeniorityIndex">30</a>
					<a n="givenName">acct3</a>
					<a n="displayName">display_acct3</a>
					<a n="company">Company3</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account3.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct4.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraHABSeniorityIndex">80</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account4.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct5.name}</name>
					<password>${defaultpassword.value}</password>
					<a n="zimbraHABSeniorityIndex">30</a>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account5.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct6.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account6.id" />
			</t:response>
		</t:test>
	</t:test_case>

	<t:test_case testcaseid="CreateOUAndHABGroups" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Create a new HAB group and link it to existing OU
		</t:objective>
		<t:steps>
			1. Create a new HAB OU under domain ${domain.name}.
			2. Fire
			CreateHABGroupRequest to create a new HAB non root group in above OU.
			3. Verify request should succeed.
		</t:steps>

		<t:test>
			<t:request>
				<HABOrgUnitRequest op="create" name="${ou1.name}"
					xmlns="urn:zimbraAdmin">
					<domain by="name">${domain.name}</domain>
				</HABOrgUnitRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:HABOrgUnitResponse//admin:habOrgUnitName"
					match="${ou1.name}" />
			</t:response>
		</t:test>

		<t:property name="hab.group1_name" value="grouphab1${TIME}" />
		<t:property name="hab.group1" value="${hab.group1_name}@${domain.name}" />
		<t:property name="hab.group2_name" value="grouphab2${TIME}" />
		<t:property name="hab.group2" value="${hab.group2_name}@${domain.name}" />
		<t:property name="hab.group3_name" value="grouphab3${TIME}" />
		<t:property name="hab.group3" value="${hab.group3_name}@${domain.name}" />
		<t:property name="hab.group4_name" value="grouphab4${TIME}" />
		<t:property name="hab.group4" value="${hab.group4_name}@${domain.name}" />
		<t:property name="hab.group5_name" value="grouphab5${TIME}" />
		<t:property name="hab.group5" value="${hab.group5_name}@${domain.name}" />
		<t:property name="hab.group6_name" value="grouphab6${TIME}" />
		<t:property name="hab.group6" value="${hab.group6_name}@${domain.name}" />
		<t:property name="hab.group7_name" value="grouphab7${TIME}" />
		<t:property name="hab.group7" value="${hab.group7_name}@${domain.name}" />


		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group1_name}"
					habOrgUnit="${ou1.name}" name="${hab.group1}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group1}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group1_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group1_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group2_name}"
					habOrgUnit="${ou1.name}" name="${hab.group2}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group2}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group2_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group2_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group3_name}"
					habOrgUnit="${ou1.name}" name="${hab.group3}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group3}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group3_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group3_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group4_name}"
					habOrgUnit="${ou1.name}" name="${hab.group4}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group4}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group4_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group4_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group5_name}"
					habOrgUnit="${ou1.name}" name="${hab.group5}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group5}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group5_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group5_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group6_name}"
					habOrgUnit="${ou1.name}" name="${hab.group6}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group6}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group6_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group6_name}" />
			</t:response>
		</t:test>

		<t:property name="member_url"
			value="ldap:///??sub?(mail=test*@${domain.name})" />

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group7_name}"
					habOrgUnit="${ou1.name}" name="${hab.group7}" dynamic="1"
					xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
					<a n="memberURL">${member_url}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group7}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group7_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group7_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyDomainRequest xmlns="urn:zimbraAdmin">
					<id>${domain.id}</id>
					<a n="zimbraHierarchicalAddressBookRoot">${hab.group1_name}</a>
				</ModifyDomainRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyDomainResponse/admin:domain" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group1_id}</id>
					<dlm>${hab.group2}</dlm>
					<dlm>${hab.group3}</dlm>
					<dlm>${hab.group7}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group2_id}</id>
					<dlm>${acct3.name}</dlm>
					<dlm>${acct4.name}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group3_id}</id>
					<dlm>${hab.group4}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group5_id}</id>
					<dlm>${acct5.name}</dlm>
					<dlm>${acct4.name}</dlm>
					<dlm>${acct3.name}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyDistributionListRequest xmlns="urn:zimbraAdmin">
					<id>${hab.group7_id}</id>
					<a n="zimbraHABSeniorityIndex">70</a>
				</ModifyDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyDistributionListResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_01" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			individual members
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for group2 to get the HAB
			members.
			2. Verify response contains user4 and then user3. Sorted
			alphabetically
			Verify attribute of user 3 added should also be
			returned.
		</t:steps>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${acct1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group2}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]"
					attr="name" match="${acct4.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]/acct:attr"
					match="${acct4.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]"
					attr="name" match="${acct3.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]/acct:attr[@name='firstName']"
					match="acct3" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]/acct:attr[@name='displayName']"
					match="display_acct3" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]/acct:attr[@name='company']"
					match="Company3" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]/acct:attr[@name='email']"
					match="${acct3.name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_02" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			members
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for group1.
			2. Verify
			empty response to be returned.
		</t:steps>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group1}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:GetDistributionListMembersResponse"
					attr="total" match="0" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember"
					emptyset="1" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_03" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest for group with no
			members
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for group6 to get the DL
			members.
			2. Verify response as empty as no members are present in the
			group.
		</t:steps>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group6}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:GetDistributionListMembersResponse"
					attr="total" match="0" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember"
					emptyset="1" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_04" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			members from dynamic group
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for group 7 to get the
			dynamic group members.
			2. Verify as per member URL all users created
			for above domain should be returned in response.
		</t:steps>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group7}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]"
					attr="name" match="${acct4.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]"
					attr="name" match="${acct5.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[3]"
					attr="name" match="${acct3.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[4]"
					attr="name" match="${acct1.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[5]"
					attr="name" match="${acct6.name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_05" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			members from static group based on seniority index
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for static group group5
			to get the group members.
			2. verify user 4, user 5 and user 6 are
			returned in response.
		</t:steps>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group5}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]"
					attr="name" match="${acct4.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]"
					attr="name" match="${acct5.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[3]"
					attr="name" match="${acct3.name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_06" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			members from static group with limit=1
		</t:objective>
		<t:steps>
			1. GetDistributionListMemberRequest for group 5 to get just
			single member,.
		</t:steps>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount" limit="1">
					<dl>${hab.group5}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]"
					attr="name" match="${acct4.name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="GetHABMembers_07" type="smoke"
		bugids="ZCS-5709">
		<t:objective>Fire GetDistributionListMemberrequest to get the list of
			members with same seniority index
		</t:objective>
		<t:steps>
			1. ModifyAccountRequest to change the seniority index of user
			6 to 30.
			2. GetDistributionListMemberrequest for group 7.
			3. Verify in
			response user3, user5 and user 6 should be sorted alphabetically.
		</t:steps>

		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<ModifyAccountRequest xmlns="urn:zimbraAdmin">
					<id>${account6.id}</id>
					<a n="zimbraHABSeniorityIndex">30</a>
				</ModifyAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:ModifyAccountResponse/admin:account" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AuthRequest xmlns="urn:zimbraAccount">
					<account by="name">${acct1.name}</account>
					<password>${defaultpassword.value}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//acct:AuthResponse/acct:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListMembersRequest
					xmlns="urn:zimbraAccount">
					<dl>${hab.group7}</dl>
				</GetDistributionListMembersRequest>
			</t:request>
			<t:response>
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[1]"
					attr="name" match="${acct4.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[2]"
					attr="name" match="${acct6.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[3]"
					attr="name" match="${acct5.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[4]"
					attr="name" match="${acct3.name}" />
				<t:select
					path="//acct:GetDistributionListMembersResponse/acct:groupMember[5]"
					attr="name" match="${acct1.name}" />
			</t:response>
		</t:test>

	</t:test_case>

</t:tests>	