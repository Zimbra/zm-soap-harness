<t:tests xmlns:t="urn:zimbraTestHarness">

	<t:property name="domain.name" value="test${TIME}${COUNTER}.com" />
	<t:property name="adminAcct1.name" value="test1${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="acct2.name" value="test2${TIME}.${COUNTER}@${domain.name}" />
	<t:property name="ou1.name" value="ZimbraOU${COUNTER}" />
	<t:property name="hab.notes" value="Group created notes" />

	<t:test_case testcaseid="Ping" type="always">
		<t:objective>basic system check</t:objective>

		<t:test required="true">
			<t:request>
				<PingRequest xmlns="urn:zimbraAdmin" />
			</t:request>
			<t:response>
				<t:select path="//admin:PingResponse" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="CreateAccount/Domain" type="always">
		<t:objective>Account Setup </t:objective>
		<t:steps>
			1. Login into admin.
			2. Create test accounts.
		</t:steps>

		<t:test id="admin_login" required="true">
			<t:request>
				<AuthRequest xmlns="urn:zimbraAdmin">
					<name>${admin.user}</name>
					<password>${admin.password}</password>
				</AuthRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AuthResponse/admin:authToken" set="authToken" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateDomainRequest xmlns="urn:zimbraAdmin">
					<name>${domain.name}</name>
					<a n="zimbraNotes">test of adding an OU</a>
				</CreateDomainRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateDomainResponse/admin:domain"
					attr="id" set="domain.id" />
			</t:response>
		</t:test>

		<!-- Create an admin account under this domain -->
		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${adminAcct1.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account1.id" />
			</t:response>
		</t:test>

		<t:test required="true">
			<t:request>
				<CreateAccountRequest xmlns="urn:zimbraAdmin">
					<name>${acct2.name}</name>
					<password>${defaultpassword.value}</password>
				</CreateAccountRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateAccountResponse/admin:account"
					attr="id" set="account2.id" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="CreateOUAndHABGroups" type="smoke"
		bugids="ZCS-5397">
		<t:objective>Create a new HAB group and link it to existing OU
		</t:objective>
		<t:steps>
			1. Create a new HAB OU under domain ${domain.name}.
			2. Fire
			CreateHABGroupRequest to create a new HAB non root group in above OU.
			3. Verify request should succeed.
		</t:steps>

		<t:test>
			<t:request>
				<HABOrgUnitRequest op="create" name="${ou1.name}"
					xmlns="urn:zimbraAdmin">
					<domain by="name">${domain.name}</domain>
				</HABOrgUnitRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:HABOrgUnitResponse//admin:habOrgUnitName"
					match="${ou1.name}" />
			</t:response>
		</t:test>

		<t:property name="hab.group1_name" value="grouphab1${TIME}" />
		<t:property name="hab.group1" value="${hab.group1_name}@${domain.name}" />
		<t:property name="hab.group2_name" value="grouphab2${TIME}" />
		<t:property name="hab.group2" value="${hab.group2_name}@${domain.name}" />
		<t:property name="hab.group3_name" value="grouphab3${TIME}" />
		<t:property name="hab.group3" value="${hab.group3_name}@${domain.name}" />
		<t:property name="hab.group4_name" value="grouphab4${TIME}" />
		<t:property name="hab.group4" value="${hab.group4_name}@${domain.name}" />
		<t:property name="hab.group5_name" value="grouphab5${TIME}" />
		<t:property name="hab.group5" value="${hab.group5_name}@${domain.name}" />
		<t:property name="hab.group6_name" value="grouphab6${TIME}" />
		<t:property name="hab.group6" value="${hab.group6_name}@${domain.name}" />
		<t:property name="hab.group7_name" value="grouphab7${TIME}" />
		<t:property name="hab.group7" value="${hab.group7_name}@${domain.name}" />
		<t:property name="hab.group8_name" value="grouphab8${TIME}" />
		<t:property name="hab.group8" value="${hab.group8_name}@${domain.name}" />
		<t:property name="hab.group9_name" value="grouphab9${TIME}" />
		<t:property name="hab.group9" value="${hab.group9_name}@${domain.name}" />
		<t:property name="hab.group10_name" value="grouphab10${TIME}" />
		<t:property name="hab.group10" value="${hab.group10_name}@${domain.name}" />

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group1_name}"
					habOrgUnit="${ou1.name}" name="${hab.group1}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group1}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group1_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group1_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group2_name}"
					habOrgUnit="${ou1.name}" name="${hab.group2}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group2}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group2_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group2_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group3_name}"
					habOrgUnit="${ou1.name}" name="${hab.group3}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group3}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group3_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group3_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group4_name}"
					habOrgUnit="${ou1.name}" name="${hab.group4}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group4}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group4_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group4_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group5_name}"
					habOrgUnit="${ou1.name}" name="${hab.group5}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group5}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group5_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group5_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group6_name}"
					habOrgUnit="${ou1.name}" name="${hab.group6}" xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group6}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group6_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group6_name}" />
			</t:response>
		</t:test>

		<t:property name="member_url" value="ldap:///??sub?(mail=*@${domain.name})" />

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group7_name}"
					habOrgUnit="${ou1.name}" name="${hab.group7}" dynamic="1"
					xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
					<a n="memberURL">${member_url}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group7}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group7_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group7_name}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group8_name}"
					habOrgUnit="${ou1.name}" name="${hab.group8}" dynamic="1"
					xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
					<a n="memberURL">${member_url}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group8}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group8_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group8_name}" />
			</t:response>
		</t:test>

		<t:property name="member_url_1" value="ldap:///??sub?(mail=*ab@${domain.name})" />

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group9_name}"
					habOrgUnit="${ou1.name}" name="${hab.group9}" dynamic="1"
					xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
					<a n="memberURL">${member_url_1}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group9}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group9_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group9_name}" />
			</t:response>
		</t:test>

		<t:property name="member_url"
			value="ldap:///??sub?(mail=*alias@${domain.name})" />

		<t:test>
			<t:request>
				<CreateHABGroupRequest habGroupName="${hab.group10_name}"
					habOrgUnit="${ou1.name}" name="${hab.group10}" dynamic="1"
					xmlns="urn:zimbraAdmin">
					<a n="zimbraNotes">${hab.notes}</a>
					<a n="memberURL">${member_url}</a>
				</CreateHABGroupRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="name" match="${hab.group10}" />
				<t:select path="//admin:CreateHABGroupResponse//admin:dl"
					attr="id" set="hab.group10_id" />
				<t:select
					path="//admin:CreateHABGroupResponse//admin:a[@n='displayName']"
					match="${hab.group10_name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_1" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to get the members added to HAB
			group.
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add group 2 to group 1 and
			group3 to group2.
			2. Verify request should succeed.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group1_id}</id>
					<dlm>${hab.group2}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group2_id}</id>
					<dlm>${hab.group3}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>


		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group1_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group2}" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group2_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group3}" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="AddHABMember_2" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add the members to HAB group.
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add multiple groups in single
			request
			2. Verify request should succeed.
			3. Verify in response of
			GetDistributionListRequest should return all the groups under a
			parent group.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group4_id}</id>
					<dlm>${hab.group5}</dlm>
					<dlm>${hab.group6}</dlm>
					<dlm>${acct2.name}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group4_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group5}" />
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group6}" />
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${acct2.name}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_3" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add the same group as a
			member of existing group
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add same group5 as a member
			of existing group4.
			2. Verify request should succeed.
			3. Verify in
			response of GetDistributionListRequest should not duplicate the
			entries for group5.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group4_id}</id>
					<dlm>${hab.group5}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group4_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group5}" />
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group6}" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_4" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add an already membered group
			to some other group
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add same group5 as a member
			of existing group1.
			2. Verify request should succeed.
			3. Verify in
			response of GetDistributionListRequest should not duplicate the
			entries for group5.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group1_id}</id>
					<dlm>${hab.group5}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group1_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group5}" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="AddHABMember_5" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a dynamic group to static
			group
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add same group8 as a member
			of existing group1.
			2. Verify request should succeed.
			3. Verify in
			response of GetDistributionListRequest group 8 should be shown as
			child of group1.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group1_id}</id>
					<dlm>${hab.group8}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_6" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a static group to dynamic
			group
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add static group as a member
			of dynamic group.
			2. Verify request should fail.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group8_id}</id>
					<dlm>${hab.group2}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_7" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a dynamic group to static
			group which does not compute to memberURL.
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add group9 as a member of
			existing group3.
			2. Verify request should succeed.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group3_id}</id>
					<dlm>${hab.group9}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListMemberResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<GetDistributionListRequest xmlns="urn:zimbraAdmin">
					<dl by="id">${hab.group3_id}</dl>
				</GetDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:GetDistributionListResponse//admin:dlm"
					match="${hab.group9}" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="AddHABMember_8" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a dynamic group to
			dynamic group.
		</t:objective>
		<t:steps>
			1. Fire AddHABMemberRequest and add group9 as a member of
			existing group3.
			2. Verify request should succeed.
		</t:steps>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group8_id}</id>
					<dlm>${hab.group7}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
			</t:response>
		</t:test>

	</t:test_case>

	<t:test_case testcaseid="AddHABMember_9" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a dynamic group to a
			normal DL
		</t:objective>
		<t:steps>
			1. Create a new DL using CreateDLRequest.
			1. Fire
			AddHABMemberRequest
			and add group9 as a member of existing group3.
			2.
			Verify request
			should succeed.
		</t:steps>

		<t:property name="test_list1.name" value="normalDL${TIME}@${domain.name}" />

		<t:test required="true">
			<t:request>
				<CreateDistributionListRequest xmlns="urn:zimbraAdmin"
					dynamic="0">
					<name>${test_list1.name}</name>
				</CreateDistributionListRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:CreateDistributionListResponse/admin:dl"
					attr="id" set="test_list1.id" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${test_list1.id}</id>
					<dlm>${hab.group7}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
			</t:response>
		</t:test>

	</t:test_case>


	<t:test_case testcaseid="AddHABMember_10" type="smoke"
		bugids="ZCS-5396">
		<t:objective>Fire AddHABMemberRequest to add a dynamic group to a
			normal DL
		</t:objective>
		<t:steps>
			1. Create a new DL using CreateDLRequest.
			1. Fire
			AddHABMemberRequest
			and add group9 as a member of existing group3.
			2.
			Verify request
			should succeed.
		</t:steps>

		<t:property name="group_hab2_alias" value="groupHab2alias@${domain.name}" />

		<t:test>
			<t:request>
				<AddDistributionListAliasRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group2_id}</id>
					<alias>${group_hab2_alias}</alias>
				</AddDistributionListAliasRequest>
			</t:request>
			<t:response>
				<t:select path="//admin:AddDistributionListAliasResponse" />
			</t:response>
		</t:test>

		<t:test>
			<t:request>
				<AddDistributionListMemberRequest
					xmlns="urn:zimbraAdmin">
					<id>${hab.group2_id}</id>
					<dlm>${hab.group10}</dlm>
				</AddDistributionListMemberRequest>
			</t:request>
			<t:response>
				<t:select path="//zimbra:Code" match="^service.INVALID_REQUEST" />
			</t:response>
		</t:test>

	</t:test_case>


</t:tests>