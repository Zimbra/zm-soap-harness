<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account4.name" value="test4.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="mail01.file" value="${testMailRaw.root}/Bugs/69488/bug69488.txt"/>
<t:property name="mail01.subject" value="Voicemail"/>

<t:property name="rights.workflow"		value="x"/>
<t:property name="rights.none"			value=""/>
<t:property name="rights.read"			value="r"/>
<t:property name="rights.write"			value="w"/>
<t:property name="rights.insert"		value="i"/>
<t:property name="rights.delete"		value="d"/>
<t:property name="rights.administer"	value="a"/>
<t:property name="rights.manager"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}"/>
<t:property name="rights.admin"		value="${rights.read}${rights.write}${rights.insert}${rights.delete}${rights.workflow}${rights.administer}"/>
<t:property name="grant.usr"			value="usr"/>

<t:property name="op.grant"			value="grant"/>
<t:property name="op.read"			value="read"/>
<t:property name="op.unread"		value="!read"/>
<t:property name="op.flag"			value="flag"/>
<t:property name="op.unflag"		value="!flag"/>
<t:property name="op.tag"			value="tag"/>
<t:property name="op.untag"			value="!tag"/>
<t:property name="op.move"			value="move"/>
<t:property name="op.delete"		value="delete"/>

<t:test_case testcaseid="Account Setup" type="always" >
    <t:objective>basic system check</t:objective>
    	
	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
	    <t:response>
	        <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test >
	    <t:request>
	        <CreateAccountRequest xmlns="urn:zimbraAdmin">
	            <name>${account1.name}</name>
	            <password>${defaultpassword.value}</password>
	        </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account1.id"/>	
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
	    </t:response>
	</t:test>

	<t:test >
	    <t:request>
	        <CreateAccountRequest xmlns="urn:zimbraAdmin">
	            <name>${account2.name}</name>
	            <password>${defaultpassword.value}</password>
	        </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account2.id"/>	
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
	    </t:response>
	</t:test>
	
	<t:test >
	    <t:request>
	        <CreateAccountRequest xmlns="urn:zimbraAdmin">
	            <name>${account3.name}</name>
	            <password>${defaultpassword.value}</password>
	        </CreateAccountRequest>
	    </t:request>
	    <t:response>
		    <t:select path="//admin:CreateAccountResponse/admin:account" attr="id" set="account3.id"/>	
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
	    </t:response>
	</t:test>
	
</t:test_case>

<t:test_case testcaseid="Bug69488_1" type="smoke" bugids="69488">
    <t:objective>ParseException when forwarding a message with a voicemail attachment</t:objective>
    <t:steps>
	1. Inject test message
	2. Log in as user1.
	3. Forward message to user2. 
    </t:steps>
	
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${mail01.file}</filename>
			<to>${account1.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
		</t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>${mail01.subject}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="mail01.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${mail01.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${mail01.id}']">
            	<t:select path="//mail:mp[@ct='audio/x-mpeg-3']">
            		<t:select attr="filename" match="VM_2012-01-24_11-12-54.mp3"/>
            		<t:select attr="part" set="mail01.attachment.part.id"/>
				</t:select>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m origid="${mail01.id}" rt="w">
					<e t="t" a="${account2.name}"/>
					<su>Fwd: ${mail01.subject}</su>
					<mp ct="multipart/mixed">
						<content>----- Forwarded Message -----</content>
					</mp>
					<attach>
						<mp mid="${mail01.id}" part="${mail01.attachment.part.id}"/>
					</attach>
				</m>
			</SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="mail01.forward.id"/>
        </t:response>
    </t:test>
 
</t:test_case>

<t:test_case testcaseid="Bug69488_2" type="smoke" bugids="69488">
    <t:objective>ParseException when forwarding a message with a voicemail attachment</t:objective>
    <t:steps>
	1) UserA has attached message in the Inbox
	2) UserA shares Inbox with UserB (manager rights)
	3) UserB accepts and mounts UserA's Inbox
	4) UserB attempts to forward message
    </t:steps>
	
    <t:mailinjecttest >
        <t:lmtpInjectRequest>
            <filename>${mail01.file}</filename>
			<to>${account3.name}</to>
			<from>${nonZimbraUser.name}</from>
			<server>${account1.server}</server>
		</t:lmtpInjectRequest>
    </t:mailinjecttest>
    
	<t:property name="server.zimbraAccount" value="${account3.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account3.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
	
	  <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
            <t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="folder.calendar"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder.inbox}">
					<grant gt="${grant.usr}" d="${account2.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
      <t:property name="server.zimbraAccount" value="${account2.server}"/>
  
      <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
     <t:test id="getFolderRequest">
        <t:request>
            <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
        </t:response>
    </t:test>
    
 
	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.inbox.id}" name="folder1${TIME}${COUNTER}" zid="${account3.id}" rid="${folder.inbox}" view="message"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.folder.shared.id"/>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="folder.name"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:"inbox/${folder.name}" ${mail01.subject}</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="mail01.id"/>
		</t:response>
	</t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${mail01.id}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${mail01.id}']">
            	<t:select path="//mail:mp[@ct='audio/x-mpeg-3']">
            		<t:select attr="filename" match="VM_2012-01-24_11-12-54.mp3"/>
            		<t:select attr="part" set="mail01.attachment.part.id"/>
				</t:select>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m origid="${mail01.id}" rt="w">
					<e t="t" a="${account2.name}"/>
					<su>Fwd: ${mail01.subject}</su>
					<mp ct="multipart/mixed">
						<content>----- Forwarded Message -----</content>
					</mp>
					<attach>
						<mp mid="${mail01.id}" part="${mail01.attachment.part.id}"/>
					</attach>
				</m>
			</SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="mail01.forward.id"/>
        </t:response>
    </t:test>
    
    
</t:test_case>

<t:test_case testcaseid="Bug76830" type="smoke" bugids="76830">
    <t:objective>'invalid request' error on reading Share modified mail</t:objective>
    <t:steps>
	1) user1 and share any folder with user2 with viewer rights
	2) User2 accepts and mounts User1's Inbox
	3) user1 and modify the share rights to 'Manager' for user2
	4) try to access the share modified email > verify perm attribute in GetMsgResponse
    </t:steps>
	 
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
	
	  <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
            <t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="folder.calendar"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder.inbox}">
					<grant gt="${grant.usr}" d="${account2.name}" perm="${rights.read}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
      <t:property name="server.zimbraAccount" value="${account2.server}"/>
  
      <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
     <t:test id="getFolderRequest">
        <t:request>
            <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.folder.inbox.id"/>
        </t:response>
    </t:test>
    
 
	<t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account2.folder.inbox.id}" name="folder1${TIME}${COUNTER}" zid="${account1.id}" rid="${folder.inbox}" view="message"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account2.folder.shared.id"/>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="name" set="folder.name"/>
        </t:response>
    </t:test>
    
    
    <t:property name="server.zimbraAccount" value="${account1.server}"/>

	<t:test >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAccount">
				<account by="name">${account1.name}</account>
				<password>${defaultpassword.value}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

		</t:response>
	</t:test>
	
	  <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.root}']" attr="id" set="root.id"/>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
            <t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="folder.calendar"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${folder.inbox}">
					<grant gt="${grant.usr}" d="${account2.name}" perm="${rights.manager}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse/mail:action"/>
        </t:response>
    </t:test>
    
      <t:test >
        <t:request>
            <SendShareNotificationRequest xmlns="urn:zimbraMail" action="edit">
                <item id="${folder.inbox}"/>
                <e a="${account2.name}"/>
				<notes></notes>
            </SendShareNotificationRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendShareNotificationResponse"/>
        </t:response>
    </t:test>
           
    <t:delay msec="3000"/>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>
  
      <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" attr="id" set="message.id"/>
			<t:select path="//mail:SearchResponse/mail:m/mail:su" match="Share Modified: Inbox shared by ${account1.name}"/>
		</t:response>
	</t:test>
	
	<t:test>
    	<t:request>
    	 	<GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id}"/>
            </GetMsgRequest>
    	</t:request>
    	<t:response>    		
    		<t:select path="//mail:GetMsgResponse/mail:m[@id='${message.id}']">    		
    			<t:select path="//mail:su" match="Share Modified: Inbox shared by ${account1.name}"/>
    			<t:select path="//mail:mp/mail:mp[@part='3']" attr="ct" match="xml/x-zimbra-share"/>    				       
    			<t:select path="//mail:shr" attr="content" contains="perm"/>
    		</t:select>
    	</t:response>    
    </t:test>
    
    
</t:test_case>



</t:tests>

