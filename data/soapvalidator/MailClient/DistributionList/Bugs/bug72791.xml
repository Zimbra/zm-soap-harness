<t:tests xmlns:t="urn:zimbraTestHarness">
<t:property name="account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.dl1.name" value="dl1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.dl2.name" value="dl2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.dl2.newname" value="newdl2.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account1.dl3.name" value="dl3.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="owner1.name" value="fake@fake.com"/>
<t:property name="owner2.name" value="owner2.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
 <t:objective>basic system check</t:objective>
    <t:test required="true">
     <t:request>
       <PingRequest xmlns="urn:zimbraAdmin"/>
     </t:request>
      <t:response>
        <t:select path="//admin:PingResponse"/>
     </t:response>
    </t:test>
</t:test_case>


<t:test_case testcaseid="admin_auth" type="always" >
 <t:objective>login as the admin</t:objective>
	<t:test required="true" >
		<t:request>
			<AuthRequest xmlns="urn:zimbraAdmin">
				<name>${admin.user}</name>
				<password>${admin.password}</password>
			</AuthRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
		</t:response>
	</t:test>

	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${account1.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
		</t:response>
	</t:test>
	
	<t:test required="true">
		<t:request>
			<CreateAccountRequest xmlns="urn:zimbraAdmin">
				<name>${owner2.name}</name>
				<password>${defaultpassword.value}</password>
			</CreateAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="owner2.id"/>
			<t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="owner2.server"/>
		</t:response>
	</t:test>
	
	<t:property name="server.zimbraAdmin" value="${account1.server}"/>
	<t:test required="true">
		<t:request>
			<GrantRightRequest xmlns="urn:zimbraAdmin">
				<target xmlns="" by="name" type="domain">${defaultdomain.name}</target>
				<grantee xmlns="" by="name" type="usr">${account1.name}</grantee>
				<right xmlns="">createDistList</right>
			</GrantRightRequest>
		</t:request>
		<t:response>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="bug72791_1" type="smoke" bugids="72791" >
    <t:objective>Verify DL owner will not becomes orphan if owner adds fake owner email address in "List Owners:" </t:objective>    
    <t:steps>
    1. Login as account1
    2. Create Distribution list
    3. Try to add fake owner (with action= addOwners) > account.NO_SUCH_ACCOUNT
    4. Send GetDistributionListRequest > verify GetDistributionListRequest return with account1.
    </t:steps>
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request >
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test> 

    <t:test >
        <t:request >
            <CreateDistributionListRequest xmlns="urn:zimbraAccount" >
                 <name>${account1.dl2.name}</name>
          	</CreateDistributionListRequest>
        </t:request>
        <t:response>
        	<t:select path="//acct:CreateDistributionListResponse/acct:dl" attr="id" set="account1.dl2.id" />
        </t:response>
    </t:test> 

    
    <t:test >
        <t:request >
            <DistributionListActionRequest xmlns="urn:zimbraAccount" >
            	<dl by="id">${account1.dl2.id}</dl>
                 <action op="addOwners">
                 	<owner type="usr" by="name">${owner1.name}</owner>
                 </action>
          	</DistributionListActionRequest>
        </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^account.NO_SUCH_ACCOUNT"/>
        </t:response>
    </t:test> 

    <t:test >
        <t:request >
            <GetDistributionListRequest xmlns="urn:zimbraAccount" needOwners="1">
            	<dl by="id">${account1.dl2.id}</dl>
          	</GetDistributionListRequest>
        </t:request>
        <t:response>
        	<t:select path="//acct:GetDistributionListResponse/acct:dl/acct:owners/acct:owner[@name='${account1.name}']" attr="id" match="${account1.id}"/>
        </t:response>
    </t:test> 

</t:test_case>

<t:test_case testcaseid="bug72791_2" type="smoke" bugids="72791" >
    <t:objective>Try to add fake owner (with action= setOwners) > account.NO_SUCH_ACCOUNT</t:objective>    
    <t:steps>
    1. Login as account1
    2. Create Distribution list
    3. Try to add fake owner (with action= setOwners) > account.NO_SUCH_ACCOUNT
    4. Send GetDistributionListRequest > verify GetDistributionListRequest return with account1.
    </t:steps>
    
	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test >
        <t:request >
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test> 


    <t:test >
        <t:request >
            <CreateDistributionListRequest xmlns="urn:zimbraAccount" >
                 <name>${account1.dl3.name}</name>
          	</CreateDistributionListRequest>
        </t:request>
        <t:response>
        	<t:select path="//acct:CreateDistributionListResponse/acct:dl" attr="id" set="account1.dl3.id" />
        </t:response>
    </t:test> 

    
    <t:test >
        <t:request >
            <DistributionListActionRequest xmlns="urn:zimbraAccount" >
            	<dl by="id">${account1.dl3.id}</dl>
                 <action op="setOwners">
                 	<owner type="usr" by="name">${owner1.name}</owner>
                 </action>
          	</DistributionListActionRequest>
        </t:request>
        <t:response>
        	<t:select path="//zimbra:Code" match="^account.NO_SUCH_ACCOUNT"/>
        </t:response>
    </t:test> 

    <t:test >
        <t:request >
            <GetDistributionListRequest xmlns="urn:zimbraAccount" needOwners="1">
            	<dl by="id">${account1.dl2.id}</dl>
          	</GetDistributionListRequest>
        </t:request>
        <t:response>
        	<t:select path="//acct:GetDistributionListResponse/acct:dl/acct:owners/acct:owner[@name='${account1.name}']" attr="id" match="${account1.id}"/>
        </t:response>
    </t:test> 

</t:test_case>

</t:tests>


