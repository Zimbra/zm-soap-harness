<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="account${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="account${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="account${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.id" value="4069da09-3794-4d2a-ad16-fb2dad556dc4"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always">
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct1_setup" type="always">
    <t:objective>Create test account</t:objective>
    <steps>
        1. Login to admin account
        2. Create user accounts
    </steps>

    <t:test id="admin_login" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_test_account1" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:property name="server.zimbraAccount" value="${account1.server}"/>

<t:test_case testcaseid="Context_Account_Harvesting_01" type="smoke">
    <t:objective>Verify that using "account" (by=name) for an invalid account returns PERM_DENIED rather than NO_SUCH_ACCOUNT</t:objective>
    <t:steps>
        1. Login to account1
        2. Send BatchRequest using account=account2 (valid account)
        3. Verify PERM_DENIED
        2. Send BatchRequest using account=account3 (non-existant account)
        3. Verify PERM_DENIED
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>


    <t:test >
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="name">${account2.name}</account>
        </t:requestContext>
        <t:request>
            <BatchRequest xmlns="urn:zimbra" onerror="stop">
            	<GetInfoRequest xmlns="urn:zimbraAccount" sections="mbox" requestId="0"/>
            	<GetFolderRequest xmlns="urn:zimbraMail" visible="0" requestId="1">
            		<folder l="1"/>
        		</GetFolderRequest>
    		</BatchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test >
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="name">${account3.name}</account>
        </t:requestContext>
        <t:request>
            <BatchRequest xmlns="urn:zimbra" onerror="stop">
            	<GetInfoRequest xmlns="urn:zimbraAccount" sections="mbox" requestId="0"/>
            	<GetFolderRequest xmlns="urn:zimbraMail" visible="0" requestId="1">
            		<folder l="1"/>
        		</GetFolderRequest>
    		</BatchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Context_Account_Harvesting_02" type="smoke">
    <t:objective>Verify that using "account" (by=id) for an invalid account returns PERM_DENIED rather than NO_SUCH_ACCOUNT</t:objective>
    <t:steps>
        1. Login to account1
        2. Send BatchRequest using account=account2 (valid account)
        3. Verify PERM_DENIED
        2. Send BatchRequest using account=account3 (non-existant account)
        3. Verify PERM_DENIED
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>


    <t:test >
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="name">${account2.id}</account>
        </t:requestContext>
        <t:request>
            <BatchRequest xmlns="urn:zimbra" onerror="stop">
            	<GetInfoRequest xmlns="urn:zimbraAccount" sections="mbox" requestId="0"/>
            	<GetFolderRequest xmlns="urn:zimbraMail" visible="0" requestId="1">
            		<folder l="1"/>
        		</GetFolderRequest>
    		</BatchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

    <t:test >
        <t:requestContext>
            <authToken>${authToken}</authToken>
            <account by="name">${account3.id}</account>
        </t:requestContext>
        <t:request>
            <BatchRequest xmlns="urn:zimbra" onerror="stop">
            	<GetInfoRequest xmlns="urn:zimbraAccount" sections="mbox" requestId="0"/>
            	<GetFolderRequest xmlns="urn:zimbraMail" visible="0" requestId="1">
            		<folder l="1"/>
        		</GetFolderRequest>
    		</BatchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="service.PERM_DENIED"/>
        </t:response>
    </t:test>

</t:test_case>




</t:tests>


