<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="domain.name1" value="zcodlself.test"/>
<t:property name="organizer.name" value="organizer@${domain.name1}"/>
<t:property name="attendee2.name" value="attendee2@${domain.name1}"/>

<t:property name="uploadFile.name" value="${testMailRaw.root}/ZCO/zcoInviteDL.eml"/>

<t:property name="displayNameOrganizer" value="The Organizer"/>
<t:property name="displayNameAttendee2" value="Other Attendee"/>

<t:property name="DL1" value="list1@${domain.name1}"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="appt.subject" value="Meeting with DL containing self"/>

<t:test_case testcaseid="zcoInviteDlIncludingSelfSetup" type="always">
    <t:objective>Emulate ZCO inviting a DL including self to a meeting.</t:objective>

    <t:test id="admin_login" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="EnsureDomain1Exists" required="true">
        <t:request>
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name1}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response/>
    </t:test>

    <t:test id="EnsureOrganizerExists" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${organizer.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="displayName">${displayNameOrganizer}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response/>
    </t:test>

    <t:test id="EnsureAttendeeExists" required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${attendee2.name}</name>
                <password>${defaultpassword.value}</password>
                <a n="displayName">${displayNameAttendee2}</a>
            </CreateAccountRequest>
        </t:request>
        <t:response/>
    </t:test>

    <t:test id="EnsureDL1Exists" required="true">
        <t:request>
            <CreateDistributionListRequest xmlns="urn:zimbraAdmin">
                <name>${DL1}</name>
                <a n="description">DL containing organizer</a>
            </CreateDistributionListRequest>
        </t:request>
        <t:response/>
    </t:test>

    <t:test>
        <t:request>
            <GetDomainInfoRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain.name1}</domain>
            </GetDomainInfoRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDomainInfoResponse/admin:domain" attr="name" match="${domain.name1}"/>
            <t:select path="//admin:GetDomainInfoResponse/admin:domain" attr="id" set="domain1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetAccountInfoRequest xmlns="urn:zimbraAdmin">
                <account by="name">${organizer.name}</account>
            </GetAccountInfoRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountInfoResponse/admin:name" match="${organizer.name}"/>
            <t:select path="//admin:GetAccountInfoResponse/admin:a[@n='zimbraId']" set="organizer.id"/>
            <t:select path="//admin:GetAccountInfoResponse/admin:a[@n='zimbraMailHost']" set="organizer.server"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetAccountInfoRequest xmlns="urn:zimbraAdmin">
                <account by="name">${attendee2.name}</account>
            </GetAccountInfoRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetAccountInfoResponse/admin:name" match="${attendee2.name}"/>
            <t:select path="//admin:GetAccountInfoResponse/admin:a[@n='zimbraId']" set="attendee2.id"/>
            <t:select path="//admin:GetAccountInfoResponse/admin:a[@n='zimbraMailHost']" set="attendee2.server"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetDistributionListRequest xmlns="urn:zimbraAdmin">
                <dl by="name">${DL1}</dl>
            </GetDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:GetDistributionListResponse/admin:dl" attr="id" set="DL1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <AddDistributionListMemberRequest id="${DL1.id}" xmlns="urn:zimbraAdmin">
                <dlm>${organizer.name}</dlm>
                <dlm>${attendee2.name}</dlm>
            </AddDistributionListMemberRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AddDistributionListMemberResponse"/>
        </t:response>
    </t:test>

    <t:property name="server.zimbraAccount" value="${organizer.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:property name="uploadServletServer" value="${organizer.server}"/>

    <t:uploadservlettest>
        <t:uploadServletRequest>
            <filename>${uploadFile.name}</filename>
        </t:uploadServletRequest>
        <t:uploadServletResponse>
            <t:select attr="id" set="message1.aid"/>
        </t:uploadServletResponse>
    </t:uploadservlettest>

    <t:test>
        <t:request>
            <SendMsgRequest noSave="1" suid="220913" xmlns="urn:zimbraMail">
                <m aid="${message1.aid}"/>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>

    <t:for start="1" end="300" break="response">
        <t:delay msec="100"/>
        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="conversation">
                    <query>subject:(${appt.subject})</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:c/mail:su" match="${appt.subject}" query="response"/>
            </t:response>
        </t:test>
    </t:for>
 </t:test_case>

 <t:test_case testcaseid="zcoInviteDlIncludingSelf" type="always"  bugids="100456">
    <t:objective>Verify invite arrival didn't trigger calendar entry creation (for organizer).</t:objective>
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="appointment">
                <query>in:Calendar AND subject:(${appt.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:appt[@name='${appt.subject}']" emptyset="1"/>
        </t:response>
    </t:test>
 </t:test_case>

 <t:test_case testcaseid="zcoInviteDlIncludingSelfOtherChecks" type="always">
    <t:objective>Verify invite arrival did trigger calendar entry creation (for other attendee).</t:objective>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${attendee2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:for start="1" end="10" break="response">
        <t:delay msec="50"/>
        <t:test>
            <t:request>
                <SearchRequest xmlns="urn:zimbraMail" types="conversation">
                    <query>subject:(${appt.subject})</query>
                </SearchRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SearchResponse/mail:c/mail:su" match="${appt.subject}" query="response"/>
            </t:response>
        </t:test>
    </t:for>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="appointment">
                <query>in:Calendar AND subject:(${appt.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:appt[@name='${appt.subject}']" emptyset="0"/>
        </t:response>
    </t:test>

    <t:test id="admin_login_for_cleanup" required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <DeleteDistributionListRequest xmlns="urn:zimbraAdmin">
                <id>${DL1.id}</id>
            </DeleteDistributionListRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDistributionListResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <DeleteAccountRequest id="${organizer.id}" xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <DeleteAccountRequest id="${attendee2.id}" xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <DeleteDomainRequest id="${domain1.id}" xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDomainResponse"/>
        </t:response>
    </t:test>

 </t:test_case>
</t:tests>
