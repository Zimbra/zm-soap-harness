<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="sharing01.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="sharing02.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="sharing03.${TIME}.${COUNTER}@${defaultdomain.name}"/>

<t:property name="account2.folder.name" value="sub-folder.${COUNTER}"/>
<t:property name="account3.share.name" value="share.${TIME}.${COUNTER}"/>
<t:property name="view.message"			value="message"/>
<t:property name="op.grant"			value="grant"/>
<t:property name="grant.usr"			value="usr"/>
<t:property name="rights.read"			value="r"/>
<t:property name="folder.name" value="folder.${TIME}.${COUNTER}"/>

<t:property name="message.content1" value="content${TIME}.${COUNTER}"/>
<t:property name="msg.inbox" value="simple text string in the body. Test mail in Inbox."/>
<t:property name="msg.folder" value="simple text string in the body. Test mail in Subfolder."/>


<t:test_case testcaseid="Sharing_BugSetup" type="always" >
    <t:objective>basic system check</t:objective>

	<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
    
    <t:test  id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>


    <t:test  id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account1.name}</name>
            <password>${defaultpassword.value}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account2.name}</name>
            <password>${defaultpassword.value}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test  id="create_test_account1" required="false" depends="admin_login">
        <t:request>
        <CreateAccountRequest xmlns="urn:zimbraAdmin">
            <name>${account3.name}</name>
            <password>${defaultpassword.value}</password>
        </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account1.inbox.id"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account2.inbox.id"/>
		</t:response>
	</t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="account3.inbox.id"/>
		</t:response>
	</t:test>

</t:test_case>


<t:test_case testcaseid="Bug_30049" type="smoke" bugids="30049">
    <t:objective> Verify "key" grantee type for folder ACL. </t:objective>
	<t:steps>
		1. Login to account1
		2. Create a mail folder
		3. Add a message to that folder
		3. Share it with gratee typer as "key"
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${folder.name}" l="${account1.inbox.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account1.folder.id"/>
        </t:response>
	</t:test>

  
    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account1.folder.id}">
                    <content>"${message.content1}"</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    
	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account1.folder.id}">
					<grant gt="key" perm="${rights.read}" d="${account2.name}"/>
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>

<!-- ToDo: We have to verify that account2 can access the share using the key -->

</t:test_case>


<t:test_case testcaseid="Bug_23590" type="smoke" bugids="23590">
    <t:objective> Verify Searching Shared Folders that have subfolder works fine </t:objective>
	<t:steps>
		1. Crete a subfolder of inbox for account2 
		2. Add test mails to inbox and sub-folder
		3. Share Inbox with inh="1" with account3
		4. Authenticate as account3 and create mountpoint
		5. Do search for account2's inbox mail
		6. Do search for account2's subfolder mail
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="${account2.folder.name}" l="${account2.inbox.id}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="account2.folder.id"/>
        </t:response>
	</t:test>


    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account2.folder.id}">
                    <content>From: foo@foo.com
To: foo@foo.com
Subject: ${msg.folder}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

${msg.folder}
					</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m"/>
        </t:response>
    </t:test>
	

  <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${account1.inbox.id}">
					<content>From: foo@foo.com
To: foo@foo.com
Subject: ${msg.inbox}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

${msg.inbox}
					</content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

	<t:test>
        <t:request>
            <FolderActionRequest xmlns="urn:zimbraMail">
                <action op="${op.grant}" id="${account2.inbox.id}">
					<grant gt="${grant.usr}" inh="1" perm="${rights.read}" d="${account3.name}" />
                </action>
            </FolderActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:FolderActionResponse"/>
        </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test  required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
            </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <CreateMountpointRequest xmlns="urn:zimbraMail">
                <link l="${account3.inbox.id}" name="${account3.share.name}" zid="${account2.id}" rid="${account2.inbox.id}" view="${view.message}"/>
            </CreateMountpointRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateMountpointResponse/mail:link" attr="id" set="account3.mounted.id"/>
        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" limit="25">
				<query>${msg.inbox} (inid:${account3.mounted.id} OR inid:"${account2.id}:${account2.folder.id}"  OR is:local)</query>
			</SearchRequest>
		</t:request>
		<t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg.inbox}"/>
		</t:response>
	</t:test>
	
	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" limit="25">
				<query>${msg.folder} (inid:${account3.mounted.id} OR inid:"${account2.id}:${account2.folder.id}"  OR is:local)</query>
			</SearchRequest>
		</t:request>
		<t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg.folder}"/>
		</t:response>
	</t:test>


</t:test_case>


</t:tests>
