<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="account1.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}.${COUNTER}@${defaultdomain.name}"/>


<t:property name="spam1.file" value="${testMailRaw.root}/spam/sample-spam.txt"/>
<t:property name="spam1.subject" value="Test spam mail (GTUBE)"/>

<t:property name="spam2.file" value="${testMailRaw.root}/spam/spam02.txt"/>
<t:property name="spam2.subject" value="Simple  Ways to Enjoy Sex Every Day"/>

<t:property name="spamdf.file" value="${testMailRaw.root}/spam/dspam02.txt"/>
<t:property name="spamdf.subject" value="DE ACERCAMIENTO DE PERSONAL PARA EMPRESA"/>

<t:property name="spam3.file" value="${testMailRaw.root}/spam/spam03.txt"/>
<t:property name="spam3.subject" value="Claim your degree."/>

<t:property name="op.spam" value="spam"/>
<t:property name="op.notspam" value="!spam"/>
<t:property name="message.subject1" value="Subject${TIME}.${COUNTER}"/>
<t:property name="message.subject2" value="Subject${TIME}.${COUNTER}"/>
<t:property name="folder1.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder2.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder3.name" value="folder${TIME}${COUNTER}"/>
<t:property name="folder.pname" value="1"/> <!-- Folder's parent ID -->
<t:property name="test_acct.server" value="NOT_DEFINED"/>

<t:property name="spam.subject.header" value="SoapHarnessSpam:"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="spamBasic_Account_Setup" type="always">
    <t:objective>Create test account</t:objective>
    <steps> 1. Login to admin account
            2. Create a account1 
    </steps>

    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${account1.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="account1.mta.server"/>
		</t:response>
	</t:test>
    
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${account2.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="account2.mta.server"/>
		</t:response>
	</t:test>
    
    <t:test >
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${account3.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="account3.mta.server"/>
		</t:response>
	</t:test>
    
     <t:test id="service_check" required="true" depends="ping">
        <t:request>
            <GetServerRequest xmlns="urn:zimbraAdmin" attrs="zimbraServiceEnabled">
				<server by="name">${account2.mta.server}</server>
			</GetServerRequest>
        </t:request>
        <t:response>
            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraServiceEnabled"]"' match="antispam"/>
        </t:response>
    </t:test>
    
     <t:test id="service_check" required="true" depends="ping">
        <t:request>
            <GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${zimbraServer.name}</server>
			</GetServerRequest>
        </t:request>
        <t:response>
            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="mta.server"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="spamBasic_Spam_Setup" type="always" areas="spam,noncluster" >
    <t:objective>Enable spam checking</t:objective>

    <t:test >
        <t:request>
            <ModifyConfigRequest xmlns="urn:zimbraAdmin">
				<a n="zimbraSpamSubjectTag">${spam.subject.header}</a>
			</ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask>
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmamavisdctl restart\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmtactl}</params>
		</t:request>
	</t:staftask>
	<t:delay msec="5000"/>

</t:test_case>

<t:finally areas="spam,noncluster">

    <!-- After all tests have run, reset the zimbraSpamCheckEnabled setting to the default -->
    
    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
   <t:test>
        <t:request>
            <ModifyConfigRequest  xmlns="urn:zimbraAdmin">
				<a n="zimbraSpamSubjectTag">""</a>
            </ModifyConfigRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:ModifyConfigResponse"/>
        </t:response>
    </t:test>

	<t:staftask >
		<t:request>
			<server>${mta.server}</server>
			<service>PROCESS</service>
			<params>START SHELL COMMAND "su - zimbra -c \'/opt/zimbra/bin/zmamavisdctl restart\'" RETURNSTDOUT RETURNSTDERR WAIT ${staf.process.timeout.zmmtactl}</params>
		</t:request>
	</t:staftask>
	
</t:finally>



<t:test_case testcaseid="spamBasic_ReceiveSpam_01" type="smoke" areas="spam, smtp,noncluster" >
    <t:objective>Verify that a spam message (GTUBE sample) is not sent to the mailbox</t:objective>
    <t:steps>
    1. Send the sample spam message to account1
    2. Login to account1.
    3. Verify that the message is not received in the inbox or junk folders
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account1.mta.server}</address>
            <filename>${spam1.file}</filename>
            <recipient>${account1.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest>
   
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
		</t:response>
	</t:test>
   
	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:junk</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
		</t:response>
	</t:test>
   
</t:test_case>



<t:test_case testcaseid="spamBasic_ReceiveSpam_02" type="smoke" bugids="43378" areas="spam, smtp,noncluster" >
    <t:objective>Verify that particular message having specific spam rating is placed in junk </t:objective>
    <t:steps>
    1. Send the sample spam message to account2
    2. Login to account2.
    3. Verify that the message is received in the Junk folder, not  in the inbox
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
<!-- Poonam: adding delay, as we modified the globalconfig setting-->
		<t:delay msec="2000"/>

	<t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account2.mta.server}</address>
            <filename>${spamdf.file}</filename>
            <recipient>${account2.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest>
   
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
		</t:response>
	</t:test>
   
	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:junk</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:su" match="${spam.subject.header}${spamdf.subject}"/>
			</t:select>
		</t:response>
	</t:test>
   
</t:test_case>

<t:test_case testcaseid="spamBasic_ReceiveSpam_03" type="smoke" bugids="43381" areas="spam, smtp,noncluster" >
    <t:objective>Verify that a sample spam message is placed in the Junk folder</t:objective>
    <t:steps>
    1. Send the sample spam message to account2
    2. Login to account2.
    3. Verify that the message is received in the Junk folder, not  in the inbox
    </t:steps>

	<t:property name="server.zimbraAccount" value="${account2.server}"/>
	
<!-- Poonam: adding delay, as we modified the globalconfig setting-->
		<t:delay msec="2000"/>

	<!--t:mailinjecttest>
        <t:lmtpInjectRequest>
            <filename>${spam3.file}</filename>
            <to>${account3.name}</to>
            <from>${defaultdestination.email}</from>
            <server>${account3.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest-->    

	<t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account3.mta.server}</address>
            <filename>${spamdf.file}</filename>
            <recipient>${account3.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest>
   
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:inbox</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
		</t:response>
	</t:test>
   
	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message" >
		       <query>in:junk</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse">
				<t:select path="//mail:su" match="${spam.subject.header}${spamdf.subject}"/>
			</t:select>
		</t:response>
	</t:test>
   
</t:test_case>



</t:tests>


