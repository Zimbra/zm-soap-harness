<t:tests xmlns:t="urn:zimbraTestHarness">

<!--

The injected SMTP mime is hardcoded to send to
	local@local.qaserver.liquidsys.com
So, the domain and accounts must be recreated during execution

-->


<t:property name="domain.name" value="local.qaserver.liquidsys.com"/>

<t:property name="account1.name" value="local@${domain.name}"/>
<t:property name="account2.name" value="test2@${domain.name}"/>
<t:property name="account3.name" value="test3@${domain.name}"/>

<t:property name="msg01.file"		value="${testMailRaw.root}/email29/msg01.txt"/>
<t:property name="msg01.subject"	value="email29A"/>
<t:property name="msg02.file"		value="${testMailRaw.root}/email29/msg02.txt"/>
<t:property name="msg02.subject"	value="email29B"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="PrefMailLocalDeliveryDisabled_Account_Setup" type="always" >
    <t:objective>create test accounts</t:objective>
    <t:steps>
    1. Create domain
    2. Delete domain
    3. Create domain
    4. Create accounts
    </t:steps>
    
	
   <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test id="DeleteDomainRequest1a">
        <t:request> 
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name}</name>
            </CreateDomainRequest>
        </t:request>
    </t:test>

     <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
    </t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="name">${account1.name}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" attr="id" set="account1.id"/>
		</t:response>
	</t:test>

    <t:test depends="deleteAccountRequest1a">
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account1.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

    <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
    </t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="name">${account2.name}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" attr="id" set="account2.id"/>
		</t:response>
	</t:test>

    <t:test depends="deleteAccountRequest1a">
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account2.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>

    <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
    </t:test>

	<t:test>
		<t:request>
			<GetAccountRequest xmlns="urn:zimbraAdmin">
				<account by="name">${account3.name}</account>
			</GetAccountRequest>
		</t:request>
		<t:response>
			<t:select path="//admin:GetAccountResponse/admin:account" attr="id" set="account3.id"/>
		</t:response>
	</t:test>

    <t:test depends="deleteAccountRequest1a">
        <t:request>
            <DeleteAccountRequest xmlns="urn:zimbraAdmin">
                <id>${account3.id}</id>
            </DeleteAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteAccountResponse"/>
        </t:response>
    </t:test>


    <t:test>
        <t:request>
            <GetDomainRequest xmlns="urn:zimbraAdmin">
                <domain by="name">${domain.name}</domain>
            </GetDomainRequest>
        </t:request>
        <t:response>
	        <t:select path="//admin:GetDomainResponse/admin:domain" attr="id"  set="domain.id"/>
        </t:response>
    </t:test>

    <t:test depends="DeleteDomainRequest1a">
        <t:request>
            <DeleteDomainRequest xmlns="urn:zimbraAdmin">
                <id>${domain.id}</id>
            </DeleteDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:DeleteDomainResponse"/>
        </t:response>
    </t:test>

    <t:test id="DeleteDomainRequest1a">
        <t:request> 
            <CreateDomainRequest xmlns="urn:zimbraAdmin">
                <name>${domain.name}</name>
            </CreateDomainRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateDomainResponse/admin:domain" attr="id" set="domain.id"/>
        </t:response>
    </t:test>
    
     <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>
    
    <t:test>
		<t:request>
			<GetServerRequest xmlns="urn:zimbraAdmin">
				<server by="name">${account1.server}</server>
			</GetServerRequest>
		</t:request>
		<t:response>
	            <t:select path='//admin:GetServerResponse/admin:server/admin:a[@n="zimbraSmtpHostname"]' set="account1.mta.server"/>
		</t:response>
   	</t:test>

    <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test required="true" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>

</t:test_case>



<t:test_case testcaseid="zimbraPrefMailLocalDeliveryDisabled_01" type="smoke"  areas="smtp" >
    <t:objective>Verify that mail kept locally if zimbraPrefMailLocalDeliveryDisabled=FALSE</t:objective>
    <t:steps>
	1. Send ModifyPrefsRequest to forward mail to Account2, with Local Delivery Disabled = FALSE
	2. Use SMTP to inject message to Account1
	3. Check that a copy of the message is in Account1
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="modifyprefsrequest1">
        <t:request>
			<ModifyPrefsRequest xmlns="urn:zimbraAccount">
				<pref name="zimbraPrefMailForwardingAddress">${account2.name}</pref>
				<pref name="zimbraPrefMailLocalDeliveryDisabled">${globals.false}</pref>
			</ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account1.mta.server}</address>
            <filename>${msg01.file}</filename>
            <recipient>${account1.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${msg01.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m"/>
		</t:response>
	</t:test>


</t:test_case>


<t:test_case testcaseid="zimbraPrefMailLocalDeliveryDisabled_02" type="smoke"  areas="smtp" >
    <t:objective>Verify that mail is NOT kept locally if zimbraPrefMailLocalDeliveryDisabled=TRUE</t:objective>
    <t:steps>
	1. Send ModifyPrefsRequest to forward mail to Account2, with Local Delivery Disabled = TRUE
	2. Use SMTP to inject message to Account1
	3. Check that a copy of the message is in Account1
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test id="modifyprefsrequest1">
        <t:request>
			<ModifyPrefsRequest xmlns="urn:zimbraAccount">
				<pref name="zimbraPrefMailForwardingAddress">${account2.name}</pref>
				<pref name="zimbraPrefMailLocalDeliveryDisabled">${globals.true}</pref>
			</ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>

    <t:smtpinjecttest>
        <t:smtpInjectRequest>
            <address>${account1.mta.server}</address>
            <filename>${msg02.file}</filename>
            <recipient>${account1.name}</recipient>
        </t:smtpInjectRequest>
    </t:smtpinjecttest>

	<t:test>
		<t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${msg02.subject})</query>
			</SearchRequest>
		</t:request>
		<t:response>
			<t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
		</t:response>
	</t:test>


</t:test_case>




</t:tests>
