  <t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>


<t:property name="account1.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account3.name" value="test${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <t:test id="create_account1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account1.server"/>
        </t:response>
    </t:test>

    <t:test id="create_account2" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account2.server"/>
        </t:response>
    </t:test>

    <t:test id="create_account3" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account3.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account3.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="account3.server"/>
        </t:response>
    </t:test>


</t:test_case>


<t:test_case testcaseid="ForwardMsgSendOnBehalf_01" type="smoke"  bugids="66629">
    <t:objective>Verify that a user cannot forward message to other user as sendOnBehalfOf when sendOnBehalfOf right is not granted</t:objective>
    <t:steps>
		1. Login to account1
		2. Send a message to account2.
		3. Login to account2
		4. Find the message
		5. Forward the message to account3 sendOnBehalfOf of account1.
		6. Login to account3
		7. Verify the forwarded message.		
		8. Verify message has no sender name.
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:property name="message.subject" value="subject${TIME}${COUNTER} test email forwarding"/>
	<t:property name="message.content" value=".content${TIME}${COUNTER}"/>	
   
   <t:test>
	 <t:request>
	    <SendMsgRequest xmlns="urn:zimbraMail">
		<m>
		  <e t="t" a='${account2.name}'/>	        
	         <su>${message.subject}</su>
	          <mp ct="text/plain">
	         	 <content> ${message.content} </content>
	          </mp>
		</m>
	    </SendMsgRequest>
	 </t:request>
	   <t:response>
	       <t:select path="//mail:SendMsgResponse/mail:m"/>
	 </t:response>
	</t:test>
	
	<t:property name="server.zimbraAccount" value="${account2.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>    

	
    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail"  types="message">
				<query>subject:${message.subject}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:m">
            	<t:select attr="id" set="account2.messageId"/>            	
            	<t:select attr="su" match="${message.subject}"/>             	             	
            </t:select> 
        </t:response>
    </t:test>
    
    <t:resttest>
		<t:restServletRequest>
			<id>${account2.messageId}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>			
			<t:select attr="Content-Type" match=".*method=.*" emptyset="1"/>
		</t:restServletResponse>
	</t:resttest>

	<t:property name="forward.subject" value="subject${TIME}${COUNTER}"/>
	<t:property name="forward.content" value=".content${TIME}${COUNTER}"/>


 	<t:test >
        <t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m origid="${account2.messageId}" rt="w">
					<e t="s" a="${account2.name}"/>
					<e t="f" a="${account1.name}"/>
					<e t="t" a="${account3.name}"/>
					<su>Fwd: ${forward.subject}</su>
					<mp ct="text/plain">
						<content>----- Forwarded Message -----</content>
					</mp>					
				</m>
			</SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="mail01.forward.id"/>
        </t:response>
    </t:test>    

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

   <t:test required="true">
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${forward.subject})</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>             
             <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id}"/>            
             <t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="f"]' attr="a" match="${account2.name}"/>
             <t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="s"]'  emptyset="1"/> 
        </t:response>
    </t:test>	
	
</t:test_case>

<t:test_case testcaseid="ForwardApptMsgSendOnBehalf_01" type="smoke"  bugids="66629">
    <t:objective>Verify that a user can forward calendar invite message to other user as sendOnBehalfOf when sendOnBehalfOf right is not granted</t:objective>
    <t:steps>
		1. Login to account1
		2. Create an appointment invite account2.
		3. Login to account2
		4. Find the calendar invite message
		5. Forward the appointment invite message to account3 sendOnBehalfOf of account1.
		6. Login to account3
		7. Verify it get forwarded message.		
		8. Verify message has sender name as account2 and from name account1.
	</t:steps>

	<t:property name="server.zimbraAccount" value="${account1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
	<t:property name="appointment.subject" value="subject${TIME}${COUNTER} test calendar invite email forwarding"/>
	<t:property name="appointment.content" value=".content${TIME}${COUNTER}"/>
	<t:property name="time.20110630000000.gmt" value="1309392000000"/>
   
    <t:test>
        <t:request>
            <CreateAppointmentRequest xmlns="urn:zimbraMail">
                <m>
                    <inv > 
                    	<comp method="REQUEST" type="event" fb="B" transp="O" allDay="0" name="${appointment.subject}" >
                    		<at a="${account2.name}" role="REQ" ptst="NE" rsvp="1"/>
	                        <s d="${ICALTIME[${time.20110630000000.gmt}]}"/>  
	                        <e d="${ICALTIME(+1h)[${time.20110630000000.gmt}]}"/>  
	                        <or a="${account1.name}"/>
                        </comp>
                    </inv>
                    <e a="${account2.name}" t="t"/>
                    <mp content-type="text/plain">
                        <content>${appointment.content}</content>
                    </mp>
                    <su>${appointment.subject}</su>
                </m>
            </CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="apptId" set="appointment.apptId"/>
            	<t:select attr="invId" set="account1.appointment.invId"/>
            </t:select>
       </t:response>
    </t:test>
    
    <t:property name="server.zimbraAccount" value="${account2.server}"/>
    
    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="account2.authToken"/>
        </t:response>
    </t:test>    


	<t:test>
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="account2.calendar.folder.id"/>
				<t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="account2.inbox.folder.id"/>
			</t:select>
		</t:response>
	</t:test>

    <t:test required="true" >
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail"  types="message">
				<query>subject:${appointment.subject}</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse/mail:m">
            	<t:select attr="id" set="account2.appt1.messageId"/>            	
            	<t:select attr="su" match="${appointment.subject}"/>             	             	
            </t:select> 
            <t:select path="//mail:SearchResponse/mail:m/mail:inv/mail:comp" attr="apptId" set="account2.appt1.invtId" />
        </t:response>
    </t:test>
    
    
    <t:resttest>
		<t:restServletRequest>
			<id>${account2.appt1.messageId}</id>
		</t:restServletRequest>
		<t:restServletResponse>
			<t:select attr="StatusCode" match="200"/>			
			<t:select attr="Content-Type" match=".*method=.*"/>
		</t:restServletResponse>
	</t:resttest>
	
	<t:test>		
        <t:request>
			<SendMsgRequest xmlns="urn:zimbraMail">
				<m origid="${account2.appt1.messageId}" rt="w">
					<e t="f" a="${account1.name}"/>
          			<e t="s" a="${account2.name}"/>
					<e t="t" a="${account3.name}"/>
					<su>Fwd: ${forward.subject}</su>
					<mp ct="text/plain">
						<content>----- Forwarded Message -----</content>
					</mp>					
				</m>
			</SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id" set="mail01.forward.id"/>
        </t:response>
    </t:test>

	<t:property name="forward.subject" value="subject${TIME}${COUNTER}"/>
	<t:property name="forward.content" value=".content${TIME}${COUNTER}"/>

    <t:test>
        <t:request>
            <ForwardAppointmentRequest xmlns="urn:zimbraMail" id="${account2.appt1.invtId}">
                <m>
					<e t="t" a="${account3.name}"/>
					<su>${forward.subject}</su>
					<mp ct="text/plain">
					    <content>${forward.content}</content>
					</mp>
                </m>
            </ForwardAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:ForwardAppointmentResponse">
            </t:select>
       </t:response>
    </t:test>

	<t:property name="server.zimbraAccount" value="${account3.server}"/>

    <t:test >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account3.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>
        </t:response>
    </t:test>

   <t:test required="true">
        <t:request>
			<SearchRequest xmlns="urn:zimbraMail" types="message">
				<query>subject:(${forward.subject})</query>
			</SearchRequest>
        </t:request>
        <t:response>      
            <t:select path="//mail:SearchResponse">
            	<t:select path="//mail:m" attr="id" set="message.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test >
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${message.id}" />
            </GetMsgRequest>
        </t:request>
        <t:response>
             <t:select path="//mail:GetMsgResponse/mail:m/mail:inv/mail:comp" attr="compNum" set="account3.compNum"/>
             <t:select path="//mail:GetMsgResponse/mail:m/mail:inv/mail:comp" attr="apptId" set="account3.apptId" />
             <t:select path="//mail:GetMsgResponse/mail:m" attr="id" match="${message.id}"/>            
             <t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="f"]' attr="a" match="${account1.name}"/>
             <t:select path='//mail:GetMsgResponse/mail:m/mail:e[@t="s"]' attr="a" match="${account2.name}"/>  
        </t:response>
    </t:test>	
	
</t:test_case>

</t:tests>
