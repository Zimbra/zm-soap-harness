<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="organizer1.name" value="organizer1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="resource1.name" value="laptop.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="invitee1.name" value="invitee1.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="Resource.equipment" value="Equipment"/>

<t:property name="verb.accept" value="ACCEPT"/>
<t:property name="verb.decline" value="DECLINE"/>
<t:property name="verb.completed" value="COMPLETED"/>
<t:property name="verb.delgated" value="DELEGATED"/>
<t:property name="verb.tentative" value="TENTATIVE"/>

<t:property name="ptst.accept" value="AC"/>
<t:property name="ptst.decline" value="DE"/>
<t:property name="ptst.completed" value="CO"/>
<t:property name="ptst.delgated" value="DE"/>
<t:property name="ptst.tentative" value="TE"/>
<t:property name="ptst.needs" value="NE"/>

<t:property name="timezone.pst" value="(GMT-08.00) Pacific Time (US &amp; Canada)"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>basic system check</t:objective>
    <t:steps>
    	Pinging the server
    </t:steps>
    
    <t:test id="ping">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>

<t:test_case testcaseid="acct_setup" type="always" >
    <t:objective>Create test accounts</t:objective>
    <t:steps>
    	Logging in as admin
    	Creating organizer
		Creating resource    	 
    </t:steps>
   
    <!-- Login to admin -->
    <t:test id="admin_login" required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>
    
    <!-- Create Organizer -->
    <t:test id="create_test_organizer1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${organizer1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="organizer1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="organizer1.server"/>
        </t:response>
    </t:test>

	<!-- Creating resource -->
	<t:test>
        <t:request>
			<CreateCalendarResourceRequest xmlns="urn:zimbraAdmin">
				<name>${resource1.name}</name>
                <password>${defaultpassword.value}</password>
				<a n="zimbraCalResType">${Resource.equipment}</a>
				<a n="displayName">${resource1.name}</a>
				<a n="zimbraCalResAutoAcceptDecline">TRUE</a>
				<a n="zimbraCalResAutoDeclineIfBusy">TRUE</a>
			</CreateCalendarResourceRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateCalendarResourceResponse/admin:calresource" attr="id" set="resource1.id"/>
            <t:select path='//admin:CreateCalendarResourceResponse/admin:calresource/admin:a[@n="zimbraMailHost"]' set="resource1.server"/>
        </t:response>
    </t:test>
    
	<!-- Create Invitee
    <t:test id="create_test_organizer1" required="false" depends="admin_login">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${invitee1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="invitee1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="invitee1.server"/>
        </t:response> 
    </t:test> -->
    
</t:test_case>


<t:test_case testcaseid="SendInviteReplyRequest_RecException_01" type="smoke" areas="Calendar">
    <t:objective>Verify participant status is shown to the organizer for an exception to a basic weekly recurrent appointment</t:objective>
    <t:steps>
    1. Login as organizer
    2. Create a recurring (daily) meeting request with booking a resource.  
    3. The resource will auto accept the meeting.        
    4. Create an exception for an instance of the recurring event      
    5. The resource will again auto accept the exception meeting/booking.
    6. Create an event which overlaps with the exception event 
    7. The resource should decline it since auto-decline is set to on.    
    </t:steps>

	<t:property name="server.zimbraAccount" value="${organizer1.server}"/>

    <t:test id="auth1" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${organizer1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
   
	<t:test required="true" >
		<t:request>
			<GetFolderRequest xmlns="urn:zimbraMail"/>
		</t:request>
		<t:response>
			<t:select path="//mail:GetFolderResponse">
				<t:select path="//mail:folder[@name='${globals.calendar}']" attr="id" set="organizer1.calendar.folder.id"/>
			</t:select>
		</t:response>
	</t:test>    
   
   	<!-- Apt Properties -->
	<t:property name="appointment.subject" value="subject${TIME}.${COUNTER}"/>
	<t:property name="appointment.location" value="location${TIME}.${COUNTER}"/>
	<t:property name="appointment.content" value="content${TIME}.${COUNTER}"/>

	
	<t:property name="time.08Jul2022100000.gmt" value="1657282156000"/>
	<t:property name="time.08Jul2022100000.pst" value="${TIME(-8h)[${time.08Jul2022100000.gmt}]}"/>

	<!-- Create Series of Appointment with a resource-->
    <t:test required="true" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" class="PUB" allDay="0" name="${appointment.subject}">
							<or a="${organizer1.name}"/>
						<!--  	<at role="REQ" ptst="NE" rsvp="1" a="${invitee1.name}" />-->
							<at role="NON" ptst="NE" cutype="RES" rsvp="1" a="${resource1.name}"/>
							<s d="${ICALTIME[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}" />
							<e d="${ICALTIME(+3h)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}" />
							<recur>
								<add>
									<rule freq="DAI">
										<interval ival="1"/>
									</rule>
								</add>
							</recur>
						</comp>
					</inv>
					<!--  <e a="${invitee1.name}" t="t"/> -->
					<e a="${resource1.name}" t="t"/>					
					<su>${appointment.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">
            	<t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<!-- <t:select attr="subject" set="organizer1.subject" /> -->
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>

	<!--  Apt exception - Change an instance to more hours and also changing the subject -->
	
	<t:property name="appointment.exception.subject" value="exception${TIME}.${COUNTER}" delay="30000" />
    <t:test required="true" delay="30000" >
        <t:request>
			<CreateAppointmentExceptionRequest xmlns="urn:zimbraMail" id="${organizer1.appt1.invId}" comp="0">
				<m>
					<inv >
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.exception.subject}">
							<s d="${ICALTIME(+2d)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}"/>
							<e d="${ICALTIME(+2d)(+6h)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}"/>
							<!--  <at a="${invitee1.name}" role="REQ" ptst="NE" rsvp="1"/>-->							
							<at a="${resource1.name}" role="NON" ptst="AC" cutype="RES" rsvp="1"/>
							<or a="${organizer1.name}"/>
							<exceptId d="${ICALTIME(+2d)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}"/>
						</comp>
					</inv>
					<!--  <e t="t" a="${invitee1.name}"/> -->
					<e a="${resource1.name}" t="t"/>
					<su>${appointment.exception.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentExceptionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentExceptionResponse">
            	<!--  <t:select attr="calItemId" set="organizer1.appt1.calItemId"/>
            	<t:select attr="invId" set="organizer1.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.appt1.apptId"/> -->            	
            </t:select>
        </t:response>
    </t:test>
    
    <!--  Create an appointment which overlaps with the existing one -->
    
    <t:property name="appointment.overlap.subject" value="overlap${TIME}.${COUNTER}"/>
    <t:test required="true" delay="10000" >
        <t:request>
			<CreateAppointmentRequest xmlns="urn:zimbraMail">
				<m >
					<inv>
						<comp status="CONF" fb="B" transp="O" allDay="0" name="${appointment.overlap.subject}">
							<or a="${organizer1.name}"/>							
							<at role="NON" ptst="NE" cutype="RES" a="${resource1.name}" rsvp="1"/>
							<s d="${ICALTIME(+2d)(+1h)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}" />
							<e d="${ICALTIME(+2d)(+7h)[${time.08Jul2022100000.pst}]}" tz="${timezone.pst}" />							
						</comp>
					</inv>					
					<e a="${resource1.name}" t="t"/>
					<su>${appointment.overlap.subject}</su>
					<mp ct="text/plain">
						<content>${appointment.content}</content>
					</mp>
				</m>
			</CreateAppointmentRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateAppointmentResponse">        	
	          	<t:select attr="calItemId" set="organizer1.over.appt1.calItemId"/>   	
            	<t:select attr="invId" set="organizer1.over.appt1.invId"/>
            	<t:select attr="apptId" set="organizer1.over.appt1.apptId"/>
            </t:select>
        </t:response>
    </t:test>
    
    
    <!--  Do a GetMsgRequest to know the status of the overlap appointment -->
    <t:test delay="10000">
        <t:request>
            <GetMsgRequest xmlns="urn:zimbraMail">
                <m id="${organizer1.over.appt1.invId}"/>
            </GetMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:GetMsgResponse/mail:m[@id='${organizer1.over.appt1.invId}']">
            	 <t:select path="//mail:at[@a='${resource1.name}']" attr="ptst" match="${ptst.decline}"/>
            	<!-- <t:select path="//mail:reply[@at='${resource1.name}']" attr="ptst" match="${ptst.decline}"/> --> 
            </t:select>
        </t:response>
    </t:test>
      
</t:test_case>

</t:tests>
