<t:tests xmlns:t = "urn:zimbraTestHarness">

<t:property name="test_acct1.server" value="NOT_DEFINED"/>
<t:property name="test_acct2.server" value="NOT_DEFINED"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:property name="account1.name" value="test1${TIME}${COUNTER}@${defaultdomain.name}"/>
<t:property name="account2.name" value="test2${TIME}${COUNTER}@${defaultdomain.name}"/>

<t:property name="msg01.subject" value="message1"/>
<t:property name="msg02.subject" value="message2"/>
<t:property name="message_content" value="this mail is to check whether the message is read or unread"/>

<t:property name="read_spaces" value="   "/>
<t:property name="read_spchar" value="*^!"/>
<t:property name="read_alpha" value="1abc2"/>
<t:property name="read_text" value="abcdefg"/>
<t:property name="read_numbers" value="123"/>
<t:property name="read_negative" value="-123"/>
<t:property name="read_decimal" value="5.0"/>

<t:test_case testcaseid = "Ping" type = "always">
    <t:objective>basic system check</t:objective>
    
    <t:test id = "ping">
        <t:request>
            <PingRequest xmlns = "urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path = "//admin:PingResponse"/>
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid = "acctSetup1_search_read" type = "always">
    <t:objective>create test account</t:objective>
    
    <t:test id = "admin_login" required = "true" depends = "ping">
        <t:request>
            <AuthRequest xmlns = "urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path = "//admin:AuthResponse/admin:authToken" set = "authToken"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account1.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>
    
    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>   
       
</t:test_case>


<t:test_case testcaseid="acctSetup2_search_read" type="always">
<t:objective>Setup the accounts for test purpose </t:objective>
<t:steps>1. Login to account2 
         2. Send a mail to account1
         3. Login to account 1 for test purpose
</t:steps>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

     <t:test required="true">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a="${account1.name}"/>
                    <su>${msg01.subject}</su>
                    <mp ct="text/plain">
                        <content>${message_content}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse"/>
        </t:response>
    </t:test>
    
    <!-- Order is important in this test, make sure message1 comes before message2 -->
    <t:test required="true" delay="${postfixdelay.msec}">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a="${account1.name}"/>
                    <su>${msg02.subject}</su>
                    <mp ct="text/plain">
                        <content>${message_content}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse"/>
        </t:response>
    </t:test>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <!-- Find the message ID's for account1 -->
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc">
                <query>subject:(${msg01.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="send1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" sortBy="dateDesc">
                <query>subject:(${msg02.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="send2.id"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="search_read01" type="functional">
    <t:objective>Verify read attribute of search by putting fetch=0 and read=1.</t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="0" read="1">
                <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" match="${send2.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='f']" attr="a" match="${account2.name}"/>            
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="su" match="${msg02.subject}"/>           
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" match="${send1.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[2]/mail:e[@t='f']" attr="a" match="${account2.name}"/>           
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="su" match="${msg01.subject}"/>                                  
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>            
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment">
                <query>is:read</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail" emptyset="1"/>   
        </t:response>
    </t:test>
    
</t:test_case>


<t:test_case testcaseid="search_read02" type="smoke" bugids="6473, 16719">
    <t:objective>Verify read attribute of search for read="0".</t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="0">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" match="${send2.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='f']" attr="a" match="${account2.name}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='t']" attr="a" match="${account1.name}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg02.subject}"/>                
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:mp" attr="body" match="1"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:mp/mail:content" match="(?s)${message_content}.*"/>
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" match="${send1.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[2]/mail:e[@t='f']" attr="a" match="${account2.name}"/>           
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg01.subject}"/>            
        </t:response>
    </t:test>
  
    <t:test>
        <t:request>            
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment">
                <query>is:unread</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" match="${send2.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='f']" attr="a" match="${account2.name}"/>            
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg02.subject}"/>           
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" match="${send1.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[2]/mail:e[@t='f']" attr="a" match="${account2.name}"/>           
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg01.subject}"/>            
        </t:response>
    </t:test>
   
</t:test_case>


<t:test_case testcaseid="search_read03" type="smoke">
    <t:objective>Verify read attribute of search for read="1".</t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="1">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m[1]" attr="id" match="${send2.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='f']" attr="a" match="${account2.name}"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:e[@t='t']" attr="a" match="${account1.name}"/>
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg02.subject}"/>                
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:mp" attr="body" match="1"/>
            <t:select path="//mail:SearchResponse/mail:m[1]/mail:mp/mail:content" match="(?s)${message_content}.*"/>
            <t:select path="//mail:SearchResponse/mail:m[2]" attr="id" match="${send1.id}"/>
            <t:select path="//mail:SearchResponse/mail:m[2]/mail:e[@t='f']" attr="a" match="${account2.name}"/>           
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg01.subject}"/>           
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>            
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment">
                <query>is:read</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" match="${send2.id}"/>
            <t:select path="//mail:SearchResponse/mail:m/mail:e[@t='f']" attr="a" match="${account2.name}"/>           
            <t:select path="//mail:SearchResponse/mail:m" attr="su" match="${msg02.subject}"/>                         
        </t:response>
    </t:test>
    
</t:test_case>

<!--
<t:test_case testcaseid="search_read04" type="negative">
    <t:objective>Verify read attribute of search by putting invalid values of it (blank, spchar, integer. negative, sometext, alpha, spaces, deciaml).</t:objective>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>   
        </t:response>
    </t:test>    

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_spchar}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>         
        </t:response>
    </t:test> 

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_number}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                       
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_negative}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                       
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_text}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                                                
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_alpha}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>                                                        
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_spaces}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>          
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="${read_decimal}">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>         
        </t:response>
    </t:test>

</t:test_case>
-->

<t:test_case testcaseid="search_read05" type="negative">
    <t:objective>Verify read attribute of search by putting leading and trailing spaces with its value=1.</t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="   1">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>        
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message,appointment" fetch="1" read="1   ">
                  <query>message</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//zimbra:Code" match="^service.INVALID_REQUEST$"/>         
        </t:response>
    </t:test>
    
</t:test_case>


</t:tests>
