<t:tests xmlns:t="urn:zimbraTestHarness">


<t:property name="test_acct.server" value="NOT_DEFINED"/>

<!-- READ ME : 
    There are 5 mails in this account.
	The folders they will be residing are as follows: 

    email17A : Inbox
    email17B : Inbox/Subfolder1 # TODO
    email17C : Inbox/Subfolder1/Subfolder2 # TODO
    email17D : Trash
	email17E : Spam

	email17F : Sent (Created using SOAP (not QAsetup utility)) # TODO
	email17G : Moved to trash
-->


<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:property name="email17A.subject" value="email17A"/>
<t:property name="email17B.subject" value="email17B"/>
<t:property name="email17C.subject" value="email17C"/>
<t:property name="email17D.subject" value="email17D"/>
<t:property name="email17E.subject" value="email17E"/>
<t:property name="email17F.subject" value="email17F"/>

<t:property name="folder.root" value="1"/>
<t:property name="op.move" value="move"/>

<t:property name="account17.user" value="account17.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="account17.password" value="${defaultpassword.value}"/>
<t:property name="account17.dir" value="${testMailRaw.root}/email17"/>

<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>

<t:test_case testcaseid="Ping" type="always" >
    <t:objective>account setup</t:objective>
    <t:steps> 
                1.Admin login
                2.Create test account
                3.Use lmtp inject to inject the message
    </t:steps> 

    <t:test required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>
    
    <t:test required="true" >
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${account17.user}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="name"  match="${account17.user}"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct.server"/>
        </t:response>
    </t:test>  
    
    <t:mailinjecttest>
        <t:lmtpInjectRequest>
		    <foldername>${account17.dir}</foldername>
		    <to>${account17.user}</to>
		    <from>${nonZimbraUser.name}</from>
		    <server>${test_acct.server}</server>
        </t:lmtpInjectRequest>
    </t:mailinjecttest>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct.server}"/>

<t:test_case testcaseid="SearchAuthRequest" type="functional" bugids="2395">
    <t:objective> Create setup for the Search Request </t:objective>
    <t:steps>1. Login to the account.
             2. Modify the Prefs to include Trash and Spam in search result.
             3. Search mails to get the message-ids
             4. Get the ids of various folders 
             5. Move some folder within other
             6. Move the mails to different folders.
    </t:steps>

    <t:test id="login" required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${account17.user}</account>
                <password>${account17.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime" match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>
    
     <t:test id="modifyPrefsRequest">
        <t:request>
            <ModifyPrefsRequest xmlns="urn:zimbraAccount">
                <pref name="zimbraPrefIncludeSpamInSearch">${globals.true}</pref>
                <pref name="zimbraPrefIncludeTrashInSearch">${globals.true}</pref>
            </ModifyPrefsRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:ModifyPrefsResponse"/>
        </t:response>
    </t:test>

    <t:test id="searchRequest1">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${email17A.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m">
            <t:select attr="su" match="^${email17A.subject}$"/>
            <t:select attr="id" set="email17A.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test id="searchRequest2">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query>subject:(${email17B.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m">
            <t:select attr="su" match="^${email17B.subject}$"/>
            <t:select attr="id" set="email17B.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test id="searchRequest3">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:(${email17C.subject}) </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m">
            <t:select attr="su" match="^${email17C.subject}$"/>
            <t:select attr="id" set="email17C.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test id="searchRequest4">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:(${email17D.subject}) </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m">
            <t:select attr="su" match="^${email17D.subject}$"/>
            <t:select attr="id" set="email17D.id"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test id="searchRequest5">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> subject:(${email17E.subject}) </query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m">
            <t:select attr="su" match="^${email17E.subject}$"/>
            <t:select attr="id" set="email17E.id"/>
            </t:select>
        </t:response>
    </t:test>

     <t:test id="getFolderRequest">
        <t:request>
               <GetFolderRequest xmlns = "urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:folder[@name='${globals.inbox}']" attr="id" set="folder_inbox.id"/>
            <t:select path="//mail:folder[@name='${globals.trash}']" attr="id" set="folder_trash.id"/>
            <t:select path="//mail:folder[@name='${globals.sent}']" attr="id" set="folder_sent.id"/>
            <t:select path="//mail:folder[@name='${globals.spam}']" attr="id" set="folder_spam.id"/> 
        </t:response>
    </t:test>

    <t:test id="msgActionRequest1" depends="searchRequest1,getFolderRequest">
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${email17D.id}" op="${op.move}" l="${folder_trash.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.move}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${email17D.id}"/>
        </t:response>
    </t:test> 
    
     <t:test id="msgActionRequest2" depends="searchRequest2,getFolderRequest">
        <t:request>
            <MsgActionRequest xmlns = "urn:zimbraMail">
                <action id = "${email17E.id}" op="${op.move}" l="${folder_spam.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "op" match = "${op.move}"/>
            <t:select path = "//mail:MsgActionResponse/mail:action" attr = "id" match = "${email17E.id}"/>
        </t:response>
    </t:test>

</t:test_case> 


<t:test_case testcaseid="anywhere_SearchRequest1" type="functional" >
    <t:objective> Verify that a search for query is:anywhere finds all mails </t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> is:anywhere </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17A.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17B.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17C.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17D.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17E.id}']"/>
        </t:response>
    </t:test>

</t:test_case> 


<t:test_case testcaseid="anywhere_SearchRequest2" type="functional" bugids="2445">
    <t:objective> Verify that a combination search for query "content:(Now) is:anywhere" finds all mails </t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> content:(Now) </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>
    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> is:anywhere </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> content:(Now) is:anywhere </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17A.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17B.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17C.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17D.id}']"/>
            <t:select path="//mail:SearchResponse/mail:m[@id='${email17E.id}']"/>
        </t:response>
    </t:test>


</t:test_case> 

<t:test_case testcaseid="anywhere_SearchRequest3" type="functional" bugids="15160">
    <t:objective> Verify that an is:anywhere" finds trashed mails </t:objective>

	<t:property name="message1.content" value="Sample Content is written here"/>
	<t:property name="message1.term" value="written"/>

    <t:test>
        <t:request>
            <AddMsgRequest xmlns="urn:zimbraMail">
                <m l="${folder_inbox.id}">
                    <content>To: foo@example.com
From: bar@example.com
Subject: email17G
Date: Wed, 15 Aug 2007 10:11:05 -0700 (PDT)

${message1.content}
                    
                    </content>
                </m>
            </AddMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:AddMsgResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> ${message1.term} </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
				<t:select path="//mail:m[@id='${message1.id}']" attr="l" match="${folder_inbox.id}"/>
            </t:select>
        </t:response>
    </t:test>
    
    <t:test>
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
            	<action id="${message1.id}" op="move" l="${folder_trash.id}"/>
        	</MsgActionRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:MsgActionResponse">
				<t:select path="//mail:action" attr="id" match="${message1.id}"/>
            </t:select>
        </t:response>
    </t:test>
    


    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> ${message1.term} is:anywhere </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
				<t:select path="//mail:m[@id='${message1.id}']" attr="l" match="${folder_trash.id}"/>
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 


<t:test_case testcaseid="anywhere_SearchRequest4" type="functional" bugids="34265">
    <t:objective> Verify that "under" and "not under" quesry works fine </t:objective>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> under:INBOX </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="l" match="2"/>
            </t:select>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message">
                <query> not under:INBOX </query>
            </SearchRequest>
        </t:request>
        <t:response>       
            <t:select path="//mail:SearchResponse">
				<t:select path="//mail:m" attr="l" match="2" emptyset="1"/>
				<t:select path="//mail:m" attr="l" match="3" />
            </t:select>
        </t:response>
    </t:test>


</t:test_case> 


</t:tests>

