<t:tests xmlns:t="urn:zimbraTestHarness">

<t:property name="test_account1.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="test_account2.name" value="test.${TIME}.${COUNTER}@${defaultdomain.name}"/>
<t:property name="message1.subject" value="First message to be searched"/>
<t:property name="message2.subject" value="Second message to be searched"/>
    
<t:property name="op.read" value="read"/>
<t:property name="op.unread" value="!read"/>
<t:property name="op.flag" value="flag"/>
<t:property name="op.unflag" value="!flag"/>
<t:property name="op.tag" value="tag"/>
<t:property name="op.untag" value="!tag"/>
<t:property name="op.move" value="move"/>  
<t:property name="op.delete" value="delete"/>
<t:property name="op.update" value="update"/>    
<t:property name="op.spam" value="spam"/>
<t:property name="test_acct1.server" value="NOT_DEFINED"/>
    
<t:property name="server.zimbraAdmin" value="${zimbraServer.name}"/>
<t:test_case testcaseid="Ping" type="always" >
    <t:objective>Basic system check</t:objective>

    <t:test id="ping" required="true">
        <t:request>
            <PingRequest xmlns="urn:zimbraAdmin"/>
        </t:request>
        <t:response>
            <t:select path="//admin:PingResponse"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="acctSetup1_message_loop" type="always">
    <t:objective>Create test account</t:objective>
    <t:steps> 1. Login to admin.
              2. Create test account. 
    </t:steps>

    <t:test required="true" depends="ping">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAdmin">
                <name>${admin.user}</name>
                <password>${admin.password}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:AuthResponse/admin:authToken" set="authToken"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account1.name}</name>
                <password>${defaultpassword.value}</password>               
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account1.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct1.server"/>
        </t:response>
    </t:test>

    <t:test required="true">
        <t:request>
            <CreateAccountRequest xmlns="urn:zimbraAdmin">
                <name>${test_account2.name}</name>
                <password>${defaultpassword.value}</password>
            </CreateAccountRequest>
        </t:request>
        <t:response>
            <t:select path="//admin:CreateAccountResponse/admin:account" attr="id"  set="account2.id"/>
            <t:select path='//admin:CreateAccountResponse/admin:account/admin:a[@n="zimbraMailHost"]' set="test_acct2.server"/>
        </t:response>
    </t:test>

</t:test_case>

<t:property name="server.zimbraAccount" value="${test_acct1.server}"/>
<t:test_case testcaseid="acctSetup2_message_loop" type="always">
    <t:objective>Login as the test account</t:objective>

    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account1.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Message_loop1" type="sanity" duration="long" bugids="4082">
    <t:objective>Send 1000 mails to any account</t:objective>
    <t:steps> 1. Send a message with particular subject (will be used to perform various operation)
              2. Send many messages
              3. Test GetInfoRequest              
    </t:steps>

    <t:test>
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m>
                    <e t="t" a="${test_account2.name}"/>
                    <su>${message1.subject}</su>
                    <mp ct="text/plain">
                        <content>Content of mail ${TIME} ${COUNTER}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m"/>
        </t:response>
    </t:test>
    
    <t:test_loop count="1000" timeframeMax="10000">      
        
        <t:test>
            <t:request>
                <SendMsgRequest xmlns="urn:zimbraMail">
                    <m>
                        <e t="t" a="${test_account2.name}"/>
                        <su>Subject${TIME} ${COUNTER} of message</su>
                        <mp ct="text/plain">
                            <content>Content of mail ${TIME} ${COUNTER}</content>
                        </mp>
                    </m>
                </SendMsgRequest>
            </t:request>
            <t:response>
                <t:select path="//mail:SendMsgResponse/mail:m"/>
            </t:response>
        </t:test> 
        
    </t:test_loop>

    <t:test timeframeMax="3000">
        <t:request>
            <GetInfoRequest xmlns="urn:zimbraAccount"/>
        </t:request>
        <t:response>
            <t:select path="//acct:GetInfoResponse/acct:name"/>
        </t:response>
    </t:test>   

</t:test_case>

<!-- Login to account2 and perform various operation on messages -->  

<t:test_case testcaseid="acctSetup3_message_loop" type="always">
    <t:objective>Login to account2</t:objective>
    <t:steps>1. Login to account2
             2. Get the ids of different folders.        
    </t:steps>

<t:property name="server.zimbraAccount" value="${test_acct2.server}"/>
    <t:test required="true">
        <t:request>
            <AuthRequest xmlns="urn:zimbraAccount">
                <account by="name">${test_account2.name}</account>
                <password>${defaultpassword.value}</password>
            </AuthRequest>
        </t:request>
        <t:response>
            <t:select path="//acct:AuthResponse/acct:lifetime"  match="^\d+$"/>
            <t:select path="//acct:AuthResponse/acct:authToken" set="authToken"/>

        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <GetFolderRequest xmlns="urn:zimbraMail"/>
        </t:request>
        <t:response>
            <t:select path="//mail:GetFolderResponse/mail:folder[@name='${globals.root}']" attr="id" set="folder.pname"/>
            <t:select path="//mail:GetFolderResponse/mail:folder/mail:folder[@name='${globals.inbox}']" attr="id" set="folder.inbox"/>
        </t:response>
    </t:test>
    
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop2" type="sanity" duration="long">
    <t:objective>Search a message</t:objective>

    <t:test id="message_loop2a" timeframeMax="3000">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> subject:(${message1.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" set="message1.id"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop3" type="sanity" duration="long">
    <t:objective>Mark a message as read </t:objective>

    <t:test depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.read}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.read}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop4" type="sanity" duration="long">
    <t:objective>Mark a message as unread </t:objective>

    <t:test depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.unread}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.unread}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Message_loop5" type="sanity" duration="long">
    <t:objective>Flag a message </t:objective>

    <t:test depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.flag}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.flag}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>


<t:test_case testcaseid="Message_loop6" type="sanity" duration="long">
    <t:objective>Unflag a message </t:objective>

    <t:test depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.unflag}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.unflag}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>


<t:test_case testcaseid="Message_loop7" type="sanity" duration="long">
    <t:objective>Tag a message </t:objective>
    <t:steps> 1. Create a Tag                  
              2. Tag a message
    </t:steps>

    <t:test id="message_loop7a" >
        <t:request>
            <CreateTagRequest xmlns="urn:zimbraMail">
                <tag name="Tag${COUNTER}" color="1"/>
            </CreateTagRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateTagResponse/mail:tag" attr="id" set="tag.id"/>
        </t:response>
    </t:test>
    
    <t:test depends="message_loop2a,message_loop7a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.tag}" tag="${tag.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.tag}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Message_loop8" type="sanity" duration="long">
    <t:objective>Untag a message </t:objective>

    <t:test depends="message_loop2a,message_loop7a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.untag}" tag="${tag.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.untag}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>
    

<t:test_case testcaseid="Message_loop9" type="sanity" duration="long">
    <t:objective>Move a Mail to a custom folder</t:objective>
    <t:steps> 1. Create a folder
              2. Move a mail
    </t:steps>

    <t:test id="message_loop9a">
        <t:request>
            <CreateFolderRequest xmlns="urn:zimbraMail">
                <folder name="folder${TIME}${COUNTER}" l="${folder.pname}"/>
            </CreateFolderRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:CreateFolderResponse/mail:folder" attr="id" set="folder1.id"/>
        </t:response>
    </t:test>
    
    <t:test depends="message_loop2a,message_loop9a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.move}" l="${folder1.id}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.move}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>

</t:test_case>


<t:test_case testcaseid="Message_loop10" type="sanity" duration="long">
    <t:objective>Update a message </t:objective>

    <t:test depends="message_loop2a,message_loop7a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.update}" tag="${tag.id}" l="${folder.inbox}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.update}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop11" type="sanity" duration="long">
    <t:objective>Reply a message</t:objective>

    <t:test id="message_loop2a" timeframeMax="10000">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="r">
                    <e t="t" a="${test_account2.name}"/>
                    <su>Re: ${message1.subject}</su>
                    <mp ct="text/plain">
                        <content>Content of mail ${TIME} ${COUNTER}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop12" type="sanity" duration="long">
    <t:objective>Forward a message</t:objective>

    <t:test id="message_loop2a" timeframeMax="10000">
        <t:request>
            <SendMsgRequest xmlns="urn:zimbraMail">
                <m origid="${message1.id}" rt="w">
                    <e t="t" a="${test_account2.name}"/>
                    <su>Fwd: ${message1.subject}</su>
                    <mp ct="text/plain">
                        <content>Content of mail ${TIME} ${COUNTER}</content>
                    </mp>
                </m>
            </SendMsgRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SendMsgResponse/mail:m" attr="id"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop13" type="sanity" duration="long">
    <t:objective>Mark message as spam </t:objective>
    <t:steps>1. Mark message as spam
             2. Search the message in spam folder
    </t:steps>

    <t:test depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.spam}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.spam}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>

    <t:test>
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> in:(${globals.spam})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
    
<t:test_case testcaseid="Message_loop14" type="sanity" duration="long">
    <t:objective>Delete a message </t:objective>

    <t:test id="message_loop14a" depends="message_loop2a" timeframeMax="3000">
        <t:request>
            <MsgActionRequest xmlns="urn:zimbraMail">
                <action id="${message1.id}" op="${op.delete}"/>
            </MsgActionRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="op" match="${op.delete}"/>
            <t:select path="//mail:MsgActionResponse/mail:action" attr="id" match="${message1.id}"/>
        </t:response>
    </t:test>
   
</t:test_case>
    
 
<t:test_case testcaseid="Message_loop15" type="sanity" duration="long">
    <t:objective>Search a non existing message</t:objective>

    <t:test timeframeMax="3000">
        <t:request>
            <SearchRequest xmlns="urn:zimbraMail" types="message" offset="0" limit="25">
                <query> subject:(${message2.subject})</query>
            </SearchRequest>
        </t:request>
        <t:response>
            <t:select path="//mail:SearchResponse/mail:m" emptyset="1"/>
        </t:response>
    </t:test>
   
</t:test_case>   
    
    
</t:tests>
